{"name": "HumanEval_108_count_nums", "language": "fs", "prompt": "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\nlet count_nums (arr: int list): int  = \n", "tests": "let test() = \n  let candidate = count_nums\n  assert (candidate [] = 0)\n  assert (candidate [-1; -2; 0] = 0)\n  assert (candidate [1; 1; 2; -2; 3; 4; 5] = 6)\n  assert (candidate [1; 6; 9; -6; 0; 1; 5] = 5)\n  assert (candidate [1; 100; 98; -7; 1; -1] = 4)\n  assert (candidate [12; 23; 34; -45; -56; 0] = 5)\n  assert (candidate [0; 1] = 1)\n  assert (candidate [1] = 1)\n  0\n\ntest()", "completions": ["    let rec loop acc i = \n        if i = 0 then acc\n        else loop (acc + (int arr.[i-1])) (i-1)\n    loop 0 0", "    let rec loop acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            loop acc'\n    loop 0", "    let rec count_nums' acc n =\n        if n = 0 then acc\n        else count_nums' (acc + n) (n - 1)\n    count_nums' 0 (List.length arr)", "    let rec count_nums' (arr: int list) = \n        match arr with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + (x - x % 10)\n            if sum > 0 then count_nums' xs\n            else count_nums' xs\n    count_nums' arr", "    let rec loop acc = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            loop acc\n    loop 0", "    let rec loop i acc =\n        if i < 0 then acc\n        else loop (i-1) (acc + (i*10))\n    loop 0 0", "    let rec count_nums_rec (arr: int list) = \n        match arr with \n        | [] -> 0\n        | x::xs -> \n            let n = x - int x\n            if n > 0 then count_nums_rec xs else n\n    count_nums_rec arr", "    let rec loop acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            loop acc'\n    loop 0", "    let rec count_nums_rec (arr: int list) = \n        match arr with \n        | [] -> 0\n        | x::xs -> \n            let new_sum = \n                match x with \n                | x when x > 0 -> x - 1\n                | _ -> 0\n            count_nums_rec xs\n            + new_sum\n    count_nums_rec arr", "    let rec count_nums_rec (acc: int) (acc_nums: int list) (acc_nums_nums: int list) (acc_nums_nums_nums: int list) (acc_nums_nums_nums_nums: int list) (acc_nums_nums_nums_nums_nums: int list) (acc_nums_nums_nums_nums_nums_nums: int list) (acc_nums_nums_nums_nums_nums_nums_nums: int list) (acc_nums_nums_nums_nums_nums_nums_nums_nums: int list) (acc_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums: int list) (acc_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_nums_", "    let rec count_nums_rec (arr: int list) = \n        match arr with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then \n                count_nums_rec xs\n            else \n                count_nums_rec xs\n    count_nums_rec arr", "    let rec count_nums_rec (arr: int list) = \n        match arr with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then \n                count_nums_rec xs\n            else \n                count_nums_rec xs\n    count_nums_rec arr", "    let rec count_nums_rec acc = \n        match arr with \n        | [] -> acc\n        | x::xs -> count_nums_rec (acc + x) xs\n    count_nums_rec 0 arr", "    let rec loop acc = \n        match arr with \n        | [] -> acc\n        | x::xs -> \n            if x < 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let acc = acc + x\n            loop acc\n    loop 0", "    let rec loop acc n = \n        if n < 0 then acc\n        else loop (acc + n) (n - 1)\n    loop 0 0", "    let rec count_nums_rec (arr: int list) = \n        match arr with\n        | [] -> 0\n        | x::xs -> \n            if x < 0 then \n                count_nums_rec xs\n            else \n                count_nums_rec xs\n    count_nums_rec arr", "    let rec count_nums' acc n = \n        if n < 0 then acc\n        else count_nums' (acc + n) (n - 1)\n    count_nums' 0 (List.length arr)", "    let rec loop i = \n        if i < 0 then 0\n        else \n            let sum = (i * 10) + (i % 10)\n            if sum > 0 then loop (sum - 1)\n            else loop (i / 10)\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}