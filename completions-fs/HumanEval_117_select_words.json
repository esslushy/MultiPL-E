{"name": "HumanEval_117_select_words", "language": "fs", "prompt": "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlet select_words (s: string) (n: int): string list  = \n", "tests": "let test() = \n  let candidate = select_words\n  assert (candidate \"Mary had a little lamb\" 4 = [\"little\"])\n  assert (candidate \"Mary had a little lamb\" 3 = [\"Mary\"; \"lamb\"])\n  assert (candidate \"simple white space\" 2 = [])\n  assert (candidate \"Hello world\" 4 = [\"world\"])\n  assert (candidate \"Uncle sam\" 3 = [\"Uncle\"])\n  assert (candidate \"\" 4 = [])\n  assert (candidate \"a b c d e f\" 1 = [\"b\"; \"c\"; \"d\"; \"f\"])\n  0\n\ntest()", "completions": ["    let rec loop (s: string) (n: int): string list = \n        if n = 0 then []\n        else \n            let chars = s.ToCharArray()\n            let mutable i = 0\n            let mutable j = 0\n            let mutable acc = []\n            while i < chars.Length && j < n do\n                if chars.[i] = chars.[j] then \n                    acc <- (chars.[i..j-1] @ acc)\n                    i <- i + 1\n                    j <- j + 1\n                else\n                    acc <- loop chars (j-1)\n                    i <- i + 1\n                    j <- j - 1\n            acc\n    loop s n", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable result = []\n    while i < words.Length && n > 0 do\n        if words.[i] = words.[i-1] then\n            result <- result @ [words.[i]]\n            i <- i + 1\n        else\n            i <- i + 1\n    result", "    let rec select_words_rec (s: string) (n: int): string list = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = s.Split(' ')\n            if words.Length < n then \n                words\n            else\n                words |> List.map (fun word -> word.Trim()) |> select_words_rec words (n-words.Length)\n    select_words_rec s n", "    let rec select_words_rec (s: string) (n: int): string list = \n        if s = \"\" then []\n        else \n            let words = s.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            if words.Length = n then words\n            else select_words_rec words (n - 1)\n    select_words_rec s n", "    let rec select_words_rec (s: string) (n: int) = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = s.Split(' ')\n            if words.Length < n then []\n            else \n                let words = words.[..n-1]\n                words |> List.map (fun w -> w.Trim())\n    \n    select_words_rec s n", "    let rec loop (s: string) (n: int): string list = \n        match s with\n        | \"\" -> []\n        | _ when n = 0 -> []\n        | _ when n > 0 -> \n            let words = s.Split(' ')\n            let words = words |> Array.map (fun word -> word.Trim())\n            words |> List.filter (fun word -> word.Length > n)\n        | _ -> \n            let words = s.Split(' ')\n            words |> List.filter (fun word -> word.Length > n)\n    loop s n", "    let rec select_words_rec (s: string) (n: int): string list = \n        if n = 0 then []\n        else\n            let words = s.Split(' ')\n            if words.Length < n then []\n            else\n                let words = words.[..n-1]\n                if words.Length < n then []\n                else\n                    let words = words.[n..]\n                    if words.Length < n then []\n                    else\n                        words\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (fun w -> w.Trim())\n                        |> List.filter (fun w -> w.Length > 0)\n                        |> List.map (", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable result = []\n    while i < words.Length && not (Char.IsWhiteSpace(words.[i])) do\n        i <- i + 1\n        result <- result @ [words.[i]]\n    result", "    let rec select_words_rec (s: string) (n: int): string list = \n        if n = 0 then []\n        else \n            let chars = s.ToCharArray()\n            let mutable i = 0\n            let mutable j = 0\n            let mutable acc = []\n            while i < chars.Length && j < n do\n                if chars.[i] = chars.[j] then \n                    acc <- chars.[i..j] :: acc\n                    i <- i + 1\n                    j <- j + 1\n                else\n                    i <- i + 1\n                    j <- j + 1\n            select_words_rec s n\n    select_words_rec s n", "    let rec select_words_rec (s: string) (n: int): string list = \n        if n = 0 then []\n        else \n            let c = s.[n-1]\n            if c = ' ' then select_words_rec (s.Substring(0, n)) (n-1)\n            else select_words_rec (s.Substring(0, n)) (n-1)\n    select_words_rec s n", "    let rec select_words_rec (s: string) (n: int): string list = \n        if s.Length = 0 then []\n        elif n = 0 then []\n        else \n            let words = s.ToCharArray()\n            let mutable i = 0\n            let mutable j = 0\n            let mutable k = 0\n            let mutable l = []\n            while i < words.Length do\n                if words.[i] = words.[j] then\n                    l <- l @ [words.[i]]\n                    i <- i + 1\n                else\n                    j <- j + 1\n                    k <- k + 1\n                    if k = words.Length then\n                        l <- l @ [words.[i]]\n                    i <- i + 1\n            l\n    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = []\n    while i < words.Length do\n        if words.[i] = words.[j] then\n            l <- l @ [words.[i]]\n            i <- i + 1\n        else\n            j <- j + 1\n            k <- k + 1\n            if k = words.Length then\n                l <- l @ [words.[i]]\n            i <- i + 1\n    l", "    let rec select_words_rec (s: string) (n: int): string list = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.ToCharArray()\n                |> Array.filter (fun c -> c <> ' ' && c <> '\\t')\n                |> Array.map (fun c -> c.ToString())\n                |> List.ofArray\n            words |> List.filter (fun w -> n >= 0 && n < words.Length && words.[n] = w)\n    \n    let words = select_words_rec s n\n    words", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable result = []\n    while i < words.Length do\n        if words.[i] = n then\n            result <- words.[i..]\n            i <- i + 1\n    result", "    let rec select_words_rec (s: string) (n: int): string list = \n        match s with\n        | \"\" -> []\n        | _ ->\n            let words = s.Split(' ')\n            if words.Length < n then\n                words\n            else\n                words |> List.filter (fun word -> word.Length < n)\n    \n    let words = select_words_rec s n\n    words", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable result = []\n    while i < words.Length && not (Char.IsWhiteSpace(words.[i])) do\n        i <- i + 1\n        result <- result @ [words.[i]]\n    result", "    let rec select_words_rec (s: string) (n: int): string list = \n        if s.Length = 0 then []\n        elif n = 0 then []\n        else \n            let words = s.ToCharArray() |> Array.map (fun c -> c.ToString())\n            let words = words |> List.filter (fun c -> c.Length > n)\n            words |> List.map (fun c -> c.ToString())\n    \n    let words = select_words_rec s n\n    words", "    let rec select_words_rec (s: string) (n: int): string list = \n        if n = 0 then []\n        else\n            let s' = s.Substring(0, n)\n            let words = s'.Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            let words = words |> List.map (fun word -> word.Trim())\n            words |> List.filter (fun word -> word.Length > n)\n    \n    let words = select_words_rec s n\n    words", "    let rec select_words_rec (s: string) (n: int): string list = \n        match s with\n        | \"\" -> []\n        | _ -> \n            let words = \n                s.Split(' ')\n                |> Array.filter (fun word -> \n                    let n = n - 1\n                    n >= 0 && n < words.Length && words.[n] = word)\n            if words.Length = n then words else select_words_rec words n\n    select_words_rec s n", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable result = []\n    while i < words.Length && n > 0 do\n        if words.[i] = words.[i-1] then\n            result <- result @ [words.[i]]\n            i <- i + 1\n        else\n            i <- i + 1\n    result", "    let rec select_words_rec (s: string) (n: int): string list = \n        if s = \"\" then []\n        else\n            let words = s.Split(' ')\n            if words.Length < n then []\n            else\n                let words = words.[..(words.Length - n)]\n                if words.Length = n then words\n                else select_words_rec words (n - words.Length)\n    select_words_rec s n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}