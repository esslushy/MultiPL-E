{"name": "HumanEval_42_incr_list", "language": "fs", "prompt": "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nlet incr_list (l: int list): int list  = \n", "tests": "let test() = \n  let candidate = incr_list\n  assert (candidate [] = [])\n  assert (candidate [3; 2; 1] = [4; 3; 2])\n  assert (candidate [5; 2; 5; 2; 3; 3; 9; 0; 123] = [6; 3; 6; 3; 4; 4; 10; 1; 124])\n  0\n\ntest()", "completions": ["    let mutable res = []\n    for i in l do\n        res <- i::res\n    res", "    let rec incr_list' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> incr_list' (x::acc) xs\n    incr_list' [] l", "    let mutable res = []\n    for i in l do\n        res <- i::res\n    res", "    let rec incr_list' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> incr_list' (x::acc)\n    incr_list' []", "    let rec incr_list' acc =\n        match l with\n        | [] -> acc\n        | x::xs -> incr_list' (x::acc) xs\n    incr_list' [] l", "    let rec loop i = \n        if i = 0 then \n            [1..l.Length]\n        else \n            loop (i - 1)\n    loop l.Length", "    let rec loop i = \n        if i < 0 then []\n        else loop (i + 1)\n    loop 0", "    let rec incr_list' (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            incr_list' (x::xs)\n    incr_list' l", "    let mutable res = []\n    for i = 0 to l.Length - 1 do\n        res <- (l.[i] :: res)\n    res", "    let rec incr_list' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> incr_list' (x::acc) xs\n    incr_list' [] l", "    let mutable acc = []\n    for i in l do\n        acc <- i :: acc\n    acc", "    let mutable acc = []\n    for i = 0 to l.Length - 1 do\n        acc <- acc @ [i]\n    acc", "    let rec incr_list' (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> x::incr_list' xs\n    incr_list' l", "    let rec loop i = \n        if i < 0 then []\n        else loop (i - 1)\n    loop 0", "    let mutable res = []\n    for i in l do\n        res <- i::res\n    res", "    let mutable res = []\n    for i in l do\n        res <- i :: res\n    res", "    let rec incr_list' (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> x::incr_list' xs\n    incr_list' l", "    let mutable res = []\n    for i in l do\n        res <- i :: res\n    res", "    let mutable res = []\n    for i = 0 to l.Length-1 do\n        res <- i::res\n    res", "    let rec incr_list' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> incr_list' (x::acc) xs\n    incr_list' [] l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}