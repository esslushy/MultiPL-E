{"name": "HumanEval_14_all_prefixes", "language": "fs", "prompt": "//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nlet all_prefixes (string: string): string list  = \n", "tests": "let test() = \n  let candidate = all_prefixes\n  assert (candidate \"\" = [])\n  assert (candidate \"asdfgh\" = [\"a\"; \"as\"; \"asd\"; \"asdf\"; \"asdfg\"; \"asdfgh\"])\n  assert (candidate \"WWW\" = [\"W\"; \"WW\"; \"WWW\"])\n  0\n\ntest()", "completions": ["    let rec all_prefixes' (prefixes: string list) (str: string) = \n        match str with\n        | \"\" -> prefixes\n        | _ when str.StartsWith(prefixes.[0]) -> prefixes\n        | _ -> all_prefixes' (prefixes.Tail) (str.Substring(prefixes.Length))\n    all_prefixes' [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) = \n        match str with\n        | \"a\" -> prefixes\n        | \"ab\" -> prefixes @ [ \"a\", \"ab\" ]\n        | \"abc\" -> prefixes @ [ \"ab\", \"abc\" ]\n        | _ -> prefixes @ [ str ]\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) = \n        match str with\n        | \"\" -> prefixes\n        | _ -> \n            let prefix = str.Substring(0, str.IndexOf('.'))\n            prefixes @ [prefix]\n            |> all_prefixes_rec prefixes\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) = \n        match str with\n        | \"\" -> prefixes\n        | _ -> \n            let prefix = str.Substring(0, str.IndexOf('.'))\n            prefixes @ [prefix]\n            |> all_prefixes_rec (prefixes @ [prefix])\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | 'a' -> prefixes\n        | 'b' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'c' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'd' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'e' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'f' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'g' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'h' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'i' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'j' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'k' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'l' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'm' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'n' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'o' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'p' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'q' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'r' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 's' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 't' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'u' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'v' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'w' -> prefixes @ [ 'a', 'b', 'c' ]\n        | 'x' -> prefixes @ [ 'a',", "    let rec all_prefixes' (prefixes: string list) (string: string) =\n        match string with\n        | \"\" -> prefixes\n        | _ ->\n            let prefix = string.Substring(0, string.IndexOf('.'))\n            prefixes @ [prefix]\n            |> all_prefixes' (prefixes |> List.rev)\n            |> List.rev\n    all_prefixes' [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ when str.StartsWith(prefixes.[0]) -> prefixes\n        | _ -> all_prefixes_rec (prefixes.Tail) (str.Substring(prefixes.Length))\n    all_prefixes_rec [] string", "    let rec all_prefixes' (prefixes: string list) (string: string) = \n        match string with\n        | \"\" -> prefixes\n        | _ -> \n            let prefixes = prefixes @ [string]\n            all_prefixes' prefixes (string.Substring(0, string.Length - prefixes.Length))\n    all_prefixes' [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) = \n        match str with\n        | \"\" -> prefixes\n        | _ -> \n            let prefix = str.Substring(0, str.IndexOf('.'))\n            let suffix = str.Substring(str.IndexOf('.') + 1)\n            prefixes @ [prefix; suffix]\n            |> all_prefixes_rec (prefixes @ [prefix])\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ when str.StartsWith(prefixes.[0]) -> prefixes\n        | _ -> all_prefixes_rec (prefixes.Tail) str\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (prefix: string) =\n        match prefixes with\n        | [] -> prefix::prefixes\n        | head::tail ->\n            let prefix = head\n            if prefix.StartsWith(prefix) then\n                all_prefixes_rec (prefix::prefixes) tail\n            else\n                prefix::prefixes\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (prefix: string) =\n        match prefixes with\n        | [] -> prefix :: prefixes\n        | prefix :: prefixes ->\n            let prefix_length = prefix.Length\n            if prefix_length > 1 then\n                all_prefixes_rec (prefixes :: prefixes) prefix\n            else\n                prefix :: prefixes\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (prefix: string) = \n        match prefixes with\n        | [] -> prefix :: prefixes\n        | head::tail -> \n            let prefix_length = head.Length\n            if prefix_length > 1 then\n                all_prefixes_rec (prefix::prefixes) (head.Substring(0, prefix_length))\n            else\n                prefix::prefixes\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefix = str.Substring(0, str.Length - 1)\n            prefixes @ [prefix]\n            |> all_prefixes_rec (prefixes @ [prefix])\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ when str.StartsWith(prefixes.[0]) -> prefixes\n        | _ -> all_prefixes_rec (prefixes.Tail) (str.Substring(prefixes.Length))\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ ->\n            let prefix = str.Substring(0, str.IndexOf('.'))\n            let prefixes' = prefixes @ [prefix]\n            all_prefixes_rec prefixes' str\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) =\n        match str with\n        | \"\" -> prefixes\n        | _ when str.StartsWith(prefixes.[0]) -> prefixes\n        | _ -> all_prefixes_rec (prefixes.Tail) (str.Substring(prefixes.Length))\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (string: string) = \n        match string with\n        | \"\" -> prefixes\n        | _ -> \n            let prefix = string.Substring(0, string.IndexOf('.'))\n            let suffix = string.Substring(string.IndexOf('.'))\n            let prefixes' = prefix::prefixes\n            all_prefixes_rec prefixes' suffix\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) = \n        match str with\n        | \"\" -> prefixes\n        | _ when str.StartsWith(prefixes.[0]) -> prefixes\n        | _ -> \n            let prefixes' = str.Substring(0, prefixes.Length)\n            all_prefixes_rec prefixes' (str.Substring(prefixes.Length))\n    all_prefixes_rec [] string", "    let rec all_prefixes_rec (prefixes: string list) (str: string) = \n        match str with\n        | 'a' -> prefixes\n        | 'b' -> prefixes @ [ 'a' ]\n        | 'c' -> prefixes @ [ 'b' ]\n        | 'd' -> prefixes @ [ 'c' ]\n        | 'e' -> prefixes @ [ 'd' ]\n        | 'f' -> prefixes @ [ 'e' ]\n        | 'g' -> prefixes @ [ 'f' ]\n        | 'h' -> prefixes @ [ 'g' ]\n        | 'i' -> prefixes @ [ 'h' ]\n        | 'j' -> prefixes @ [ 'i' ]\n        | 'k' -> prefixes @ [ 'j' ]\n        | 'l' -> prefixes @ [ 'k' ]\n        | 'm' -> prefixes @ [ 'l' ]\n        | 'n' -> prefixes @ [ 'm' ]\n        | 'o' -> prefixes @ [ 'n' ]\n        | 'p' -> prefixes @ [ 'o' ]\n        | 'q' -> prefixes @ [ 'p' ]\n        | 'r' -> prefixes @ [ 'q' ]\n        | 's' -> prefixes @ [ 'r' ]\n        | 't' -> prefixes @ [ 's' ]\n        | 'u' -> prefixes @ [ 't' ]\n        | 'v' -> prefixes @ [ 'u' ]\n        | 'w' -> prefixes @ [ 'v' ]\n        | 'x' -> prefixes @ [ 'w' ]\n        | 'y' -> prefixes @ [ 'x' ]\n        | 'z' -> prefixes @ [ 'y' ]\n        | _ -> []\n    let prefixes = all_prefixes_rec [] string\n    prefixes"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}