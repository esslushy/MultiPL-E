{"name": "HumanEval_78_hex_key", "language": "fs", "prompt": "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\" the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should be 6.\n// For num = \"2020\" the output should be 2.\nlet hex_key (num: string): int  = \n", "tests": "let test() = \n  let candidate = hex_key\n  assert (candidate \"AB\" = 1)\n  assert (candidate \"1077E\" = 2)\n  assert (candidate \"ABED1A33\" = 4)\n  assert (candidate \"2020\" = 2)\n  assert (candidate \"123456789ABCDEF0\" = 6)\n  assert (candidate \"112233445566778899AABBCCDDEEFF00\" = 12)\n  0\n\ntest()", "completions": ["    let mutable i = 0\n    let mutable num_digits = 0\n    while i < num.Length do\n        if num.[i] = '0' then\n            num_digits <- num_digits + 1\n            i <- i + 1\n        else\n            num_digits <- num_digits + 1\n            i <- i + 1\n    num_digits", "    let num = num.ToCharArray()\n    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = 'A' || num.[i].[j] = 'B' || num.[i].[j] = 'C' || num.[i].[j] = 'D' || num.[i].[j] = 'E' || num.[i].[j] = 'F' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    if i = num.Length then 0 else\n    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = '0' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    if i = num.Length then 0 else\n    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = '1' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    if i = num.Length then 0 else\n    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = '2' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    if i = num.Length then 0 else\n    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = '3' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    if", "    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = '0' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    if i = 0 then 0 else i - 1", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    let mutable m = 0\n    let mutable n = 0\n    let mutable p = 0\n    let mutable q = 0\n    let mutable r = 0\n    let mutable s = 0\n    let mutable t = 0\n    let mutable u = 0\n    let mutable v = 0\n    let mutable w = 0\n    let mutable x = 0\n    let mutable y = 0\n    let mutable z = 0\n    let mutable z' = 0\n    let mutable z'' = 0\n    let mutable z''' = 0\n    let mutable z'''' = 0\n    let mutable z''''' = 0\n    let mutable z'''''' = 0\n    let mutable z''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' =", "    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = 'A' || num.[i].[j] = 'B' || num.[i].[j] = 'C' || num.[i].[j] = 'D' || num.[i].[j] = 'E' || num.[i].[j] = 'F' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    i, j", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    let mutable m = 0\n    let mutable n = 0\n    let mutable p = 0\n    let mutable q = 0\n    let mutable r = 0\n    let mutable s = 0\n    let mutable t = 0\n    let mutable u = 0\n    let mutable v = 0\n    let mutable w = 0\n    let mutable x = 0\n    let mutable y = 0\n    let mutable z = 0\n    let mutable z' = 0\n    let mutable z'' = 0\n    let mutable z''' = 0\n    let mutable z'''' = 0\n    let mutable z''''' = 0\n    let mutable z'''''' = 0\n    let mutable z''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' =", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    while i < num.Length && j < num.Length do\n        if num.[i] = '0' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = '1' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = '2' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = '3' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = '4' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = '5' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = '6' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = '7' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = '8' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = '9' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = 'A' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = 'B' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = 'C' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = 'D' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = 'E' then\n            i <- i + 1\n            k <- k + 1\n        elif num.[i] = 'F' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i] = '0' then\n            i <- i + 1\n            l <- l + 1\n        elif num.[i]", "    let rec hex_key_rec (num: string) = \n        match num with\n        | \"0\" -> 0\n        | \"1\" -> 1\n        | \"2\" -> 2\n        | \"3\" -> 3\n        | \"4\" -> 4\n        | \"5\" -> 5\n        | \"6\" -> 6\n        | \"7\" -> 7\n        | \"8\" -> 8\n        | \"9\" -> 9\n        | \"A\" -> A\n        | \"B\" -> B\n        | \"C\" -> C\n        | \"D\" -> D\n        | \"E\" -> E\n        | \"F\" -> F\n        | _ -> failwith \"Invalid hexadecimal number\"\n    hex_key_rec num", "    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = '0' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    i, j", "    let rec hex_digit (num: string) = \n        match num with\n        | \"\" -> 0\n        | _ -> \n            let num_digit = num.Length\n            let num_digit_upper = num_digit - 1\n            let num_digit_lower = num_digit - 2\n            let num_digit_upper_lower = num_digit_upper - 1\n            let num_digit_upper_lower = num_digit_upper - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper_lower = num_digit_upper_lower - 1\n            let num_digit_upper_lower = num_digit_upper_lower - 2\n            let num_digit_upper", "    let rec hex_key_rec (num: string) = \n        match num with\n        | \"\" -> 0\n        | _ -> \n            let mutable num_digit = 0\n            let mutable num_prime = 0\n            let mutable num_prime_prime = 0\n            let mutable num_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            let mutable num_prime_prime_prime_prime_prime_prime = 0\n            ", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    let mutable m = 0\n    let mutable n = 0\n    let mutable p = 0\n    let mutable q = 0\n    let mutable r = 0\n    let mutable s = 0\n    let mutable t = 0\n    let mutable u = 0\n    let mutable v = 0\n    let mutable w = 0\n    let mutable x = 0\n    let mutable y = 0\n    let mutable z = 0\n    let mutable z' = 0\n    let mutable z'' = 0\n    let mutable z''' = 0\n    let mutable z'''' = 0\n    let mutable z''''' = 0\n    let mutable z'''''' = 0\n    let mutable z''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n", "    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = 'A' || num.[i].[j] = 'B' || num.[i].[j] = 'C' || num.[i].[j] = 'D' || num.[i].[j] = 'E' || num.[i].[j] = 'F' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    i, j", "    let mutable i = 0\n    let mutable num_digits = 0\n    while i < num.Length do\n        let mutable digit = num.[i]\n        if digit >= '0' && digit <= '9' then\n            num_digits <- num_digits + 1\n            i <- i + 1\n        else\n            num_digits <- num_digits + 1\n            i <- i + 1\n    num_digits", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    let mutable m = 0\n    let mutable n = 0\n    let mutable p = 0\n    let mutable q = 0\n    let mutable r = 0\n    let mutable s = 0\n    let mutable t = 0\n    let mutable u = 0\n    let mutable v = 0\n    let mutable w = 0\n    let mutable x = 0\n    let mutable y = 0\n    let mutable z = 0\n    let mutable z' = 0\n    let mutable z'' = 0\n    let mutable z''' = 0\n    let mutable z'''' = 0\n    let mutable z''''' = 0\n    let mutable z'''''' = 0\n    let mutable z''''''' = 0\n    let mutable z'''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n    let mutable z''''''''''' = 0\n", "    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.Length do\n        if num.[i] = '0' then\n            i <- i + 1\n        elif num.[i] = '1' then\n            i <- i + 1\n        elif num.[i] = '2' then\n            i <- i + 1\n        elif num.[i] = '3' then\n            i <- i + 1\n        elif num.[i] = '4' then\n            i <- i + 1\n        elif num.[i] = '5' then\n            i <- i + 1\n        elif num.[i] = '6' then\n            i <- i + 1\n        elif num.[i] = '7' then\n            i <- i + 1\n        elif num.[i] = '8' then\n            i <- i + 1\n        elif num.[i] = '9' then\n            i <- i + 1\n        elif num.[i] = 'A' then\n            i <- i + 1\n        elif num.[i] = 'B' then\n            i <- i + 1\n        elif num.[i] = 'C' then\n            i <- i + 1\n        elif num.[i] = 'D' then\n            i <- i + 1\n        elif num.[i] = 'E' then\n            i <- i + 1\n        elif num.[i] = 'F' then\n            i <- i + 1\n        elif num.[i] = 'A' then\n            i <- i + 1\n        elif num.[i] = 'B' then\n            i <- i + 1\n        elif num.[i] = 'C' then\n            i <- i + 1\n        elif num.[i] = 'D' then\n            i <- i + 1\n        elif num.[i] = 'E' then\n            i <- i + 1\n        elif num.[i] = 'F' then\n            i <- i + 1\n        elif num.[i] = 'A' then\n            i <- i + 1\n        elif num.[i] = 'B' then\n            i <- i + 1\n        el", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    while i < num.Length && j < num.Length do\n        if num.[i] = '0' then\n            k <- k + 1\n            i <- i + 1\n        elif num.[i] = '1' then\n            l <- l + 1\n            i <- i + 1\n        else\n            k <- k + 1\n            i <- i + 1\n    if k = 0 then\n        l <- l + 1\n    if l = 0 then\n        0\n    else\n        let mutable p = 0\n        for i = 0 to l - 1 do\n            p <- p + (int (num.[i]))\n        p", "    let mutable i = 0\n    let mutable j = 0\n    while i < num.Length && j < num.[i].Length do\n        if num.[i].[j] = 'A' || num.[i].[j] = 'B' || num.[i].[j] = 'C' || num.[i].[j] = 'D' || num.[i].[j] = 'E' || num.[i].[j] = 'F' then\n            i <- i + 1\n            j <- j + 1\n        else\n            i <- i + 1\n            j <- j + 1\n    if i = num.Length then\n        0\n    else\n        let mutable k = 0\n        while k < num.[i].Length do\n            if num.[i].[k] = 'A' || num.[i].[k] = 'B' || num.[i].[k] = 'C' || num.[i].[k] = 'D' || num.[i].[k] = 'E' || num.[i].[k] = 'F' then\n                k <- k + 1\n            else\n                k <- k + 1\n        if k = num.[i].Length then\n            0\n        else\n            let mutable l = 0\n            while l < num.[i].Length do\n                if num.[i].[l] = 'A' || num.[i].[l] = 'B' || num.[i].[l] = 'C' || num.[i].[l] = 'D' || num.[i].[l] = 'E' || num.[i].[l] = 'F' then\n                    l <- l + 1\n                else\n                    l <- l + 1\n            if l = num.[i].Length then\n                0\n            else\n                let mutable m = 0\n                while m < num.[i].Length do\n                    if num.[i].[m] = 'A' || num.[i].[m] = 'B' || num.[i].[m] = 'C' || num.[i].[m] = 'D' || num.[i].[m] = 'E' || num.[i].[m] = 'F' then\n                        m <- m + 1\n                    ", "    let mutable i = 0\n    let mutable j = 0\n    let mutable k = 0\n    let mutable l = 0\n    let mutable m = 0\n    let mutable n = 0\n    let mutable p = 0\n    let mutable q = 0\n    let mutable r = 0\n    let mutable s = 0\n    while i < num.Length do\n        if num.[i] = '0' then\n            i <- i + 1\n            k <- k + 1\n            l <- l + 1\n            m <- m + 1\n            n <- n + 1\n            p <- p + 1\n            q <- q + 1\n            r <- r + 1\n            s <- s + 1\n        elif num.[i] = '1' then\n            i <- i + 1\n            k <- k + 1\n            l <- l + 1\n            m <- m + 1\n            n <- n + 1\n            p <- p + 1\n            q <- q + 1\n            r <- r + 1\n            s <- s + 1\n        elif num.[i] = '2' then\n            i <- i + 1\n            k <- k + 1\n            l <- l + 1\n            m <- m + 1\n            n <- n + 1\n            p <- p + 1\n            q <- q + 1\n            r <- r + 1\n            s <- s + 1\n        elif num.[i] = '3' then\n            i <- i + 1\n            k <- k + 1\n            l <- l + 1\n            m <- m + 1\n            n <- n + 1\n            p <- p + 1\n            q <- q + 1\n            r <- r + 1\n            s <- s + 1\n        elif num.[i] = '4' then\n            i <- i + 1\n            k <- k + 1\n            l <- l + 1\n            m <- m + 1\n            n <- n + 1\n            p <- p + 1\n            q <- q + 1\n            r <- r + 1\n            s <- s + 1\n        elif num.[i] = '5' then\n            i <- i + 1\n            k <- k + 1\n            l <- l + 1\n            m <- m + 1\n            n <-", "    let mutable i = 0\n    let mutable num_digits = 0\n    while i < num.Length do\n        if num.[i] = '0' then\n            num_digits <- num_digits + 1\n            i <- i + 1\n        else\n            num_digits <- num_digits + 1\n            i <- i + 1\n    num_digits"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}