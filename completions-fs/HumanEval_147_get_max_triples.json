{"name": "HumanEval_147_get_max_triples", "language": "fs", "prompt": "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u00e2\u2030\u00a4 i \u00e2\u2030\u00a4 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlet get_max_triples (n: int): int  = \n", "tests": "let test() = \n  let candidate = get_max_triples\n  assert (candidate 5 = 1)\n  assert (candidate 6 = 4)\n  assert (candidate 10 = 36)\n  assert (candidate 100 = 53361)\n  0\n\ntest()", "completions": ["    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) = \n        match a.Length, b.Length, c.Length, d.Length with\n        | 0, 0, 0, 0 -> 0\n        | 0, 0, 0, 1 -> 0\n        | 0, 0, 0, _ -> 1\n        | 0, 0, 1, 0 -> 1\n        | 0, 0, 1, 1 -> 1\n        | 0, 1, 0, 0 -> 0\n        | 0, 1, 0, 1 -> 0\n        | 0, 1, 1, 0 -> 1\n        | _, _, _, _ -> max_triples (a.[0]::b.[0]::c.[0]) (a.[1]::b.[1]::c.[1]) (a.[2]::b.[2]::c.[2])\n    max_triples (Array.zeroCreate n) (Array.zeroCreate n) (Array.zeroCreate n)", "    let rec max_triples (a: int[]) = \n        match a.Length with\n        | 0 -> 0\n        | _ ->\n            let max_triples = max (max_triples a) (a.Length - 1)\n            max_triples a.[0] + max_triples a.[1] + max_triples a.[2]\n    max_triples n", "    let rec max_triples (a: int[]) = \n        match a.Length with\n        | 0 -> 0\n        | _ -> \n            let max_triples = a |> Array.map (fun x -> max (max_triples (x.GetLowerBound 0)) (max (max_triples (x.GetLowerBound 1)) (max (max_triples (x.GetLowerBound 2)) (max (max_triples (x.GetLowerBound 3)) (max (max_triples (x.GetLowerBound 4)) (max (max_triples (x.GetLowerBound 5)) (max (max_triples (x.GetLowerBound 6)) (max (max_triples (x.GetLowerBound 7)) (max (max_triples (x.GetLowerBound 8)) (max (max_triples (x.GetLowerBound 9)) (max (max_triples (x.GetLowerBound 10)) (max (max_triples (x.GetLowerBound 11)) (max (max_triples (x.GetLowerBound 12)) (max (max_triples (x.GetLowerBound 13)) (max (max_triples (x.GetLowerBound 14)) (max (max_triples (x.GetLowerBound 15)) (max (max_triples (x.GetLowerBound 16)) (max (max_triples (x.GetLowerBound 17)) (max (max_triples (x.GetLowerBound 18)) (max (max_triples (x.GetLowerBound 19)) (max (max_triples (x.GetLowerBound 20)) (max (max_triples (x.GetLowerBound 21)) (max (max_triples (x.GetLowerBound 22)) (max (max_triples (x.GetLowerBound 23)) (max (max_triples (x.GetLowerBound 24)) (max (max_triples (x.GetLowerBound 25)) (max (max_triples (x.GetLowerBound 26)) (max (max_triples (x.GetLowerBound 27)) (max (max_triples (x.GetLowerBound 28)) (max (max_triples (x.GetLowerBound 29)) (max (max_triples (x.Get", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) (e: int[]) (f: int[]) (g: int[]) (h: int[]) (i: int) (j: int) = \n        if i = j then \n            if a[i] = b[j] then \n                if a[i] = c[j] then \n                    if a[i] = d[j] then \n                        if a[i] = e[j] then \n                            if a[i] = f[j] then \n                                if a[i] = g[j] then \n                                    if a[i] = h[j] then \n                                        i\n                                    else \n                                        max_triples a b c d e f g h i\n                                else \n                                    max_triples a b c d e f g h i\n                            else \n                                max_triples a b c d e f g h i\n                        else \n                            max_triples a b c d e f g h i\n                    else \n                        max_triples a b c d e f g h i\n                else \n                    max_triples a b c d e f g h i\n            else \n                max_triples a b c d e f g h i\n        else \n            max_triples a b c d e f g h i\n    max_triples n [] [] [] [] [] [] []", "    let rec max_triples (n: int) (a: int[]) = \n        if n = 0 then a.[0]\n        elif n = 1 then a.[0]\n        elif n = 2 then a.[1]\n        elif n = 3 then a.[2]\n        elif n = 4 then a.[3]\n        elif n = 5 then a.[4]\n        elif n = 6 then a.[5]\n        elif n = 7 then a.[6]\n        elif n = 8 then a.[7]\n        elif n = 9 then a.[8]\n        elif n = 10 then a.[9]\n        elif n = 11 then a.[10]\n        elif n = 12 then a.[11]\n        elif n = 13 then a.[12]\n        else failwith \"Invalid number of triples.\"\n    max_triples n a", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) = \n        if a.Length = 0 || b.Length = 0 || c.Length = 0 || d.Length = 0 then 0\n        elif a.Length = 1 && b.Length = 1 && c.Length = 1 && d.Length = 1 then \n            let max_triple = max (a.[0] * b.[0] * c.[0]) (a.[1] * b.[0] * c.[0]) (a.[2] * b.[0] * c.[0])\n            max_triples a b c d\n        elif a.Length = 2 && b.Length = 2 && c.Length = 2 && d.Length = 2 then \n            let max_triple = max (a.[0] * b.[1] * c.[0]) (a.[1] * b.[1] * c.[0]) (a.[2] * b.[1] * c.[0])\n            max_triples a b c d\n        elif a.Length = 3 && b.Length = 3 && c.Length = 3 && d.Length = 3 then \n            let max_triple = max (a.[0] * b.[1] * c.[0]) (a.[1] * b.[1] * c.[0]) (a.[2] * b.[1] * c.[0])\n            max_triples a b c d\n        elif a.Length = 4 && b.Length = 4 && c.Length = 4 && d.Length = 4 then \n            let max_triple = max (a.[0] * b.[1] * c.[0]) (a.[1] * b.[1] * c.[0]) (a.[2] * b.[1] * c.[0]) (a.[3] * b.[1] * c.[0])\n            max_triples a b c d\n        else \n            let max_triple = max (a.[0] * b.[1] * c.[0]) (a.[1] * b.[1] * c.[0]) (a.[2] * b.[1] * c.[0]) (a.[3] *", "    let rec max_triples (n: int) = \n        if n = 0 then 0\n        else\n            let a = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                a.[i] <- i * i - 1\n            let b = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                b.[i] <- a.[i] + a.[i + 1]\n            let c = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                c.[i] <- b.[i] + b.[i + 1]\n            let d = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                d.[i] <- c.[i] + c.[i + 1]\n            let e = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                e.[i] <- d.[i] + d.[i + 1]\n            let f = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                f.[i] <- e.[i] + e.[i + 1]\n            let g = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                g.[i] <- f.[i] + f.[i + 1]\n            let h = Array.zeroCreate n\n            for i = 0 to n - 1 do\n                h.[i] <- g.[i] + g.[i + 1]\n            let i = max_triples (n - 1)\n            max_triples (n - 1)\n    max_triples n", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) = \n        if a.Length <> b.Length then failwith \"Length of a and b must be equal\"\n        if a.Length <> c.Length then failwith \"Length of a and c must be equal\"\n        if a.[0] <> b.[0] then failwith \"a[0] <> b[0]\"\n        if a.[1] <> b.[1] then failwith \"a[1] <> b[1]\"\n        if a.[2] <> b.[2] then failwith \"a[2] <> b[2]\"\n        if a.[3] <> b.[3] then failwith \"a[3] <> b[3]\"\n        if a.[4] <> b.[4] then failwith \"a[4] <> b[4]\"\n        if a.[5] <> b.[5] then failwith \"a[5] <> b[5]\"\n        if a.[6] <> b.[6] then failwith \"a[6] <> b[6]\"\n        if a.[7] <> b.[7] then failwith \"a[7] <> b[7]\"\n        if a.[8] <> b.[8] then failwith \"a[8] <> b[8]\"\n        if a.[9] <> b.[9] then failwith \"a[9] <> b[9]\"\n        if a.[10] <> b.[10] then failwith \"a[10] <> b[10]\"\n        if a.[11] <> b.[11] then failwith \"a[11] <> b[11]\"\n        if a.[12] <> b.[12] then failwith \"a[12] <> b[12]\"\n        if a.[13] <> b.[13] then failwith \"a[13] <> b[13]\"\n        if a.[14] <> b.[14] then failwith \"a[14] <> b[14]\"\n        if a.[15] <> b.[15] then failwith \"a[15] <> b[15]\"\n        if a.[", "    let rec max_triples (n: int) (a: int[]) = \n        if n = 0 then a.[0]\n        elif n = 1 then a.[0]\n        elif n = 2 then a.[1]\n        elif n = 3 then a.[2]\n        elif n = 4 then a.[3]\n        elif n = 5 then a.[4]\n        elif n = 6 then a.[5]\n        elif n = 7 then a.[6]\n        elif n = 8 then a.[7]\n        elif n = 9 then a.[8]\n        elif n = 10 then a.[9]\n        elif n = 11 then a.[10]\n        elif n = 12 then a.[11]\n        elif n = 13 then a.[12]\n        else failwith \"Invalid number of triples.\"\n    max_triples n a", "    let rec max_triples (n: int) (a: int[]) = \n        if n = 0 then a.Length\n        else\n            let mutable max_triples = 0\n            let mutable i = 0\n            let mutable j = 0\n            let mutable k = 0\n            while i < a.Length && j < n do\n                if a[i] = a[j] && a[k] = a[i] + a[j] + a[k] then\n                    max_triples <- max_triples + 1\n                    i <- i + 1\n                    j <- j + 1\n                    k <- k + 1\n                else\n                    i <- i + 1\n                    j <- j + 1\n                    k <- k + 1\n            max_triples\n    max_triples n []", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) = \n        if a.Length = 0 || b.Length = 0 || c.Length = 0 || d.Length = 0 then 0\n        elif a.Length = 1 && b.Length = 1 && c.Length = 1 && d.Length = 1 then \n            let max_triples_a = max_triples a b c d\n            let max_triples_b = max_triples b c d\n            let max_triples_c = max_triples c d\n            let max_triples_d = max_triples d b c\n            max_triples_a + max_triples_b + max_triples_c + max_triples_d\n        else\n            let max_triples_a = max_triples a b c d\n            let max_triples_b = max_triples b c d\n            let max_triples_c = max_triples c d\n            let max_triples_d = max_triples d b c\n            max_triples_a + max_triples_b + max_triples_c + max_triples_d\n    max_triples n [] [] []", "    let rec max_triples (n: int) (a: int[]) = \n        match n with\n        | 0 -> a.Length\n        | _ -> \n            let max_triples_a = a |> Array.map (fun x -> max (max_triples (n - 1) x) x)\n            let max_triples_b = a |> Array.map (fun x -> max (max_triples (n - 1) x) x)\n            max_triples_a.Length + max_triples_b.Length\n    max_triples n [||]", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) (e: int[]) = \n        match a, b, c, d, e with\n        | [], [], [], [], [] -> 0\n        | _, _, _, _, _ -> 1\n        | _, _, _, _, _ -> 2\n        | _, _, _, _, _ -> 3\n        | _, _, _, _, _ -> 4\n        | _, _, _, _, _ -> 5\n        | _, _, _, _, _ -> 6\n        | _, _, _, _, _ -> 7\n        | _, _, _, _, _ -> 8\n        | _, _, _, _, _ -> 9\n        | _, _, _, _, _ -> 10\n        | _, _, _, _, _ -> 11\n        | _, _, _, _, _ -> 12\n        | _, _, _, _, _ -> 13\n        | _, _, _, _, _ -> 14\n        | _, _, _, _, _ -> 15\n        | _, _, _, _, _ -> 16\n        | _, _, _, _, _ -> 17\n        | _, _, _, _, _ -> 18\n        | _, _, _, _, _ -> 19\n        | _, _, _, _, _ -> 20\n        | _, _, _, _, _ -> 21\n        | _, _, _, _, _ -> 22\n        | _, _, _, _, _ -> 23\n        | _, _, _, _, _ -> 24\n        | _, _, _, _, _ -> 25\n        | _, _, _, _, _ -> 26\n        | _, _, _, _, _ -> 27\n        | _, _, _, _, _ -> 28\n        | _, _, _, _, _ -> 29\n        | _, _, _, _, _ -> 30\n        | _, _, _, _, _ -> 31\n        | _, _, _, _, _", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) (e: int[]) (f: int[]) (g: int[]) (h: int[]) = \n        match a.Length, b.Length, c.Length, d.Length, e.Length, f.Length, g.Length, h.Length with\n        | 0, 0, 0, 0, 0, 0, 0, 0 -> 0\n        | _, _, _, _, _, _, _, _ -> max_triples a b c d e f g h\n    max_triples n [] [] [] [] [] []", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) = \n        if a.Length <> b.Length then failwith \"The arrays have to be of the same length.\"\n        if a.Length <> c.Length then failwith \"The arrays have to be of the same length.\"\n        if a.Length <> d.Length then failwith \"The arrays have to be of the same length.\"\n        if a.[0] <> b.[0] then failwith \"The arrays have to be of the same length.\"\n        if a.[0] <> c.[0] then failwith \"The arrays have to be of the same length.\"\n        if a.[0] <> d.[0] then failwith \"The arrays have to be of the same length.\"\n        let mutable max_triples = 0\n        for i in 0..a.Length-1 do\n            let mutable a_i = a.[i]\n            let mutable b_i = b.[i]\n            let mutable c_i = c.[i]\n            let mutable d_i = d.[i]\n            let mutable max_triples = 0\n            while a_i <> b_i && a_i <> c_i && a_i <> d_i do\n                let mutable a_j = a_i\n                let mutable b_j = b_i\n                let mutable c_j = c_i\n                let mutable d_j = d_i\n                let mutable max_triples = 0\n                while a_j <> b_j && a_j <> c_j && a_j <> d_j do\n                    let mutable a_k = a_j\n                    let mutable b_k = b_j\n                    let mutable c_k = c_i\n                    let mutable d_k = d_i\n                    let mutable max_triples = 0\n                    while a_k <> b_k && a_k <> c_k && a_k <> d_k do\n                        let mutable a_l = a_k\n                        let mutable b_l = b_k\n                        let mut", "    let rec max_triples (a: int[]) = \n        match a with\n        | [|1;2;3;4;5|] -> 1\n        | [|1;2;3;4;5|] -> 2\n        | [|1;2;3;4;5|] -> 3\n        | [|1;2;3;4;5|] -> 4\n        | [|1;2;3;4;5|] -> 5\n        | [|1;2;3;4;5|] -> 6\n        | [|1;2;3;4;5|] -> 7\n        | [|1;2;3;4;5|] -> 8\n        | [|1;2;3;4;5|] -> 9\n        | [|1;2;3;4;5|] -> 10\n        | [|1;2;3;4;5|] -> 11\n        | [|1;2;3;4;5|] -> 12\n        | [|1;2;3;4;5|] -> 13\n        | [|1;2;3;4;5|] -> 14\n        | [|1;2;3;4;5|] -> 15\n        | [|1;2;3;4;5|] -> 16\n        | [|1;2;3;4;5|] -> 17\n        | [|1;2;3;4;5|] -> 18\n        | [|1;2;3;4;5|] -> 19\n        | [|1;2;3;4;5|] -> 20\n        | [|1;2;3;4;5|] -> 21\n        | [|1;2;3;4;5|] -> 22\n        | [|1;2;3;4;5|] -> 23\n        | [|1;2;3;4;5|] -> 24\n        | [|1;2;3;4;5|] -> 25\n        | [|1;2;3;4;5|] -> 26\n        | [|1;2;3;4;5|] -> 27\n        | [|1;2;3;4;5|] -> 28\n        | [|1;2;3;4;5|] ->", "    let rec max_triples (n: int) = \n        if n = 0 then 0\n        else\n            let a = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                a.[i] <- i * i - i + 1\n            let b = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                b.[i] <- a.[i] + a.[i] + a.[i]\n            let c = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                c.[i] <- b.[i]\n            let d = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                d.[i] <- c.[i]\n            let e = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                e.[i] <- d.[i]\n            let f = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                f.[i] <- e.[i]\n            let g = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                g.[i] <- f.[i]\n            let h = Array.zeroCreate n\n            for i in 0 .. n - 1 do\n                h.[i] <- g.[i]\n            let i = max_triples n\n            h.[i]\n    max_triples n", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) = \n        match a.Length, b.Length, c.Length with\n        | 0, 0, 0 -> 0\n        | 0, _, _ -> 0\n        | _, 0, 0 -> 0\n        | _, _, _ -> \n            let max_triples = max_triples a b c\n            max_triples a b c\n    max_triples n [] []", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) (e: int[]) (f: int[]) =\n        if a.Length <> b.Length then failwith \"The arrays have different lengths.\"\n        if a.Length <> c.Length then failwith \"The arrays have different lengths.\"\n        if a.Length <> d.Length then failwith \"The arrays have different lengths.\"\n        if a.Length <> e.Length then failwith \"The arrays have different lengths.\"\n        if a.Length <> f.Length then failwith \"The arrays have different lengths.\"\n        let mutable max_triples = 0\n        let mutable i = 0\n        let mutable j = 0\n        let mutable k = 0\n        let mutable l = 0\n        let mutable m = 0\n        let mutable n = 0\n        let mutable p = 0\n        let mutable q = 0\n        let mutable r = 0\n        let mutable s = 0\n        let mutable t = 0\n        let mutable u = 0\n        let mutable v = 0\n        let mutable w = 0\n        let mutable x = 0\n        let mutable y = 0\n        let mutable z = 0\n        let mutable z' = 0\n        let mutable z'' = 0\n        let mutable z''' = 0\n        let mutable z'''' = 0\n        let mutable z''''' = 0\n        let mutable z'''''' = 0\n        let mutable z''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n        let mutable z''''''''' = 0\n", "    let rec max_triples (a: int[]) (b: int[]) (c: int[]) (d: int[]) = \n        if a.Length = 0 || b.Length = 0 || c.Length = 0 || d.Length = 0 then\n            0\n        else\n            let max_triples = max_triples a b c d\n            let max_triples = max_triples a b c d\n            let max_triples = max_triples a b c d\n            max_triples\n    max_triples n [] []"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}