{"name": "HumanEval_22_filter_integers", "language": "fs", "prompt": "//Filter given list of any python values only for integers\n// >>> filter_integers(['a', 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2, 3]\nlet filter_integers (values: SomeType list): int list  = \n", "tests": "let test() = \n  let candidate = filter_integers\n  assert (candidate [] = [])\n  assert (candidate [4; Map []; []; 23.2; 9; \"adasd\"] = [4; 9])\n  assert (candidate [3; \"c\"; 3; 3; \"a\"; \"b\"] = [3; 3; 3])\n  0\n\ntest()", "completions": ["    let rec filter_integers_rec (values: SomeType list) = \n        match values with\n        | [] -> []\n        | x::xs -> \n            match x with\n            | SomeType.Int i -> filter_integers_rec xs\n            | SomeType.String s -> filter_integers_rec (s::xs)\n            | SomeType.Float f -> filter_integers_rec (f::xs)\n            | SomeType.Bool b -> filter_integers_rec (b::xs)\n            | SomeType.List l -> filter_integers_rec (l::xs)\n            | SomeType.Tuple ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple2 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple3 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple4 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple5 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple6 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple7 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple8 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple9 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple10 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple11 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple12 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple13 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple14 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple15 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple16 ts -> filter_integers_rec (ts::xs)\n            | SomeType.Tuple17 ts -> filter_integers_rec (ts::xs", "    let rec filter_integers_acc (acc: int list) (values: SomeType list) = \n        match values with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | SomeType.Int i -> filter_integers_acc (i::acc) xs\n            | SomeType.String s -> filter_integers_acc (s::acc) xs\n            | SomeType.Float f -> filter_integers_acc (f::acc) xs\n            | SomeType.Bool b -> filter_integers_acc (b::acc) xs\n            | SomeType.List l -> filter_integers_acc (l::acc) xs\n            | SomeType.Tuple ts -> filter_integers_acc (ts::acc) xs\n            | SomeType.Option o -> filter_integers_acc (o::acc) xs\n            | SomeType.Option_Some x -> filter_integers_acc (x::acc) xs\n            | SomeType.Option_None -> acc\n    filter_integers_acc [] values", "    let rec filter_integers_rec (values: int list) = \n        match values with \n        | [] -> values\n        | x::xs -> \n            match x with \n            | SomeType.Int i -> filter_integers_rec (xs@[i])\n            | SomeType.Float f -> filter_integers_rec (xs@[f])\n            | SomeType.String s -> filter_integers_rec (xs@[s])\n            | SomeType.Bool b -> if b then filter_integers_rec (xs@[1]) else filter_integers_rec (xs@[0])\n            | SomeType.List l -> filter_integers_rec (xs@l)\n            | SomeType.Tuple ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple2 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple3 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple4 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple5 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple6 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple7 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple8 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple9 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple10 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple11 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple12 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple13 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple14 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple15 ts -> filter_integers_rec (xs@ts)\n            | SomeType.Tuple16 ts -> filter_integers_rec (xs", "    values\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a' then 1 else 0)\n    |> List.filter (fun x -> x <> 0)\n    |> List.map (fun x -> if x = 'a", "    let rec filter_integers' acc (values: SomeType list) = \n        match values with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | SomeType.Int i -> filter_integers' (i::acc) xs\n            | SomeType.String s -> filter_integers' (s::acc) xs\n            | SomeType.Float f -> filter_integers' (f::acc) xs\n            | SomeType.Bool b -> filter_integers' (b::acc) xs\n            | SomeType.List l -> filter_integers' (l::acc) xs\n            | SomeType.Tuple ts -> filter_integers' (ts |> List.map (fun t -> t.Value)) acc\n            | SomeType.None -> acc\n    filter_integers' [] values", "    let rec filter_integers (values: SomeType list) = \n        match values with\n        | [] -> []\n        | x::xs -> \n            match x with\n            | SomeType.Int i -> filter_integers (xs@[i])\n            | SomeType.String s -> filter_integers (xs@[s])\n            | SomeType.Float f -> filter_integers (xs@[f])\n            | SomeType.Bool b -> filter_integers (xs@[b])\n            | SomeType.List l -> filter_integers (xs@[l])\n            | SomeType.Tuple ts -> filter_integers (xs@[ts])\n            | SomeType.Tuple ts2 -> filter_integers (xs@[ts2])\n            | SomeType.Tuple ts3 -> filter_integers (xs@[ts3])\n            | SomeType.Tuple ts4 -> filter_integers (xs@[ts4])\n            | SomeType.Tuple ts5 -> filter_integers (xs@[ts5])\n            | SomeType.Tuple ts6 -> filter_integers (xs@[ts6])\n            | SomeType.Tuple ts7 -> filter_integers (xs@[ts7])\n            | SomeType.Tuple ts8 -> filter_integers (xs@[ts8])\n            | SomeType.Tuple ts9 -> filter_integers (xs@[ts9])\n            | SomeType.Tuple ts10 -> filter_integers (xs@[ts10])\n            | SomeType.Tuple ts11 -> filter_integers (xs@[ts11])\n            | SomeType.Tuple ts12 -> filter_integers (xs@[ts12])\n            | SomeType.Tuple ts13 -> filter_integers (xs@[ts13])\n            | SomeType.Tuple ts14 -> filter_integers (xs@[ts14])\n            | SomeType.Tuple ts15 -> filter_integers (xs@[ts15])\n            | SomeType.Tuple ts16 -> filter_integers (xs@[ts16])\n            | SomeType.Tuple ts17 -> filter_integers (xs@[ts17])\n            | Some", "    let rec filter_integers (values: int list) = \n        match values with\n        | [] -> []\n        | x::xs -> \n            if x < 0 then filter_integers xs\n            else filter_integers (xs @ [x])\n    filter_integers values", "    let rec filter_integers_acc (acc: int list) (values: SomeType list) = \n        match values with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | SomeType.Int i -> filter_integers_acc (i::acc) xs\n            | SomeType.String s -> filter_integers_acc (s::acc) xs\n            | SomeType.Float f -> filter_integers_acc (f::acc) xs\n            | SomeType.Bool b -> filter_integers_acc (b::acc) xs\n            | SomeType.List l -> filter_integers_acc (l::acc) xs\n            | SomeType.Tuple ts -> filter_integers_acc (ts::acc) xs\n    filter_integers_acc [] values", "    let rec filter_integers_rec (values: SomeType list) = \n        match values with\n        | [] -> []\n        | x :: xs -> \n            match x with\n            | SomeType.Int i -> filter_integers_rec (xs @ [i])\n            | SomeType.Float f -> filter_integers_rec (xs @ [f])\n            | SomeType.String s -> filter_integers_rec (xs @ [s])\n            | SomeType.Bool b -> filter_integers_rec (xs @ [b])\n            | SomeType.List l -> filter_integers_rec (xs @ l)\n            | SomeType.Dict d -> filter_integers_rec (xs @ d.Keys)\n            | SomeType.None -> filter_integers_rec (xs @ [])\n    filter_integers_rec values", "    let rec filter_integers (values: int list) = \n        match values with \n        | [] -> []\n        | x :: xs -> \n            match x with \n            | Some x -> filter_integers xs\n            | None -> filter_integers xs\n    filter_integers values", "    let rec filter_integers (values: int list) = \n        match values with \n        | [] -> values\n        | x::xs -> \n            if x < 0 then filter_integers xs\n            else filter_integers (xs @ [x])\n    filter_integers values", "    let rec filter_integers (values: int list) = \n        match values with \n        | [] -> []\n        | x::xs -> \n            match x with \n            | SomeType.Int i -> filter_integers (xs @ [i])\n            | SomeType.String s -> filter_integers (xs @ [s])\n            | SomeType.Float f -> filter_integers (xs @ [f])\n            | SomeType.Bool b -> filter_integers (xs @ [b])\n            | SomeType.List l -> filter_integers (xs @ l)\n            | SomeType.Array a -> filter_integers (xs @ a)\n            | SomeType.None -> []\n    filter_integers values", "    let rec filter_integers (values: int list) = \n        match values with \n        | [] -> []\n        | x::xs -> \n            if x < 0 then filter_integers (xs@[x])\n            else filter_integers (xs@[x])\n    filter_integers values", "    let rec filter_integers (values: int list) = \n        match values with\n        | [] -> []\n        | x::xs -> \n            match x with\n            | Some x -> filter_integers xs\n            | None -> filter_integers xs\n    filter_integers values", "    let rec filter_integers_rec (values: SomeType list) = \n        match values with\n        | [] -> []\n        | x::xs -> \n            match x with\n            | SomeType.Int i -> filter_integers_rec xs\n            | SomeType.Float f -> filter_integers_rec xs\n            | SomeType.String s -> filter_integers_rec xs\n            | SomeType.Bool b -> filter_integers_rec xs\n            | SomeType.None -> filter_integers_rec xs\n    filter_integers_rec values", "    let rec filter_integers (values: int list) = \n        match values with\n        | [] -> []\n        | x::xs -> \n            let new_values = \n                match x with\n                | SomeType.Int i -> [i]\n                | SomeType.String s -> [s]\n                | SomeType.Float f -> [f]\n                | SomeType.Bool b -> [b]\n                | SomeType.List l -> filter_integers l\n                | SomeType.Array a -> filter_integers a\n                | SomeType.None -> []\n            filter_integers new_values\n    filter_integers values", "    let rec filter_integers (values: int list) = \n        match values with\n        | [] -> []\n        | x::xs -> \n            if x < 0 then filter_integers xs\n            else filter_integers (xs@[x])\n    filter_integers values", "    let rec filter_integers_acc (acc: int list) (values: SomeType list) = \n        match values with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | SomeType.Int i -> filter_integers_acc (i::acc) xs\n            | SomeType.String s -> filter_integers_acc (s::acc) xs\n            | SomeType.Float f -> filter_integers_acc (f::acc) xs\n            | SomeType.Bool b -> if b then filter_integers_acc acc xs else acc\n    filter_integers_acc [] values", "    let rec filter_integers (values: SomeType list) = \n        match values with \n        | [] -> []\n        | x::xs -> \n            match x with \n            | SomeType.Integer i -> filter_integers (xs @ [i])\n            | SomeType.String s -> filter_integers (xs @ [s])\n            | SomeType.List l -> filter_integers (xs @ l)\n            | SomeType.None -> filter_integers (xs)\n    filter_integers values", "    let rec filter_integers' (values: int list) = \n        match values with\n        | [] -> []\n        | x :: xs -> \n            match x with\n            | SomeType.Int i -> filter_integers' (xs @ [i])\n            | SomeType.String s -> filter_integers' (xs @ [s])\n            | SomeType.Float f -> filter_integers' (xs @ [f])\n            | SomeType.Bool b -> filter_integers' (xs @ [b])\n            | SomeType.List l -> filter_integers' (xs @ [l])\n            | SomeType.Tuple ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple2 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple3 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple4 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple5 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple6 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple7 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple8 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple9 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple10 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple11 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple12 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple13 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple14 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple15 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple16 ts -> filter_integers' (xs @ [ts])\n            | SomeType.Tuple17 ts -> filter_integers' (xs @"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}