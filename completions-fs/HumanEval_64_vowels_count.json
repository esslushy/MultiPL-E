{"name": "HumanEval_64_vowels_count", "language": "fs", "prompt": "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nlet vowels_count (s: string): int  = \n", "tests": "let test() = \n  let candidate = vowels_count\n  assert (candidate \"abcde\" = 2)\n  assert (candidate \"Alone\" = 3)\n  assert (candidate \"key\" = 2)\n  assert (candidate \"bye\" = 1)\n  assert (candidate \"keY\" = 2)\n  assert (candidate \"bYe\" = 1)\n  assert (candidate \"ACEDY\" = 3)\n  0\n\ntest()", "completions": ["    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'a' || s.[i] = 'e' || s.[i] = 'i' || s.[i] = 'o' || s.[i] = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' || c = 'y' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'y' then count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'y' then count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'a' || s.[i] = 'e' || s.[i] = 'i' || s.[i] = 'o' || s.[i] = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'y' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'y' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in s do\n        if c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' then\n            count <- count + 1\n    count", "    let mutable i = 0\n    while i < s.Length && Char.IsVowel(s.[i]) do\n        i <- i + 1\n    i", "    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && count < s.Length do\n        if s.[i] = 'a' || s.[i] = 'e' || s.[i] = 'i' || s.[i] = 'o' || s.[i] = 'u' then\n            count <- count + 1\n        i <- i + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'a' || s.[i] = 'e' || s.[i] = 'i' || s.[i] = 'o' || s.[i] = 'u' then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'a' || s.[i] = 'e' || s.[i] = 'i' || s.[i] = 'o' || s.[i] = 'u' then\n            count <- count + 1\n    count"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}