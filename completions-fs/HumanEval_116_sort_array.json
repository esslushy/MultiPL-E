{"name": "HumanEval_116_sort_array", "language": "fs", "prompt": "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nlet sort_array (arr: int list): int list  = \n", "tests": "let test() = \n  let candidate = sort_array\n  assert (candidate [1; 5; 2; 3; 4] = [1; 2; 4; 3; 5])\n  assert (candidate [-2; -3; -4; -5; -6] = [-4; -2; -6; -5; -3])\n  assert (candidate [1; 0; 2; 3; 4] = [0; 1; 2; 4; 3])\n  assert (candidate [] = [])\n  assert (candidate [2; 5; 77; 4; 5; 3; 5; 7; 2; 3; 4] = [2; 2; 4; 4; 3; 3; 5; 5; 5; 7; 77])\n  assert (candidate [3; 6; 44; 12; 32; 5] = [32; 3; 5; 6; 12; 44])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  assert (candidate [2; 4; 8; 16; 32] = [2; 4; 8; 16; 32])\n  0\n\ntest()", "completions": ["    let rec sort_array' (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let xs' = x::xs\n            let xs'' = sort_array' xs'\n            if xs'' = xs then xs'\n            else sort_array' xs''\n    sort_array' arr", "    let rec sort_array' (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let xs = x::xs\n            let xs = sort_array' xs\n            let xs = sort_array' xs\n            xs\n    sort_array' arr", "    let rec sort_array_rec (arr: int list) = \n        match arr with\n        | [] -> []\n        | x::xs -> \n            let xs = x::xs\n            let xs = sort_array_rec xs\n            xs\n    sort_array_rec arr", "    let rec sort_array' (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let xs = x::xs\n            let xs = sort_array' xs\n            let xs = sort_array' xs\n            xs\n    sort_array' arr", "    let rec sort_array_rec (arr: int list) (acc: int list) = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let xs = x::xs\n            let xs = sort_array_rec xs (acc@[x])\n            sort_array_rec xs acc\n    sort_array_rec arr []", "    let rec sort_array_rec (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            let z = y + 1\n            if x < y then \n                sort_array_rec (x::xs)\n            else \n                sort_array_rec (y::xs)\n    sort_array_rec arr", "    let rec sort_array' (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let xs = x::xs\n            let xs = sort_array' xs\n            let xs = sort_array' xs\n            xs\n    sort_array' arr", "    let rec sort_array' (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let xs' = x::xs\n            let xs'' = sort_array' xs'\n            if xs'' = xs then xs' else sort_array' xs''\n    sort_array' arr", "    let rec sort_array_rec (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            if y > 0 then sort_array_rec (x::xs)\n            else y::xs\n    sort_array_rec arr", "    let rec sort_array' (arr: int list) =\n        match arr with\n        | [] -> []\n        | x::xs ->\n            let xs = x::xs\n            let xs = sort_array' xs\n            xs\n    sort_array' arr", "    let rec sort_array' (arr: int list) (acc: int list) = \n        match arr with\n        | [] -> acc\n        | x::xs -> \n            let x = x - 1\n            let y = xs |> List.length\n            if y <> 0 then \n                sort_array' xs (x::acc)\n            else\n                sort_array' xs acc\n    sort_array' arr []", "    let rec sort_list (arr: int list) =\n        match arr with\n        | [] -> []\n        | x::xs ->\n            let y = x + 1\n            let z = y + 1\n            if x < y then\n                sort_list (xs@[x])\n            else\n                sort_list (xs@[y])\n    sort_list arr", "    let rec sort_array' (arr: int list) = \n        match arr with\n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            let z = y + 1\n            if x < y then \n                sort_array' (x::xs)\n            else \n                sort_array' (y::xs)\n    sort_array' arr", "    let rec sort_array_rec (arr: int list) = \n        match arr with\n        | [] -> []\n        | x::xs ->\n            let y = x + 1\n            let z = y + 1\n            if x < y then\n                sort_array_rec (xs@[x])\n            else\n                sort_array_rec (xs@[y])\n    sort_array_rec arr", "    let rec sort_array_rec (arr: int list) = \n        match arr with\n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            let z = y + 1\n            if y < x then sort_array_rec xs\n            else sort_array_rec xs\n    sort_array_rec arr", "    let rec sort_array' (arr: int list) (acc: int list) =\n        match arr with\n        | [] -> acc\n        | x::xs ->\n            let y = x - acc.[0]\n            if y < 0 then\n                sort_array' xs (acc.[0]::acc)\n            else\n                sort_array' xs (acc.[1]::acc)\n    sort_array' arr []", "    let rec sort_array_rec (arr: int list) = \n        match arr with\n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            let z = y + 1\n            if x < y then \n                sort_array_rec (xs@[x])\n            else \n                sort_array_rec (xs@[y])\n    sort_array_rec (arr)", "    let rec sort_array_rec (arr: int list) = \n        match arr with\n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            if y > 0 then \n                sort_array_rec (xs@[y])\n            else \n                sort_array_rec xs\n    sort_array_rec arr", "    let rec sort_array' (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let xs = x::xs\n            let xs = sort_array' xs\n            let xs = sort_array' xs\n            xs\n    sort_array' arr", "    let rec sort_array_rec (arr: int list) = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            let y = x + 1\n            if y <> x then sort_array_rec xs\n            else y::xs\n    sort_array_rec arr"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}