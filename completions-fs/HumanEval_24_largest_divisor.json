{"name": "HumanEval_24_largest_divisor", "language": "fs", "prompt": "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nlet largest_divisor (n: int): int  = \n", "tests": "let test() = \n  let candidate = largest_divisor\n  assert (candidate 3 = 1)\n  assert (candidate 7 = 1)\n  assert (candidate 10 = 5)\n  assert (candidate 100 = 50)\n  assert (candidate 49 = 7)\n  0\n\ntest()", "completions": ["    let rec largest_divisor_n (n: int) (acc: int): int = \n        if n = 0 then acc\n        else if n % 2 = 0 then largest_divisor_n (n / 2) (acc + 1)\n        else largest_divisor_n (n / 2) (acc + 1)\n    largest_divisor_n n 0", "    let rec largest_divisor_n (n: int) (acc: int): int = \n        if n = 0 then acc\n        else largest_divisor_n (n - 1) (acc * n)\n    largest_divisor_n n 0", "    let rec largest_divisor_rec (n: int) = \n        if n = 0 then 0\n        else \n            let largest_divisor_n = \n                if n = 1 then 1\n                else \n                    let largest_divisor_n = largest_divisor_rec (n-1)\n                    if n = largest_divisor_n then n\n                    else largest_divisor_n\n            largest_divisor_n\n    largest_divisor_rec n", "    let rec largest_divisor_rec (n: int) = \n        if n = 0 then 0\n        elif n % 2 = 0 then largest_divisor_rec (n / 2)\n        else n / 2\n    largest_divisor_rec n", "    let rec largest_divisor_rec (n: int) (acc: int) = \n        if n = 0 then acc\n        else largest_divisor_rec (n - 1) (acc * n)\n    largest_divisor_rec n 0", "    let rec largest_divisor_n (n: int) (acc: int) = \n        if n = 0 then acc\n        else largest_divisor_n (n - 1) (acc * (n - 1))\n    largest_divisor_n n 0", "    let rec largest_divisor_n (n: int) (acc: int): int = \n        if n = 0 then acc\n        else if n % 2 = 0 then largest_divisor_n (n / 2) (acc + 1)\n        else largest_divisor_n (n / 2) (acc + 1)\n    largest_divisor_n n 0", "    let rec largest_divisor_n (n: int) = \n        if n = 0 then \n            0\n        else\n            let largest_divisor_n_n = largest_divisor_n (n - 1)\n            if n % largest_divisor_n_n = 0 then \n                n\n            else\n                largest_divisor_n_n\n    largest_divisor_n n", "    let rec largest_divisor_rec (n: int) = \n        if n = 0 then 0\n        else\n            let largest_divisor_n = (n - 1) / 2\n            if largest_divisor_n = 0 then n\n            else largest_divisor_rec (n - 1)\n    largest_divisor_rec n", "    let rec largest_divisor_n (n: int) (acc: int) = \n        if n = 0 then acc\n        else largest_divisor_n (n - 1) (acc * n)\n    largest_divisor_n n 0", "    let rec loop n =\n        if n = 0 then\n            0\n        else\n            let l = n / 2\n            if n % 2 = 0 then\n                loop (n / 2)\n            else\n                loop (n / 2)\n    loop n", "    let rec largest_divisor_rec (n: int) (acc: int) = \n        if n = 0 then acc\n        else largest_divisor_rec (n - 1) (acc * n)\n    largest_divisor_rec n 0", "    let rec largest_divisor_n (n: int) =\n        if n = 0 then\n            0\n        else\n            let largest_divisor_n_n = largest_divisor_n (n - 1)\n            if n % largest_divisor_n_n = 0 then\n                largest_divisor_n_n\n            else\n                largest_divisor_n_n\n    largest_divisor_n n", "    let rec largest_divisor_rec (n: int) =\n        if n = 0 then\n            0\n        else\n            let largest_divisor = (n - 1) * (n - 2) / 2\n            if largest_divisor = n then\n                largest_divisor_rec (n - 1)\n            else\n                largest_divisor_rec (n - 1)\n    largest_divisor_rec n", "    let rec largest_divisor_n (n: int) = \n        if n = 0 then 0\n        elif n % 2 = 0 then largest_divisor_n (n / 2)\n        else n / 2\n    largest_divisor_n n", "    let rec largest_divisor_rec (n: int) = \n        if n = 0 then\n            0\n        else\n            let largest_divisor_n = n / 2\n            if largest_divisor_n = 0 then\n                n\n            else\n                largest_divisor_rec (n - largest_divisor_n)\n    largest_divisor_rec n", "    let rec largest_divisor_n (n: int) = \n        if n = 0 then 0\n        else\n            let largest_divisor_n_n = largest_divisor_n (n-1)\n            if n % largest_divisor_n_n = 0 then n\n            else largest_divisor_n_n\n    largest_divisor_n n", "    let rec largest_divisor_rec (n: int) =\n        if n = 0 then\n            1\n        else\n            let max_n = (n - 1) / 2\n            if max_n = 0 then\n                max_n\n            else\n                let max_n' = largest_divisor_rec (max_n - 1)\n                if max_n' = max_n then\n                    max_n\n                else\n                    max_n'\n    largest_divisor_rec n", "    let rec largest_divisor_rec (n: int) = \n        if n = 0 then 0\n        elif n % 2 = 0 then largest_divisor_rec (n / 2)\n        else n / 2\n    largest_divisor_rec n", "    let rec loop n = \n        if n = 0 then 0\n        elif n % 2 = 0 then loop (n / 2)\n        else loop (n / 2) + 1\n    loop n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}