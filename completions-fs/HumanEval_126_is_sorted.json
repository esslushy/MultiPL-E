{"name": "HumanEval_126_is_sorted", "language": "fs", "prompt": "//Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5]) \u00e2\u017e\u017e True\n// is_sorted([1, 2, 3, 4, 5]) \u00e2\u017e\u017e True\n// is_sorted([1, 3, 2, 4, 5]) \u00e2\u017e\u017e False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u00e2\u017e\u017e True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u00e2\u017e\u017e True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u00e2\u017e\u017e False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u00e2\u017e\u017e True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u00e2\u017e\u017e False\nlet is_sorted (lst: int list): bool  = \n", "tests": "let test() = \n  let candidate = is_sorted\n  assert (candidate [5] = true)\n  assert (candidate [1; 2; 3; 4; 5] = true)\n  assert (candidate [1; 3; 2; 4; 5] = false)\n  assert (candidate [1; 2; 3; 4; 5; 6] = true)\n  assert (candidate [1; 2; 3; 4; 5; 6; 7] = true)\n  assert (candidate [1; 3; 2; 4; 5; 6; 7] = false)\n  assert (candidate [] = true)\n  assert (candidate [1] = true)\n  assert (candidate [3; 2; 1] = false)\n  assert (candidate [1; 2; 2; 2; 3; 4] = false)\n  assert (candidate [1; 2; 3; 3; 3; 4] = false)\n  assert (candidate [1; 2; 2; 3; 3; 4] = true)\n  assert (candidate [1; 2; 3; 4] = true)\n  0\n\ntest()", "completions": ["    let rec loop acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x = xs.[0] then acc\n            else loop (acc || is_sorted xs)\n    loop false", "    let rec is_sorted_rec (lst: int list) = \n        match lst with \n        | [] -> false\n        | x::xs -> \n            if x = xs.[0] then is_sorted_rec xs\n            else is_sorted_rec xs\n    is_sorted_rec lst", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> false\n        | x::xs -> if x <> 0 then is_sorted_rec xs else is_sorted_rec xs\n    is_sorted_rec lst", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> false\n        | x::xs -> \n            if x = xs.[0] then \n                is_sorted_rec xs\n            else\n                is_sorted_rec xs\n    is_sorted_rec lst", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x = lst.[0] then loop (acc@[x]) xs\n            else loop (acc@[x]) xs\n    loop [] lst", "    let rec loop acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            if x = xs.[0] then loop (acc + 1)\n            else loop (acc + 1)\n    loop 0", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> true\n        | x::xs -> \n            if x <> xs.[0] then is_sorted_rec xs\n            else is_sorted_rec xs\n    is_sorted_rec lst", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> true\n        | head :: tail -> \n            if head = head then true\n            else is_sorted_rec tail\n    is_sorted_rec lst", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> true\n        | x::xs -> \n            if x = xs.[0] then is_sorted_rec xs\n            else is_sorted_rec xs\n    is_sorted_rec lst", "    let rec loop acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x = xs.[0] then loop (acc+1)\n            else loop (acc+1)\n    loop 0", "    let rec loop acc = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x = xs.[0] then loop (acc+1)\n            else loop (acc+1)\n    loop 0", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> true\n        | x::xs -> if x <> xs.[0] then is_sorted_rec xs else is_sorted_rec xs\n    is_sorted_rec lst", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> true\n        | x::xs -> \n            if x = xs.[0] then true\n            else is_sorted_rec xs\n    is_sorted_rec lst", "    let rec loop i = \n        if i = lst.Length then true\n        elif lst.[i] = lst.[i-1] then loop (i-1)\n        else loop i\n    loop 0", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> false\n        | x::xs -> \n            if x = xs.[0] then is_sorted_rec xs\n            else is_sorted_rec xs\n    is_sorted_rec lst", "    let rec is_sorted_rec (lst: int list) = \n        match lst with \n        | [] -> false\n        | x::xs -> \n            if x > 0 then \n                is_sorted_rec xs\n            else\n                is_sorted_rec xs\n    is_sorted_rec lst", "    let rec is_sorted_rec (lst: int list) = \n        match lst with\n        | [] -> true\n        | x::xs -> \n            if x = xs.[0] then \n                is_sorted_rec xs\n            else \n                is_sorted_rec xs\n    is_sorted_rec lst", "    let rec loop acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            if x = xs.[0] then acc\n            else loop (acc || loop (x::acc)) xs\n    loop [] lst", "    let rec loop i = \n        if i = lst.Length then true\n        elif lst.[i] = lst.[i-1] then loop (i-1)\n        else loop (i-1)\n    loop 0", "    let rec is_sorted_rec (lst: int list) = \n        match lst with \n        | [] -> false\n        | x::xs -> \n            if x = xs.[0] then \n                is_sorted_rec xs\n            else\n                is_sorted_rec xs\n    is_sorted_rec lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}