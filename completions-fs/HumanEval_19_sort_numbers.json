{"name": "HumanEval_19_sort_numbers", "language": "fs", "prompt": "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nlet sort_numbers (numbers: string): string  = \n", "tests": "let test() = \n  let candidate = sort_numbers\n  assert (candidate \"\" = \"\")\n  assert (candidate \"three\" = \"three\")\n  assert (candidate \"three five nine\" = \"three five nine\")\n  assert (candidate \"five zero four seven nine eight\" = \"zero four five seven eight nine\")\n  assert (candidate \"six five four three two one zero\" = \"zero one two three four five six\")\n  0\n\ntest()", "completions": ["    let numbers = numbers.Split(' ')\n    let numbers = numbers |> Array.map (fun x -> x.ToCharArray())\n    let numbers = numbers |> Array.map (fun x -> x.[0])\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    let numbers = numbers |> Array.map (fun x -> x.ToString())\n    ", "    let rec sort_numbers' (numbers: string) = \n        match numbers with\n        | 'zero' -> 'zero'\n        | 'one' -> 'one'\n        | 'two' -> 'two'\n        | 'three' -> 'three'\n        | 'four' -> 'four'\n        | 'five' -> 'five'\n        | 'six' -> 'six'\n        | 'seven' -> 'seven'\n        | 'eight' -> 'eight'\n        | 'nine' -> 'nine'\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) = \n        match numbers with \n        | 'zero' -> numbers\n        | 'one' -> numbers\n        | 'two' -> numbers\n        | 'three' -> numbers\n        | 'four' -> numbers\n        | 'five' -> numbers\n        | 'six' -> numbers\n        | 'seven' -> numbers\n        | 'eight' -> numbers\n        | 'nine' -> numbers\n        | _ -> numbers\n    sort_numbers' numbers", "    let numbers = numbers.Split(' ')\n    let rec sort_numbers' (numbers: string list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let head = head.Trim()\n            let tail = tail |> List.map (fun x -> x.Trim())\n            let head = head.ToUpper()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToLower())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToLower())\n            let head = head.ToUpper()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n            let head = head.ToLower()\n            let tail = tail |> List.map (fun x -> x.ToUpper())\n", "    let rec sort_numbers_rec (numbers: string) (numbers_list: string list) = \n        match numbers_list with\n        | head :: tail -> \n            let head_numbers = head.Split(' ')\n            let head_numbers_list = head_numbers |> List.map (fun x -> x.Split(' '))\n            let head_numbers_list_rev = head_numbers_list |> List.rev\n            let head_numbers_list_rev_rev = head_numbers_list |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev |> List.rev |> List.rev\n            let head_numbers_list_rev_rev_rev_rev = head_numbers_list |> List.rev |> List.rev |> List.rev |> List.rev |> List.rev", "    let rec sort_numbers' (numbers: string) = \n        match numbers with \n        | x when x.Length = 0 -> numbers\n        | x when x.Length = 1 -> x\n        | x when x.Length = 2 -> x\n        | x when x.Length = 3 -> x\n        | x when x.Length = 4 -> x\n        | x when x.Length = 5 -> x\n        | x when x.Length = 6 -> x\n        | x when x.Length = 7 -> x\n        | x when x.Length = 8 -> x\n        | x when x.Length = 9 -> x\n        | x when x.Length = 10 -> x\n        | x when x.Length = 11 -> x\n        | x when x.Length = 12 -> x\n        | x when x.Length = 13 -> x\n        | x when x.Length = 14 -> x\n        | x when x.Length = 15 -> x\n        | x when x.Length = 16 -> x\n        | x when x.Length = 17 -> x\n        | x when x.Length = 18 -> x\n        | x when x.Length = 19 -> x\n        | x when x.Length = 20 -> x\n        | x when x.Length = 21 -> x\n        | x when x.Length = 22 -> x\n        | x when x.Length = 23 -> x\n        | x when x.Length = 24 -> x\n        | x when x.Length = 25 -> x\n        | x when x.Length = 26 -> x\n        | x when x.Length = 27 -> x\n        | x when x.Length = 28 -> x\n        | x when x.Length = 29 -> x\n        | x when x.Length = 30 -> x\n        | x when x.Length = 31 -> x\n        | x when x.Length = 32 -> x\n        | x when x.Length = 33 -> x\n        | x when x.Length = 34 -> x\n        | x when x.Length = 35 -> x\n        | x when x.Length = 36 -> x\n        | x when x.Length = 37 -> x\n        | x when x.Length = 38 -> x\n        | x when x.Length = 39 -> x\n        | x when x.Length = 40", "    let rec sort_numbers' (numbers: string) (acc: string) = \n        match numbers with\n        | 'zero' -> acc\n        | 'one' -> acc + \"one\"\n        | 'two' -> acc + \"two\"\n        | 'three' -> acc + \"three\"\n        | 'four' -> acc + \"four\"\n        | 'five' -> acc + \"five\"\n        | 'six' -> acc + \"six\"\n        | 'seven' -> acc + \"seven\"\n        | 'eight' -> acc + \"eight\"\n        | 'nine' -> acc + \"nine\"\n        | _ -> sort_numbers' numbers (acc + \" \" + numbers)\n    sort_numbers' numbers \"\"", "    let rec sort_numbers' (numbers: string) = \n        match numbers with \n        | 'zero' -> 'zero'\n        | 'one' -> 'one'\n        | 'two' -> 'two'\n        | 'three' -> 'three'\n        | 'four' -> 'four'\n        | 'five' -> 'five'\n        | 'six' -> 'six'\n        | 'seven' -> 'seven'\n        | 'eight' -> 'eight'\n        | 'nine' -> 'nine'\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) = \n        match numbers with\n        | 'zero' -> 'zero'\n        | 'one' -> 'one'\n        | 'two' -> 'two'\n        | 'three' -> 'three'\n        | 'four' -> 'four'\n        | 'five' -> 'five'\n        | 'six' -> 'six'\n        | 'seven' -> 'seven'\n        | 'eight' -> 'eight'\n        | 'nine' -> 'nine'\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) (acc: string) = \n        match numbers with \n        | 'zero' -> acc\n        | 'one' -> acc + \"one\"\n        | 'two' -> acc + \"two\"\n        | 'three' -> acc + \"three\"\n        | 'four' -> acc + \"four\"\n        | 'five' -> acc + \"five\"\n        | 'six' -> acc + \"six\"\n        | 'seven' -> acc + \"seven\"\n        | 'eight' -> acc + \"eight\"\n        | 'nine' -> acc + \"nine\"\n        | _ -> failwith \"sort_numbers: invalid choice\"\n    sort_numbers' numbers \"\"", "    let rec sort_numbers' (numbers: string) = \n        match numbers with\n        | 'zero' -> 'zero'\n        | 'one' -> 'one'\n        | 'two' -> 'two'\n        | 'three' -> 'three'\n        | 'four' -> 'four'\n        | 'five' -> 'five'\n        | 'six' -> 'six'\n        | 'seven' -> 'seven'\n        | 'eight' -> 'eight'\n        | 'nine' -> 'nine'\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) =\n        match numbers with\n        | 'zero' -> numbers\n        | 'one' -> numbers\n        | 'two' -> numbers\n        | 'three' -> numbers\n        | 'four' -> numbers\n        | 'five' -> numbers\n        | 'six' -> numbers\n        | 'seven' -> numbers\n        | 'eight' -> numbers\n        | 'nine' -> numbers\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) (acc: string) = \n        if numbers.Length = 0 then acc\n        else\n            let n = numbers.[0]\n            if n = '0' then sort_numbers' numbers (acc + n)\n            else sort_numbers' numbers (acc + n + n)\n    sort_numbers' numbers \"\"", "    let rec sort_numbers' (numbers: string) = \n        match numbers with \n        | 'zero' -> 'zero'\n        | 'one' -> 'one'\n        | 'two' -> 'two'\n        | 'three' -> 'three'\n        | 'four' -> 'four'\n        | 'five' -> 'five'\n        | 'six' -> 'six'\n        | 'seven' -> 'seven'\n        | 'eight' -> 'eight'\n        | 'nine' -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) = \n        match numbers with \n        | 'zero' -> numbers\n        | 'one' -> numbers\n        | 'two' -> numbers\n        | 'three' -> numbers\n        | 'four' -> numbers\n        | 'five' -> numbers\n        | 'six' -> numbers\n        | 'seven' -> numbers\n        | 'eight' -> numbers\n        | 'nine' -> numbers\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) (current_number: int) (current_number_list: int list) = \n        match numbers with\n        | \"\" -> current_number_list\n        | _ -> \n            let new_number_list = current_number_list |> List.sortWith (fun x y -> \n                if current_number = y then 0 else 1)\n            sort_numbers' numbers current_number_list\n    sort_numbers' numbers 0 []", "    let rec sort_numbers' (numbers: string) (numbers_list: string list) = \n        match numbers_list with\n        | [] -> numbers\n        | head :: tail -> \n            let head_number = head.ToString()\n            let head_number_list = head_number.Split(' ')\n            let head_number_list_list = head_number_list.Split(' ')\n            let head_number_list_list_list = head_number_list_list.Split(' ')\n            let head_number_list_list_list_list = head_number_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list_list = head_number_list_list_list_list_list.Split(' ')\n            let head_number_list_list_list_list", "    let rec sort_numbers' (numbers: string) (current_number: string) = \n        match numbers with \n        | 'zero' -> current_number\n        | 'one' -> current_number + \"one\"\n        | 'two' -> current_number + \"two\"\n        | 'three' -> current_number + \"three\"\n        | 'four' -> current_number + \"four\"\n        | 'five' -> current_number + \"five\"\n        | 'six' -> current_number + \"six\"\n        | 'seven' -> current_number + \"seven\"\n        | 'eight' -> current_number + \"eight\"\n        | 'nine' -> current_number + \"nine\"\n        | _ -> numbers\n    \n    let numbers = sort_numbers' numbers \"\"\n    numbers", "    let rec sort_numbers' (numbers: string) = \n        match numbers with \n        | 'zero' -> 'zero'\n        | 'one' -> 'one'\n        | 'two' -> 'two'\n        | 'three' -> 'three'\n        | 'four' -> 'four'\n        | 'five' -> 'five'\n        | 'six' -> 'six'\n        | 'seven' -> 'seven'\n        | 'eight' -> 'eight'\n        | 'nine' -> 'nine'\n        | _ -> numbers\n    sort_numbers' numbers", "    let rec sort_numbers' (numbers: string) = \n        let first_number = numbers.Substring(0, 1)\n        let second_number = numbers.Substring(1)\n        if first_number = second_number then\n            numbers\n        else\n            let first_number = first_number.ToUpper()\n            let second_number = second_number.ToUpper()\n            if first_number = second_number then\n                numbers\n            else\n                let first_number = first_number.ToLower()\n                let second_number = second_number.ToLower()\n                if first_number = second_number then\n                    numbers\n                else\n                    let first_number = first_number.ToUpper()\n                    let second_number = second_number.ToUpper()\n                    if first_number = second_number then\n                        numbers\n                    else\n                        let first_number = first_number.ToLower()\n                        let second_number = second_number.ToLower()\n                        if first_number = second_number then\n                            numbers\n                        else\n                            let first_number = first_number.ToUpper()\n                            let second_number = second_number.ToUpper()\n                            if first_number = second_number then\n                                sort_numbers' numbers\n                            else\n                                let first_number = first_number.ToLower()\n                                let second_number = second_number.ToLower()\n                                if first_number = second_number then\n                                    sort_numbers' numbers\n                                else\n                                    let first_number = first_number.ToUpper()\n                                    let second_number = second_number.ToUpper()\n                                    if first_number = second_number then\n                                        sort_numbers' numbers\n                                    else\n                                        let first_number = first_number.ToLower()\n                                        let second_number = second_number.ToLower()\n                                        if first_number = second_number then\n                                            sort_numbers' numbers\n                                        else\n                                            let first_number = first_number.ToUpper()\n                                            let second_number = second_number.ToUpper()\n                                            if first_number = second_number then\n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}