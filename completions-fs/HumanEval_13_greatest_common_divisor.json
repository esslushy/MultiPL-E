{"name": "HumanEval_13_greatest_common_divisor", "language": "fs", "prompt": "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nlet greatest_common_divisor (a: int) (b: int): int  = \n", "tests": "let test() = \n  let candidate = greatest_common_divisor\n  assert (candidate 3 7 = 1)\n  assert (candidate 10 15 = 5)\n  assert (candidate 49 14 = 7)\n  assert (candidate 144 60 = 12)\n  0\n\ntest()", "completions": ["    let rec gcd a b = \n        if b = 0 then a\n        else gcd (a % b) (b / b)\n    gcd a b", "    let rec greatest_common_divisor_a (a: int) (b: int): int = \n        let rec greatest_common_divisor_b (a: int) (b: int): int = \n            let a_n = a / b\n            let b_n = b / a\n            if a_n = b_n then a_n\n            elif a_n = 0 then b_n\n            else greatest_common_divisor_a a_n b\n        greatest_common_divisor_b a b\n    greatest_common_divisor_a a b", "    let rec loop (a: int) (b: int) = \n        if a = b then a\n        else loop (a/b) (b/a)\n    loop a b", "    let rec loop (a: int) (b: int) = \n        if a = b then a\n        else loop (a/b) (b/a)\n    loop a b", "    let rec greatest_common_divisor_loop (a: int) (b: int) = \n        if a = b then a\n        else greatest_common_divisor_loop (a/b) (b/a)\n    greatest_common_divisor_loop a b", "    let rec gcd a b = \n        if b = 0 then a\n        else gcd (a % b) (b / a)\n    gcd a b", "    let rec gcd a b = \n        if b = 0 then a\n        else gcd (a % b) (b / a)\n    gcd a b", "    let rec loop (a: int) (b: int) = \n        if a = b then a\n        else loop (a/b) (b/a)\n    loop a b", "    let rec loop (a: int) (b: int) = \n        if a = b then a\n        else loop (a / b) (b / a)\n    loop a b", "    let rec greatest_common_divisor_rec (a: int) (b: int) : int = \n        if a = b then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b", "    let rec loop (a: int) (b: int) (acc: int) = \n        if a = b then acc\n        else loop (a/b) (b/a) (acc + (a%b))\n    loop a b (a%b)", "    let rec loop (a: int) (b: int) = \n        if a = b then a\n        else loop (a/b) (b/a)\n    loop a b", "    let rec greatest_common_divisor_loop (a: int) (b: int) = \n        if a = b then a\n        else greatest_common_divisor_loop (a/b) (b/a)\n    greatest_common_divisor_loop a b", "    let rec greatest_common_divisor_rec (a: int) (b: int) = \n        if a = b then a\n        else greatest_common_divisor_rec (a/b) (b/a)\n    greatest_common_divisor_rec a b", "    let rec greatest_common_divisor_loop (a: int) (b: int) = \n        if a = b then a\n        else greatest_common_divisor_loop (a/b) (b/a)\n    greatest_common_divisor_loop a b", "    let rec greatest_common_divisor_a (a: int) (b: int): int = \n        if a = b then a\n        else greatest_common_divisor_a (a/b) (b/a)\n    greatest_common_divisor_a a b", "    let rec gcd a b = \n        if a = b then a\n        else gcd a (b % a)\n    gcd a (b - a)", "    let rec gcd a b = \n        if a = b then a\n        else gcd a (b % a)\n    gcd a (a / b)", "    let rec loop a b = \n        if a = b then a\n        else loop (a / b) (b / a)\n    loop a b", "    let rec greatest_common_divisor_a (a: int) (b: int): int =\n        if a = b then a\n        else greatest_common_divisor_a (a/b) (b/a)\n    greatest_common_divisor_a a b"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}