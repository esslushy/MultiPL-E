{"name": "HumanEval_70_strange_sort_list", "language": "fs", "prompt": "//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) == []\nlet strange_sort_list (lst: int list): int list  = \n", "tests": "let test() = \n  let candidate = strange_sort_list\n  assert (candidate [1; 2; 3; 4] = [1; 4; 2; 3])\n  assert (candidate [5; 6; 7; 8; 9] = [5; 9; 6; 8; 7])\n  assert (candidate [1; 2; 3; 4; 5] = [1; 5; 2; 4; 3])\n  assert (candidate [5; 6; 7; 8; 9; 1] = [1; 9; 5; 8; 6; 7])\n  assert (candidate [5; 5; 5; 5] = [5; 5; 5; 5])\n  assert (candidate [] = [])\n  assert (candidate [1; 2; 3; 4; 5; 6; 7; 8] = [1; 8; 2; 7; 3; 6; 4; 5])\n  assert (candidate [0; 2; 2; 2; 5; 5; -5; -5] = [-5; 5; -5; 5; 0; 2; 2; 2])\n  assert (candidate [111111] = [111111])\n  0\n\ntest()", "completions": ["    let rec sort_list acc = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            let x_min = min x xs\n            let x_max = max x xs\n            let x_diff = x_max - x_min\n            if x_diff = 0 then sort_list (x::acc) xs\n            else sort_list (x::acc) xs\n    sort_list [] lst", "    let rec sort_list (lst: int list) =\n        match lst with\n        | [] -> []\n        | x::xs ->\n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val > max_val then\n                    [min_val; max_val]\n                else\n                    [min_val; max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) =\n        match lst with\n        | [] -> []\n        | x::xs ->\n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val > max_val then\n                    [min_val; max_val]\n                else\n                    [min_val; max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            if min_val > max_val then \n                sort_list xs\n            else\n                sort_list (min_val::xs)\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with \n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val > max_val then \n                    [min_val]\n                else \n                    [max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) =\n        match lst with\n        | [] -> []\n        | x::xs ->\n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val > max_val then \n                    [min_val]\n                else\n                    [max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with \n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val < max_val then \n                    [min_val; max_val]\n                else \n                    [min_val; max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val > max_val then \n                    [min_val]\n                else \n                    [max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let min_val_remaining = min_val - lst.Head\n            let max_val_remaining = max_val - lst.Head\n            let new_list = \n                if min_val_remaining < max_val_remaining then \n                    [min_val]\n                else \n                    [max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with \n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val > max_val then \n                    [min_val; max_val]\n                else \n                    [min_val; max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let new_lst = \n                if min_val > max_val then \n                    [min_val]\n                else\n                    [max_val]\n            sort_list new_lst\n    sort_list lst", "    let rec sort_list acc (lst: int list) = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x < lst.[0] then sort_list (x::acc) xs\n            else sort_list (x::acc) xs\n    sort_list [] lst", "    let rec sort_list acc (lst: int list) = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            if x < lst.[0] then sort_list (x::acc) xs\n            else sort_list (x::acc) xs\n    sort_list [] lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            if min_val > max_val then \n                sort_list xs\n            else \n                sort_list (min_val::xs)\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with \n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val < max_val then \n                    [min_val; max_val]\n                else \n                    [min_val; max_val]\n            sort_list new_list\n    sort_list lst", "    let rec loop i lst = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            if i = 0 then \n                loop (i-1) xs\n            else \n                loop (i-1) (x::xs)\n    loop 0 lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let xs = sort_list xs\n            let ys = sort_list xs\n            if x < y then \n                (x::xs, y::ys)\n            else \n                (xs, y::ys)\n    sort_list lst", "    let rec sort_list (lst: int list) =\n        match lst with\n        | [] -> []\n        | x::xs ->\n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = \n                if min_val > max_val then\n                    [min_val; max_val]\n                else\n                    [min_val; max_val]\n            sort_list new_list\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            if min_val < max_val then sort_list xs\n            else sort_list (min_val::xs)\n    sort_list lst", "    let rec sort_list (lst: int list) = \n        match lst with\n        | [] -> []\n        | x::xs -> \n            let min_val = min x lst\n            let max_val = max x lst\n            let new_list = [min_val; max_val]\n            sort_list new_list\n    sort_list lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}