{"name": "HumanEval_79_decimal_to_binary", "language": "fs", "prompt": "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\nlet decimal_to_binary (decimal: int): string  = \n", "tests": "let test() = \n  let candidate = decimal_to_binary\n  assert (candidate 0 = \"db0db\")\n  assert (candidate 32 = \"db100000db\")\n  assert (candidate 103 = \"db1100111db\")\n  assert (candidate 15 = \"db1111db\")\n  0\n\ntest()", "completions": ["    let mutable b = \"\"\n    for i = 0 to decimal - 1 do\n        b <- b + \"0\" + string decimal\n    b", "    let rec convert (decimal: int) : string = \n        match decimal with \n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | _ -> \n            let binary = System.Convert.ToString(decimal, 2)\n            if binary.Length > 2 then binary.Substring(0, 2) else binary\n    convert decimal", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal.Length do\n        if decimal.[i] = '1' then\n            binary <- binary + \"1\"\n            i <- i + 1\n        else\n            binary <- binary + \"0\"\n            i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string(decimal % 10) + string(decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal.Length do\n        if decimal.[i] = '1' then\n            binary <- binary + \"1\"\n            i <- i + 1\n        else\n            binary <- binary + \"0\"\n            i <- i + 1\n    binary", "    let mutable i = 0\n    let mutable b = \"\"\n    while i < decimal do\n        b <- b + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    b", "    let rec convert (decimal: int) = \n        match decimal with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | _ -> convert (decimal - 1) + \"0\"\n    convert decimal", "    let rec convert (decimal: int) =\n        match decimal with\n        | 0 -> \"0\"\n        | 1 -> \"1\"\n        | x -> string (x - int '0') + convert (x - int '1')\n    convert decimal", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + (string decimal) + \"0\"\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (int decimal.[i])\n        i <- i + 1\n    binary", "    let mutable binary = \"\"\n    let mutable i = 0\n    while i < decimal do\n        binary <- binary + string (decimal % 10) + string (decimal / 10)\n        i <- i + 1\n    binary"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}