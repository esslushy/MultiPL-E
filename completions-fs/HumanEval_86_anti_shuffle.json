{"name": "HumanEval_86_anti_shuffle", "language": "fs", "prompt": "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi') returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\nlet anti_shuffle (s: string): string  = \n", "tests": "let test() = \n  let candidate = anti_shuffle\n  assert (candidate \"Hi\" = \"Hi\")\n  assert (candidate \"hello\" = \"ehllo\")\n  assert (candidate \"number\" = \"bemnru\")\n  assert (candidate \"abcd\" = \"abcd\")\n  assert (candidate \"Hello World!!!\" = \"Hello !!!Wdlor\")\n  assert (candidate \"\" = \"\")\n  assert (candidate \"Hi. My name is Mister Robot. How are you?\" = \".Hi My aemn is Meirst .Rboot How aer ?ouy\")\n  0\n\ntest()", "completions": ["    s.ToCharArray()\n    |> Array.map (fun c -> if c >= 'a' && c <= 'z' then c - int 'a' + int 'A' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c - int '0' + int '0' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c - int '0' + int '0' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c - int '0' + int '0' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' + int 'a' else c)\n    |> Array.filter (fun c -> c >= 'a' && c <= 'z')\n    |> Array.map (fun c -> if c >= '0' && c <= '9' then c", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable result = \"\"\n    while i < words.Length do\n        let c = words.[i]\n        if i = 0 then\n            result <- c\n        else\n            result <- result + \" \" + c\n        i <- i + 1\n    result", "    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.map (fun c -> c.ToString()))\n    words |> Array.map (fun word -> word.[0])", "    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.rev)\n    words |> Array.map (fun word -> word.[0])", "    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.rev)\n    words |> Array.map (fun word -> word.[0])", "    let words = s.Split(' ')\n    words.[0]", "    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> Array.rev\n    |> String.concat \"\"", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable j = 0\n    while i < words.Length do\n        let c = words.[i]\n        if c <> ' ' && c <> '\\t' then\n            words.[i] <- ' '\n            i <- i + 1\n        else\n            words.[i] <- c\n            i <- i + 1\n        if i < words.Length then\n            words.[i] <- ' '\n            i <- i + 1\n    words.[0] <- ' '\n    words.[1..] |> String.concat \"\"", "    let words = s.Split(' ')\n    words.[0]", "    s.ToCharArray()\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - 'A' + 10 else c)\n    |> Array.sort\n    |> String.concat \"\"", "    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> String.Concat", "    let words = s.Split(' ')\n    words.[0]", "    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> String.concat \"\"", "    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray() |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - int 'A' else int c))\n    words |> Array.map (fun word -> word.[0..1]) |> Array.reduce (fun a b -> a + b)", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.Split(' ')\n    let words = words |> Array.map (fun word -> word.ToCharArray())\n    let words = words |> Array.map (fun word -> word.[0])\n    let words = words |> Array.map (fun word -> word.ToLower())\n    words |> Array.map (fun word -> word.[0])", "    let words = s.Split(' ')\n    words.[0]", "    let words = s.ToCharArray()\n    let mutable i = 0\n    let mutable j = 0\n    let mutable result = \"\"\n    while i < words.Length do\n        let c = words.[i]\n        if i = 0 then\n            if j = 0 then\n                result <- c\n            else\n                result <- result + \" \" + c\n                j <- j + 1\n        else\n            if j = 0 then\n                result <- result + \" \" + c\n                j <- j + 1\n            else\n                result <- result + \" \" + c\n                j <- j + 1\n        i <- i + 1\n    result", "    s.ToCharArray()\n    |> Array.map (fun c -> if c = ' ' then '_' else c)\n    |> String.concat \"\"", "    s.ToCharArray()\n    |> Array.map (fun c -> if c >= 'A' && c <= 'Z' then c - 'A' + 10 else c)\n    |> Array.rev\n    |> Array.map (fun c -> if c >= 'a' && c <= 'z' then c - 'a' + 10 else c)\n    |> String.concat \"\""], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}