{"name": "HumanEval_84_solve", "language": "fs", "prompt": "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// For N = 1000, the sum of digits will be 1 the output should be \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n// Variables:\n// @N integer\n// Constraints: 0 \u00e2\u2030\u00a4 N \u00e2\u2030\u00a4 10000.\n// Output:\n// a string of binary number\nlet solve (N: int): string  = \n", "tests": "let test() = \n  let candidate = solve\n  assert (candidate 1000 = \"1\")\n  assert (candidate 150 = \"110\")\n  assert (candidate 147 = \"1100\")\n  assert (candidate 333 = \"1001\")\n  assert (candidate 963 = \"10010\")\n  0\n\ntest()", "completions": ["    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | x :: xs ->\n            match x with\n            | x when x < N -> sumDigits (N - x) xs\n            | x when x > N -> sumDigits N xs\n            | _ -> sumDigits N xs\n    sumDigits N [1..N]", "    let rec sumDigits (N: int) (digits: int list) = \n        match digits with\n        | [] -> \"\"\n        | x :: xs -> \n            match x with\n            | x when x < 0 -> \"-\" + (solve xs)\n            | x when x > 10 -> \"1\" + (solve xs)\n            | x -> \"0\" + (solve xs)\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | h :: t ->\n            let sum = N * h\n            sumDigits (N - sum) t\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits (N - head) tail)\n            sum + (sumDigits (N - head) tail)\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: string list): string =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + sumDigits (N - head.Length) tail\n            sum + sumDigits N tail\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: string): string =\n        if N = 0 then digits\n        elif N = 1 then digits\n        elif N = 2 then digits\n        elif N = 3 then digits\n        elif N = 4 then digits\n        elif N = 5 then digits\n        elif N = 6 then digits\n        elif N = 7 then digits\n        elif N = 8 then digits\n        elif N = 9 then digits\n        elif N = 10 then digits\n        elif N = 11 then digits\n        elif N = 12 then digits\n        elif N = 13 then digits\n        elif N = 14 then digits\n        elif N = 15 then digits\n        elif N = 16 then digits\n        elif N = 17 then digits\n        elif N = 18 then digits\n        elif N = 19 then digits\n        elif N = 20 then digits\n        elif N = 21 then digits\n        elif N = 22 then digits\n        elif N = 23 then digits\n        elif N = 24 then digits\n        elif N = 25 then digits\n        elif N = 26 then digits\n        elif N = 27 then digits\n        elif N = 28 then digits\n        elif N = 29 then digits\n        elif N = 30 then digits\n        elif N = 31 then digits\n        elif N = 32 then digits\n        elif N = 33 then digits\n        elif N = 34 then digits\n        elif N = 35 then digits\n        elif N = 36 then digits\n        elif N = 37 then digits\n        elif N = 38 then digits\n        elif N = 39 then digits\n        elif N = 40 then digits\n        elif N = 41 then digits\n        elif N = 42 then digits\n        elif N = 43 then digits\n        elif N = 44 then digits\n        elif N = 45 then digits\n        elif N = 46 then digits\n        elif N = 47 then digits\n        elif N = 48 then digits\n        elif N = 49 then digits\n        elif N = 50 then digits\n        elif N = 51 then digits\n        elif N = 52 then digits\n        elif N = 53 then digits\n        elif N = 54 then", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | x :: xs ->\n            match x with\n            | 0 -> \"\"\n            | 1 -> \"1\"\n            | _ -> sumDigits (N - 1) xs\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let newDigits = head :: (sumDigits N tail)\n            sprintf \"%s%s\" newDigits (if N % 2 = 0 then \"0\" else \"1\")\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: string list): string =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits (N - head.Length) tail)\n            sum + (sumDigits N tail)\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) = \n        match digits with\n        | [] -> \"\"\n        | x :: xs -> \n            let sum = (N - x) * (N - x)\n            sumDigits sum xs\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | x :: xs ->\n            match x with\n            | 0 -> \"\"\n            | 1 -> \"1\"\n            | _ -> sumDigits (N - 1) xs\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits (N - head) tail)\n            sum + (sumDigits (N - head) tail)\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: string): string =\n        if N = 0 then digits\n        elif N = 1 then digits\n        elif N = 2 then digits\n        elif N = 3 then digits\n        elif N = 4 then digits\n        elif N = 5 then digits\n        elif N = 6 then digits\n        elif N = 7 then digits\n        elif N = 8 then digits\n        elif N = 9 then digits\n        elif N = 10 then digits\n        elif N = 11 then digits\n        elif N = 12 then digits\n        elif N = 13 then digits\n        elif N = 14 then digits\n        elif N = 15 then digits\n        elif N = 16 then digits\n        elif N = 17 then digits\n        elif N = 18 then digits\n        elif N = 19 then digits\n        elif N = 20 then digits\n        elif N = 21 then digits\n        elif N = 22 then digits\n        elif N = 23 then digits\n        elif N = 24 then digits\n        elif N = 25 then digits\n        elif N = 26 then digits\n        elif N = 27 then digits\n        elif N = 28 then digits\n        elif N = 29 then digits\n        elif N = 30 then digits\n        elif N = 31 then digits\n        elif N = 32 then digits\n        elif N = 33 then digits\n        elif N = 34 then digits\n        elif N = 35 then digits\n        elif N = 36 then digits\n        elif N = 37 then digits\n        elif N = 38 then digits\n        elif N = 39 then digits\n        elif N = 40 then digits\n        elif N = 41 then digits\n        elif N = 42 then digits\n        elif N = 43 then digits\n        elif N = 44 then digits\n        elif N = 45 then digits\n        elif N = 46 then digits\n        elif N = 47 then digits\n        elif N = 48 then digits\n        elif N = 49 then digits\n        elif N = 50 then digits\n        elif N = 51 then digits\n        elif N = 52 then digits\n        elif N = 53 then digits\n        elif N = 54 then", "    let rec sumDigits (N: int) (digits: string list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits (N - 1) tail)\n            sum + (sumDigits N tail)\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) = \n        match digits with\n        | [] -> \"\"\n        | x :: xs -> \n            let sum = x + (sumDigits (N - x) xs)\n            sum.PadLeft(N - x, '0')\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let sum = head + (sumDigits (N - head) tail)\n            sum + (sumDigits (N - head) tail)\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: int list) =\n        match digits with\n        | [] -> \"\"\n        | x::xs ->\n            match x with\n            | x when x < N -> sumDigits xs (x :: digits)\n            | x when x > N -> sumDigits xs (x :: digits)\n            | _ -> sumDigits xs (digits @ [x])\n    sumDigits N []", "    let rec sumDigits (N: int) (digits: string list) =\n        match digits with\n        | [] -> \"\"\n        | head::tail ->\n            let digit = head.ToString()\n            let newDigits = sumDigits (N-1) tail\n            if newDigits <> \"\" then\n                newDigits + digit\n            else\n                newDigits + digit\n    sumDigits N []", "    let rec sumDigits (N: int): string =\n        if N = 0 then \"\"\n        else\n            let digit = N % 10\n            if digit = 0 then sumDigits (N / 10)\n            else sumDigits (N / 10) + string digit\n    sumDigits N", "    let rec sumDigits (N: int) (digits: string list) =\n        match digits with\n        | [] -> \"\"\n        | head :: tail ->\n            let newSum = head + (sprintf \"%d\" N)\n            sumDigits (N - 1) tail\n            |> sprintf \"%s%s\" newSum\n    sumDigits N []"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}