{"name": "HumanEval_61_correct_bracketing", "language": "fs", "prompt": "//brackets is a string of \"(\" and \")\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"(()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nlet correct_bracketing (brackets: string): bool  = \n", "tests": "let test() = \n  let candidate = correct_bracketing\n  assert (candidate \"()\" = true)\n  assert (candidate \"(()())\" = true)\n  assert (candidate \"()()(()())()\" = true)\n  assert (candidate \"()()((()()())())(()()(()))\" = true)\n  assert (candidate \"((()())))\" = false)\n  assert (candidate \")(()\" = false)\n  assert (candidate \"(\" = false)\n  assert (candidate \"((((\" = false)\n  assert (candidate \")\" = false)\n  assert (candidate \"(()\" = false)\n  assert (candidate \"()()(()())())(()\" = false)\n  assert (candidate \"()()(()())()))()\" = false)\n  0\n\ntest()", "completions": ["    let rec check_bracket (bracket: string) = \n        match bracket with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    \n    let rec check_bracket_with_opening_bracket (bracket: string) = \n        match bracket with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    \n    check_bracket \"(\"\n    check_bracket \")\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n    check_bracket_with_opening_bracket \"(\"\n", "    let rec check_bracket (bracket: string) (brackets: string) =\n        match brackets.Length with\n        | 0 -> true\n        | _ ->\n            let brackets = brackets.Substring(0, brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with \n        | \"\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec check_bracket (bracket: string) (brackets: string) =\n        if brackets.StartsWith(bracket) then\n            let brackets = brackets.Substring(bracket.Length)\n            let brackets = brackets.Trim()\n            if brackets.StartsWith(\"(\") then\n                let brackets = brackets.Substring(1)\n                let brackets = brackets.Trim()\n                if brackets.StartsWith(\")\") then\n                    let brackets = brackets.Substring(1)\n                    let brackets = brackets.Trim()\n                    if brackets.StartsWith(\")\") then\n                        let brackets = brackets.Substring(1)\n                        let brackets = brackets.Trim()\n                        if brackets.StartsWith(\")\") then\n                            let brackets = brackets.Substring(1)\n                            let brackets = brackets.Trim()\n                            if brackets.StartsWith(\")\") then\n                                let brackets = brackets.Substring(1)\n                                let brackets = brackets.Trim()\n                                if brackets.StartsWith(\")\") then\n                                    let brackets = brackets.Substring(1)\n                                    let brackets = brackets.Trim()\n                                    if brackets.StartsWith(\")\") then\n                                        let brackets = brackets.Substring(1)\n                                        let brackets = brackets.Trim()\n                                        if brackets.StartsWith(\")\") then\n                                            let brackets = brackets.Substring(1)\n                                            let brackets = brackets.Trim()\n                                            if brackets.StartsWith(\")\") then\n                                                let brackets = brackets.Substring(1)\n                                                let brackets = brackets.Trim()\n                                                if brackets.StartsWith(\")\") then\n                                                    let brackets = brackets.Substring(1)\n                                                    let brackets = brackets.Trim()\n                                                    if brackets.StartsWith(\")\") then\n                                                        let brackets = brackets.Substring(1)\n                                                        let brackets = brackets.Trim()\n                                                        if brackets.StartsWith(\")\") then\n                                                            let brackets = brackets.Substring(1)\n                                                            let brackets = brackets.Trim()\n                                                            if brackets.StartsWith(\")\") then\n                                                                let brackets = brackets.Substring(1", "    let rec loop (brackets: string) = \n        if brackets.StartsWith(\"(\") && brackets.EndsWith(\")\") then\n            let brackets = brackets.Substring(2, brackets.Length - 3)\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"\")\n            let brackets = brackets.Replace(\")\", \"\")\n            let brackets = brackets.Replace(\"(\", \"", "    let rec loop (brackets: string) = \n        if brackets.Length = 0 then \n            true\n        else\n            let opening_bracket = brackets.[0]\n            let closing_bracket = brackets.[brackets.Length - 1]\n            if opening_bracket = '(' && closing_bracket = ')' then \n                loop (brackets.Substring(1, brackets.Length - 2))\n            else\n                loop brackets\n    loop brackets", "    let rec check_bracket (bracket: string) (brackets: string) = \n        match brackets.Length with\n        | 0 -> true\n        | _ ->\n            let brackets_left = brackets.Substring(0, brackets.Length - 1)\n            let brackets_right = brackets.Substring(brackets.Length - 1)\n            let brackets_left_right = brackets_left.Substring(0, brackets_left.Length - brackets_right.Length)\n            let brackets_left_right_bracket = brackets_left.Substring(brackets_left.Length - brackets_right.Length)\n            let brackets_right_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Substring(brackets_right.Length - brackets_right.Length)\n            let brackets_right_bracket_bracket_bracket = brackets_right.Sub", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with \n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec check_bracket (bracket: string) (brackets: string) =\n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    \n    check_bracket brackets \"()\"\n    check_bracket brackets \"()()\"\n    check_bracket brackets \"()()()\"\n    check_bracket brackets \"()()()()\"\n    check_bracket brackets \"()()()()()\"\n    check_bracket brackets \"()()()()()()\"\n    check_bracket brackets \"()()()()()()()\"\n    check_bracket brackets \"()()()()()()()()\"\n    check_bracket brackets \"()()()()()()()()()\"\n    check_bracket brackets \"()()()()()()()()()()\"\n    check_bracket brackets \"()()()()()()()()()()()()\"\n    check_bracket bracketslet rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec check_bracket (bracket: string) (brackets: string) = \n        if brackets.StartsWith(bracket) then \n            let brackets = brackets.Substring(bracket.Length)\n            let brackets = brackets.Trim()\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimStart", "    let rec check_bracket (bracket: string) = \n        if bracket.StartsWith(\"(\") && bracket.EndsWith(\")\") then\n            let brackets = bracket.Substring(1, bracket.Length - 2)\n            let brackets = brackets.Trim()\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets.TrimEnd(')')\n            let brackets = brackets.TrimStart('(')\n            let brackets = brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"(\" -> true\n        | \")\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        let brackets = brackets.Trim()\n        if brackets.StartsWith(\"(\") && brackets.EndsWith(\")\") then \n            let brackets = brackets.Substring(2, brackets.Length - 3)\n            let brackets = brackets.Trim()\n            if brackets.StartsWith(\"()\") && brackets.EndsWith(\")\") then \n                let brackets = brackets.Substring(3, brackets.Length - 4)\n                let brackets = brackets.Trim()\n                if brackets.StartsWith(\"(\") && brackets.EndsWith(\")\") then \n                    let brackets = brackets.Substring(2, brackets.Length - 3)\n                    let brackets = brackets.Trim()\n                    if brackets.StartsWith(\"()\") && brackets.EndsWith(\")\") then \n                        let brackets = brackets.Substring(3, brackets.Length - 4)\n                        let brackets = brackets.Trim()\n                        if brackets.StartsWith(\"(\") && brackets.EndsWith(\")\") then \n                            let brackets = brackets.Substring(2, brackets.Length - 3)\n                            let brackets = brackets.Trim()\n                            if brackets.StartsWith(\"()\") && brackets.EndsWith(\")\") then \n                                let brackets = brackets.Substring(3, brackets.Length - 4)\n                                let brackets = brackets.Trim()\n                                if brackets.StartsWith(\"(\") && brackets.EndsWith(\")\") then \n                                    let brackets = brackets.Substring(2, brackets.Length - 3)\n                                    let brackets = brackets.Trim()\n                                    if brackets.StartsWith(\"()\") && brackets.EndsWith(\")\") then \n                                        let brackets = brackets.Substring(3, brackets.Length - 4)\n                                        let brackets = brackets.Trim()\n                                        if brackets.StartsWith(\"(\") && brackets.EndsWith(\")\") then \n                                            let brackets = brackets.Substring(2, brackets.Length - 3)\n                                            let brackets = brackets.Trim()\n                                            if brackets.StartsWith(\"()\") && brackets.EndsWith(\")\") then \n                                                let brackets = brackets.Sub"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}