{"name": "HumanEval_43_pairs_sum_to_zero", "language": "fs", "prompt": "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns True if there are two distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nlet pairs_sum_to_zero (l: int list): bool  = \n", "tests": "let test() = \n  let candidate = pairs_sum_to_zero\n  assert (candidate [1; 3; 5; 0] = false)\n  assert (candidate [1; 3; -2; 1] = false)\n  assert (candidate [1; 2; 3; 7] = false)\n  assert (candidate [2; 4; -5; 3; 5; 7] = true)\n  assert (candidate [1] = false)\n  assert (candidate [-3; 9; -1; 3; 2; 30] = true)\n  assert (candidate [-3; 9; -1; 3; 2; 31] = true)\n  assert (candidate [-3; 9; -1; 4; 2; 30] = false)\n  assert (candidate [-3; 9; -1; 4; 2; 31] = false)\n  0\n\ntest()", "completions": ["    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop false l", "    let rec sum_to_zero (l: int list) = \n        match l with \n        | [] -> false\n        | x::xs -> \n            if x = 0 then sum_to_zero xs\n            else sum_to_zero (xs@[x])\n    sum_to_zero l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 l", "    let rec sum_to_zero (l: int list) =\n        match l with\n        | [] -> true\n        | x::xs ->\n            if x = 0 then sum_to_zero xs\n            else sum_to_zero (xs@[x])\n    sum_to_zero l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec loop i = \n        if i = l.Length then true\n        else \n            let sum = l.[i]\n            if sum = 0 then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop i = \n        if i = 0 then true\n        elif l.[i-1] = l.[i] then loop (i-1)\n        else false\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec loop i = \n        if i = l.Length then true\n        else \n            let sum = l.[i]\n            if sum < 0 then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs ->\n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec loop i = \n        if i = 0 then true\n        else if l |> List.exists (fun x -> x = i) then loop (i-1)\n        else loop (i+1)\n    loop 0", "    let rec sum_to_zero_rec acc l = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            match x with\n            | x when x = 0 -> acc\n            | x when x = 1 -> sum_to_zero_rec acc xs\n            | x when x = 2 -> sum_to_zero_rec acc xs\n            | x when x = 3 -> sum_to_zero_rec acc xs\n            | x when x = 4 -> sum_to_zero_rec acc xs\n            | x when x = 5 -> sum_to_zero_rec acc xs\n            | x when x = 6 -> sum_to_zero_rec acc xs\n            | x when x = 7 -> sum_to_zero_rec acc xs\n            | _ -> sum_to_zero_rec acc xs\n    sum_to_zero_rec false l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec sum_to_zero_rec (l: int list) = \n        match l with\n        | [] -> false\n        | x::xs -> \n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}