{"name": "HumanEval_35_max_element", "language": "fs", "prompt": "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlet max_element (l: int list): int  = \n", "tests": "let test() = \n  let candidate = max_element\n  assert (candidate [1; 2; 3] = 3)\n  assert (candidate [5; 3; -5; 2; -3; 3; 9; 0; 124; 1; -10] = 124)\n  0\n\ntest()", "completions": ["    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                max_element' (x::acc)\n            else \n                max_element' (x::acc)\n    max_element' 0", "    let rec max_element' (l: int list) = \n        match l with\n        | [] -> 0\n        | x :: xs -> \n            if x > xs.Head then max_element' xs\n            else max_element' xs\n    max_element' l", "    let rec max_element' acc l = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' acc xs\n    max_element' 0 l", "    let rec max_element' (l: int list) = \n        match l with \n        | [] -> 0 \n        | x::xs -> \n            if x > max_element' xs then x else max_element' xs\n    max_element' l", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | hd::tl -> \n            if hd > acc then max_element' (hd::acc) tl\n            else max_element' (hd::acc) tl\n    max_element' 0 []", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc)\n            else max_element' (x::acc)\n    max_element' 0", "    let rec max_element' acc l = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc) xs\n            else max_element' (x::acc) xs\n    max_element' 0 l", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | hd::tl -> \n            if hd > tl.Head then max_element' (hd::acc) tl\n            else max_element' (hd::acc) tl\n    max_element' []", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc)\n            else max_element' (acc + x)\n    max_element' 0", "    let rec max_element' acc l = \n        match l with \n        | [] -> acc\n        | hd::tl -> \n            if hd > acc then max_element' (hd::acc) tl\n            else max_element' (hd::acc) tl\n    max_element' 0 l", "    let rec max_element' (l: int list) = \n        match l with \n        | [] -> 0\n        | x::xs -> \n            let max_x = max x xs\n            if max_x > x then max_x xs\n            else max_element' xs\n    max_element' l", "    let rec max_element' acc i = \n        if i < 0 then acc\n        elif l.[i] = 0 then acc\n        else max_element' (acc + 1) (i - 1)\n    max_element' 0 0", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | h::t -> \n            if h > acc then max_element' (h::acc)\n            else max_element' (h::acc)\n    max_element' 0", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element' (x::acc)\n            else max_element' (acc+x)\n    max_element' 0", "    let rec max_element' acc i = \n        if i = 0 then acc\n        else if l.[i] > l.[i-1] then max_element' (i-1) (i-1)\n        else max_element' (i-1) (i-1)\n    max_element' 0 0", "    let rec max_element_i (acc: int) (l: int list) = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then max_element_i (acc + 1) xs\n            else max_element_i acc xs\n    max_element_i 0 l", "    let rec max_element' acc =\n        match l with\n        | [] -> acc\n        | x::xs ->\n            if x > acc then\n                max_element' (x::acc)\n            else\n                max_element' (x::acc)\n    max_element' 0", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                max_element' (x::acc)\n            else \n                max_element' (x::acc)\n    max_element' []", "    let rec max_element' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then \n                max_element' (x::acc)\n            else \n                max_element' (acc+1)\n    max_element' 0", "    let rec max_element' acc = \n        match l with\n        | [] -> acc\n        | hd::tl -> \n            if hd > tl.Head then max_element' (hd::acc) tl\n            else max_element' (hd::acc) tl\n    max_element' []"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}