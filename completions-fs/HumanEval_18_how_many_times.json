{"name": "HumanEval_18_how_many_times", "language": "fs", "prompt": "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa', 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nlet how_many_times (string: string) (substring: string): int  = \n", "tests": "let test() = \n  let candidate = how_many_times\n  assert (candidate \"\" \"x\" = 0)\n  assert (candidate \"xyxyxyx\" \"x\" = 4)\n  assert (candidate \"cacacacac\" \"cac\" = 4)\n  assert (candidate \"john doe\" \"john\" = 1)\n  0\n\ntest()", "completions": ["    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length && string.[i] = substring.[i] do\n        i <- i + 1\n        count <- count + 1\n    count", "    let mutable i = 0\n    let mutable count = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n            i <- i + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then count <- count + 1\n        else i <- i + 1\n    count", "    let mutable count = 0\n    let mutable index = 0\n    while index < string.Length && count < string.Length do\n        if string.[index] = substring.[index] then\n            count <- count + 1\n        else\n            index <- index + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable index = 0\n    while index < string.Length && count < substring.Length do\n        if string.[index] = substring.[index] then\n            count <- count + 1\n        else\n            index <- index + 1\n    count", "    let mutable i = 0\n    let mutable count = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then count <- count + 1\n        i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable i = 0\n    let mutable count = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable i = 0\n    let mutable count = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        else\n            i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length do\n        if string.[i] = substring.[i] then\n            count <- count + 1\n        i <- i + 1\n    count", "    let mutable count = 0\n    let mutable i = 0\n    while i < string.Length && count < string.Length && string.[i] = substring.[i] do\n        i <- i + 1\n        count <- count + 1\n    count"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}