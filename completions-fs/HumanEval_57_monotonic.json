{"name": "HumanEval_57_monotonic", "language": "fs", "prompt": "//Return True is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n// >>> monotonic([4, 1, 0, -10])\n// True\nlet monotonic (l: int list): bool  = \n", "tests": "let test() = \n  let candidate = monotonic\n  assert (candidate [1; 2; 4; 10] = true)\n  assert (candidate [1; 2; 4; 20] = true)\n  assert (candidate [1; 20; 4; 10] = false)\n  assert (candidate [4; 1; 0; -10] = true)\n  assert (candidate [4; 1; 1; 0] = true)\n  assert (candidate [1; 2; 3; 2; 5; 60] = false)\n  assert (candidate [1; 2; 3; 4; 5; 60] = true)\n  assert (candidate [9; 9; 9; 9] = true)\n  0\n\ntest()", "completions": ["    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x :: xs -> \n            if x > xs.Head then loop (acc + 1)\n            else loop (acc + 1)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc || loop (x-1))\n            else loop (acc || loop (x-1))\n    loop false", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec loop acc =\n        match l with\n        | [] -> acc\n        | x::xs ->\n            if x > 0 then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec monotonic' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> monotonic' (x::acc) xs\n    monotonic' []", "    let rec monotonic' acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > xs.[0] then monotonic' (x::acc)\n            else monotonic' (x::acc)\n    monotonic' []", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc || loop (x-1))\n            else loop (acc || loop (x-1))\n    loop false", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > xs.[0] then loop (acc + 1)\n            else loop (acc + xs.[0])\n    loop 0", "    let rec loop acc =\n        match l with\n        | [] -> acc\n        | x::xs ->\n            if x > 0 then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | h::t -> loop (h::acc)\n    loop []", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc || loop (x-1))\n            else loop (acc || loop (x-1))\n    loop false", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > acc then loop (x::acc)\n            else loop (acc::x::acc)\n    loop []", "    let rec monotonic' acc = \n        match acc with\n        | [] -> false\n        | x::xs -> \n            if x > 0 then monotonic' (x::acc)\n            else monotonic' (xs::acc)\n    monotonic' []", "    let rec monotonic' acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let acc' = monotonic' (acc + 1)\n            monotonic' (acc' + x) xs\n    monotonic' 0 l", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc || loop (x-1))\n            else loop (acc || loop (x-1))\n    loop false", "    let rec monotonic' acc = \n        match acc with \n        | [] -> false\n        | x::xs -> \n            if x > y then monotonic' (x::acc)\n            else monotonic' (y::acc)\n    monotonic' []", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > xs.[0] then loop (acc + 1)\n            else loop (acc + xs.[0])\n    loop 0", "    let rec loop acc =\n        match l with\n        | [] -> acc\n        | x::xs ->\n            if x > 0 then loop (acc + x)\n            else loop (acc - x)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > xs.[0] then loop (acc + 1)\n            else loop (acc + 1)\n    loop 0", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > acc then loop (x::acc)\n            else loop (acc+1)\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}