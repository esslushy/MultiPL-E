{"name": "HumanEval_56_correct_bracketing", "language": "fs", "prompt": "//brackets is a string of \"<\" and \">\".\n// return True if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nlet correct_bracketing (brackets: string): bool  = \n", "tests": "let test() = \n  let candidate = correct_bracketing\n  assert (candidate \"<>\" = true)\n  assert (candidate \"<<><>>\" = true)\n  assert (candidate \"<><><<><>><>\" = true)\n  assert (candidate \"<><><<<><><>><>><<><><<>>>\" = true)\n  assert (candidate \"<<<><>>>>\" = false)\n  assert (candidate \"><<>\" = false)\n  assert (candidate \"<\" = false)\n  assert (candidate \"<<<<\" = false)\n  assert (candidate \">\" = false)\n  assert (candidate \"<<>\" = false)\n  assert (candidate \"<><><<><>><>><<>\" = false)\n  assert (candidate \"<><><<><>><>>><>\" = false)\n  0\n\ntest()", "completions": ["    let rec check_bracket (bracket: string) (brackets: string) =\n        match brackets.Length with\n        | 0 -> true\n        | _ ->\n            let brackets = brackets.Substring(1)\n            let brackets = brackets.Substring(0, brackets.Length - 1)\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            let brackets = brackets.Replace(\"<\",\"\")\n            let brackets = brackets.Replace(\">\",\"\")\n            ", "    let rec loop (brackets: string) = \n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!=\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!==\" -> true\n        | \">=\" -> true\n        | \">", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | _ -> false\n    loop brackets", "    let rec check_bracket (bracket: string) (brackets: string): bool =\n        if brackets.StartsWith(bracket) then\n            true\n        else\n            check_bracket (bracket.Substring(1)) brackets\n    check_bracket brackets \">\"\n    check_bracket brackets \"<\"\n    check_bracket brackets \"<<<\"\n    check_bracket brackets \"<<>\"\n    check_bracket brackets \">\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<<>\"\n    check_bracket brackets \"<<\"\n    check_bracket brackets \">>>\"\n    check_bracket brackets \">>\"\n    check_bracket brackets \">>>\"\n    check_bracket brackets \">>>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_bracket brackets \"<>\"\n    check_br", "    let rec loop (brackets: string) = \n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">><\" -> true\n        | \"<<>\" -> true\n        | \"<<<\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">><\" -> true\n        | \"<<>\" -> true\n        | \"<<<\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \">\" -> false\n        | \">\" -> false\n        | \">=\" -> false\n        | \">=\" -> false\n        | \"==\" -> false\n        | \"!=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"<=\" -> false\n        | \">>\" -> false\n        | \">>\" -> false\n        | \">=\" -> false\n        | \"<>\" -> false\n        | \"<>\" -> false\n        | \"==\" -> false\n        | \"!==\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"<=\" -> false\n        | \">>\" -> false\n        | \">>\" -> false\n        | \">=\" -> false\n        | \"<>\" -> false\n        | \"<>\" -> false\n        | \"==\" -> false\n        | \"!==\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"<=\" -> false\n        | \">>\" -> false\n        | \">>\" -> false\n        | \">=\" -> false\n        | \"<>\" -> false\n        | \"<>\" -> false\n        | \"==\" -> false\n        | \"!==\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"<=\" -> false\n        | \">>\" -> false\n        | \"", "    let rec loop (brackets: string) =\n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">>>\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \">\" -> true\n        | _ -> false\n    loop brackets", "    let rec check_bracket (bracket: string) (brackets: string): bool =\n        match brackets.Length with\n        | 0 -> true\n        | _ ->\n            let first_bracket = brackets.[0]\n            let second_bracket = brackets.[1]\n            let first_bracket_is_opening = first_bracket.StartsWith(\"<\")\n            let second_bracket_is_closing = second_bracket.StartsWith(\">\")\n            if first_bracket_is_opening && second_bracket_is_closing then\n                let first_bracket_is_closing = brackets.[1].StartsWith(\">>\")\n                let second_bracket_is_closing = brackets.[2].StartsWith(\"<<\")\n                if first_bracket_is_closing && second_bracket_is_closing then\n                    let first_bracket_is_closing = brackets.[1].StartsWith(\">>\")\n                    let second_bracket_is_opening = brackets.[2].StartsWith(\"<<\")\n                    if first_bracket_is_closing && second_bracket_is_opening then\n                        let first_bracket_is_opening = brackets.[1].StartsWith(\">>\")\n                        let second_bracket_is_opening = brackets.[2].StartsWith(\"<<\")\n                        if first_bracket_is_opening && second_bracket_is_opening then\n                            let first_bracket_is_opening = brackets.[1].StartsWith(\">>\")\n                            let second_bracket_is_opening = brackets.[2].StartsWith(\"<<\")\n                            if first_bracket_is_opening && second_bracket_is_opening then\n                                let first_bracket_is_opening = brackets.[1].StartsWith(\">>\")\n                                let second_bracket_is_opening = brackets.[2].StartsWith(\"<<\")\n                                if first_bracket_is_opening && second_bracket_is_opening then\n                                    let first_bracket_is_opening = brackets.[1].StartsWith(\">>\")\n                                    let second_bracket_is_opening = brackets.[2].StartsWith(\"<<\")\n                                    ", "    let rec loop (brackets: string) =\n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<<\" -> true\n        | \">>\" -> true\n        | \"<<<\" -> true\n        | \">>>\" -> true\n        | _ -> false\n    loop brackets", "    let rec check_bracket (bracket: string) (brackets: string): bool = \n        if brackets.StartsWith(bracket) then \n            let index = brackets.LastIndexOf(bracket)\n            if index = -1 then \n                true\n            else\n                let left = brackets.Substring(0, index)\n                let right = brackets.Substring(index + 1)\n                let left_bracket = brackets.Substring(0, index)\n                let right_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket = brackets.Substring(index + 1)\n                let right_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)\n                let left_bracket_bracket_bracket = brackets.Substring(index + 1)", "    let rec loop (brackets: string) = \n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | _ -> false\n    loop brackets", "    let rec loop (brackets: string) = \n        if brackets.Length = 0 then\n            true\n        else\n            let opening_bracket = brackets.[0]\n            let closing_bracket = brackets.[brackets.Length-1]\n            let opening_bracket_is_closing_bracket = \n                opening_bracket = closing_bracket\n            if opening_bracket_is_closing_bracket then\n                loop brackets.[brackets.Length-1]\n            else\n                loop brackets\n    loop brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"==\" -> true\n        | \"!=\" -> true\n        | \">\" -> true\n        | \"<\" -> false\n        | \"<>\" -> false\n        | \"<=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"==\" -> false\n        | \"!=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"<\" -> false\n        | \"<>\" -> false\n        | \"<=\" -> false\n        | \"==\" -> false\n        | \"!=\" -> false\n        | \">\" -> false\n        | \"<\" -> false\n        | \"<>\" -> false\n        | \"<=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"==\" -> false\n        | \"!=\" -> false\n        | \">\" -> false\n        | \"<\" -> false\n        | \"<>\" -> false\n        | \"<=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"==\" -> false\n        | \"!=\" -> false\n        | \">\" -> false\n        | \"<\" -> false\n        | \"<>\" -> false\n        | \"<=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"==\" -> false\n        | \"!=\" -> false\n        | \">\" -> false\n        | \"<\" -> false\n        | \"<>\" -> false\n        | \"<=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"==\" -> false\n        | \"!=\" -> false\n        | \">\" -> false\n        | \"<\" -> false\n        | \"<>\" -> false\n        | \"<=\" -> false\n        | \">=\" -> false\n        | \"<=\" -> false\n        | \"==\" -> false\n        | \"!=\" ->", "    let rec loop (brackets: string) = \n        match brackets with\n        | \"\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">\" -> true\n        | \"<<\" -> true\n        | \">>\" -> true\n        | \"<<<\" -> true\n        | \">>>\" -> true\n        | \"<<<=\" -> true\n        | \">>=\" -> true\n        | \"<<>\" -> true\n        | \">>>\" -> true\n        | _ -> false\n    loop brackets", "    let rec check_bracket (bracket: string) = \n        match bracket with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | _ -> false\n    \n    check_bracket brackets", "    let rec loop (brackets: string) = \n        match brackets with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \"<<<=\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">>=\" -> true\n        | \">>=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \"<<<=\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">>=\" -> true\n        | \">>=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \"<<<=\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">>=\" -> true\n        | \">>=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \"<<<=\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">>=\" -> true\n        | \">>=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<=\" -> true\n        | \">=\" -> true\n        | \"<=\" -> true\n        | \"<<\" -> true\n        | \"<<<\" -> true\n        | \"<<<=\" -> true\n        | \">>\" -> true\n        | \">>>\" -> true\n        | \">>=\" -> true\n        | \">>=\" -> true\n        | \"<\" -> true\n        | \">\" -> true\n        | \"<", "    let rec check_bracket (bracket: string) = \n        match bracket with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \">>\" -> true\n        | \"<<<\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<<>\" -> true\n        | \">>>\" -> true\n        | \"<<<\" -> true\n        | \">>\" -> true\n        | _ -> false\n    \n    check_bracket brackets\n    \nlet correct_bracket (bracket: string): bool = \n    let rec check_bracket (bracket: string) = \n        match bracket with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \">>\" -> true\n        | \"<<<\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<<>\" -> true\n        | \">>>\" -> true\n        | \"<<<\" -> true\n        | \">>\" -> true\n        | _ -> false\n    \n    check_bracket bracket\n    \nlet correct_bracket_with_brackets (brackets: string): bool = \n    let rec check_bracket (bracket: string) = \n        match bracket with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \">>\" -> true\n        | \"<<<\" -> true\n        | \">=\" -> true\n        | \">=\" -> true\n        | \"<<>\" -> true\n        | \">>>\" -> true\n        | \"<<<\" -> true\n        | \">>\" -> true\n        | _ -> false\n    \n    check_bracket brackets\n    \nlet correct_bracket_with_brackets_with_brackets (brackets: string): bool = \n    let rec check_bracket (bracket: string) = \n        match bracket with\n        | \">\" -> true\n        | \"<\" -> true\n        | \"<>\" -> true\n        | \"<<\" -> true\n        | \"", "    let rec check_bracket (bracket: string) (brackets: string): bool = \n        match brackets.Length with\n        | 0 -> true\n        | _ -> \n            let brackets = brackets.Substring(0, brackets.Length-1)\n            let brackets = brackets.Trim()\n            let brackets = brackets.TrimStart('<')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('<')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('<')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('<')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('<')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('<')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n            let brackets = brackets.TrimStart('>')\n", "    let rec check_bracket (bracket: string) (brackets: string): bool = \n        match brackets.Length with\n        | 0 -> true\n        | _ ->\n            let brackets = brackets.Substring(0, brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets.Length - 1)\n            let brackets = brackets.Substring(brackets", "    let rec loop (brackets: string) = \n        if brackets.Length = 0 then\n            true\n        else\n            let first = brackets.[0]\n            let rest = brackets.[1..]\n            if first = '<' && rest = '>' then\n                loop rest\n            else\n                loop brackets\n    loop brackets"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}