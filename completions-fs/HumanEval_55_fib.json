{"name": "HumanEval_55_fib", "language": "fs", "prompt": "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nlet fib (n: int): int  = \n", "tests": "let test() = \n  let candidate = fib\n  assert (candidate 10 = 55)\n  assert (candidate 1 = 1)\n  assert (candidate 8 = 21)\n  assert (candidate 11 = 89)\n  assert (candidate 12 = 144)\n  0\n\ntest()", "completions": ["    let rec fib' n = \n        if n = 0 then 0 \n        else fib' (n-1) + fib' (n-2)\n    fib' n", "    let rec fib' acc n = \n        if n = 0 then acc\n        else fib' (n-1) (n-1)\n    fib' 0 n", "    if n <= 0 then 0\n    else\n        let rec fib' n =\n            if n = 0 then 0\n            else fib' (n - 1) + fib' (n - 2)\n        fib' n", "    let rec fib' n = \n        if n = 0 then 0\n        else fib' (n-1) + fib' (n-2)\n    fib' n", "    let rec fib_n (n: int) = \n        if n = 0 then 1\n        elif n = 1 then 1\n        elif n = 2 then 1\n        elif n = 3 then 1\n        elif n = 4 then 1\n        elif n = 5 then 1\n        elif n = 6 then 1\n        elif n = 7 then 1\n        elif n = 8 then 1\n        elif n = 9 then 1\n        elif n = 10 then 1\n        elif n = 11 then 1\n        elif n = 12 then 1\n        elif n = 13 then 1\n        elif n = 14 then 1\n        elif n = 15 then 1\n        else fib_n (n-1)\n    fib_n n", "    let rec fib' acc n = \n        if n <= 0 then acc\n        else fib' (n-1) (n-1)\n    fib' 0 n", "    if n = 0 then 0\n    else\n        let rec fib' (n: int) =\n            if n = 0 then 0\n            else fib' (n - 1) + fib' (n - 2)\n        fib' n", "    let rec fib' acc = \n        if n = 0 then acc\n        else fib' (acc + fib' (n-1))\n    fib' 0", "    let rec fib' (n: int) = \n        if n = 0 then 1\n        elif n = 1 then 1\n        else fib' (n - 1) + fib' (n - 2)\n    fib' n", "    let rec fib' acc =\n        if n = 0 then acc\n        else fib' (acc + fib' (acc + 1))\n    fib' 0", "    let rec fib' acc = \n        if n = 0 then acc\n        else fib' (n - 1) + fib' (n - 2)\n    fib' 0", "    let rec fib' (n: int) = \n        if n = 0 then 1\n        else fib' (n - 1) + fib' (n - 2)\n    fib' n", "    let rec fib' acc = \n        if n = 0 then acc\n        else fib' (acc + fib' (acc + 1))\n    fib' 0", "    let rec fib' acc = \n        if n = 0 then acc\n        else fib' (acc + fib' (acc + 1))\n    fib' 0", "    let rec fib' (n: int) = \n        if n < 0 then 0\n        elif n = 0 then 1\n        else fib' (n - 1) + fib' (n - 2)\n    fib' n", "    let rec fib' acc = \n        if n = 0 then acc\n        else fib' (fib' (acc + 1) (n - 1))\n    fib' 1", "    let rec fib' n = \n        if n < 0 then 0 \n        else \n            let fib' = fib' (n-1)\n            fib' (n-1) + fib'(n-1)\n    fib' (n-1)", "    let rec fib' (n: int) = \n        if n < 0 then failwith \"n < 0\"\n        elif n = 0 then 0\n        else fib' (n-1) + fib' (n-2)\n    fib' n", "    let rec fib_n n = \n        if n = 0 then 0\n        else fib_n (n-1) + fib_n (n-2)\n    fib_n n", "    let rec fib' acc = \n        if n = 0 then acc\n        else fib' (fib' (acc + 1))\n    fib' 1"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}