{"name": "HumanEval_16_count_distinct_characters", "language": "fs", "prompt": "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlet count_distinct_characters (string: string): int  = \n", "tests": "let test() = \n  let candidate = count_distinct_characters\n  assert (candidate \"\" = 0)\n  assert (candidate \"abcde\" = 5)\n  assert (candidate \"abcdecadeCADE\" = 5)\n  assert (candidate \"aaaaAAAAaaaa\" = 1)\n  assert (candidate \"Jerry jERRY JeRRRY\" = 5)\n  0\n\ntest()", "completions": ["    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if c = ' ' then 1 else 0)\n        |> Array.filter (fun c -> c <> 0)\n        |> Array.length", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if c = ' ' then 1 else 0)\n        |> Array.filter (fun c -> c <> 0)\n        |> Array.length\n    count_distinct_characters_list", "    let mutable count = 0\n    for i = 0 to string.Length - 1 do\n        if string.[i] = 'x' then\n            count <- count + 1\n    count", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if Char.IsUpper(c) then 1 else 0)\n        |> Array.filter (fun x -> x <> 0)\n        |> Array.map (fun x -> x + 1)\n        |> Array.sum\n    count_distinct_characters_list", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if c = ' ' then 1 else 0)\n        |> Array.filter (fun x -> x <> 0)\n        |> Array.length\n    count_distinct_characters_list", "    let mutable count = 0\n    for c in string do\n        if count = 0 then\n            count <- count + 1\n        else\n            if c <> string.[count - 1] then\n                count <- count - 1\n    count", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if c = ' ' then 1 else 0)\n        |> Array.filter (fun c -> c <> 0)\n        |> Array.length", "    let count_distinct_characters_count (characters: string list) = \n        let count_distinct_characters_count_count (characters: string list) = \n            let count_distinct_characters_count_count_count (characters: string list) = \n                let count_distinct_characters_count_count_count (characters: string list) = \n                    let count_distinct_characters_count_count_count_count (characters: string list) = \n                        let count_distinct_characters_count_count_count_count (characters: string list) = \n                            let count_distinct_characters_count_count_count_count (characters: string list) = \n                                let count_distinct_characters_count_count_count_count (characters: string list) = \n                                    let count_distinct_characters_count_count_count_count (characters: string list) = \n                                        let count_distinct_characters_count_count_count_count (characters: string list) = \n                                            let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                    let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                        let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                            let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                                let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                                    let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                                        let count_distinct_characters_count_count_count_count (characters: string list) = \n                                                                            let count_distinct_characters_count_count_count_count (characters: string list) =", "    let mutable count = 0\n    for c in string do\n        if (c = 'x') || (c = 'y') || (c = 'z') || (c = 'z') || (c = 'X') || (c = 'Y') || (c = 'Z') || (c = 'a') || (c = 'b') || (c = 'c') || (c = 'd') || (c = 'e') || (c = 'f') || (c = 'g') || (c = 'h') || (c = 'i') || (c = 'j') || (c = 'k') || (c = 'l') || (c = 'm') || (c = 'n') || (c = 'o') || (c = 'p') || (c = 'q') || (c = 'r') || (c = 's') || (c = 't') || (c = 'u') || (c = 'v') || (c = 'w') || (c = 'x') || (c = 'y') || (c = 'z') || (c = 'X') || (c = 'Y') || (c = 'Z') || (c = 'a') || (c = 'b') || (c = 'c') || (c = 'd') || (c = 'e') || (c = 'f') || (c = 'g') || (c = 'h') || (c = 'i') || (c = 'j') || (c = 'k') || (c = 'l') || (c = 'm') || (c = 'n') || (c = 'o') || (c = 'p') || (c = 'q') || (c = 'r') || (c = 's') || (c = 't') || (c = 'u') || (c = 'v') || (c = 'w') || (c = 'x') || (c = 'y') || (c = 'z') || (c = 'X') || (c = 'Y') || (c = 'Z') || (c = 'a') || (c = 'b') || (c = 'c') || (c = 'd') || (c = 'e') || (c = 'f", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> if c = ' ' then 1 else 0)\n        |> Array.filter (fun c -> c <> 0)\n        |> Array.length\n    \n    count_distinct_characters_list", "    let mutable count = 0\n    for c in string do\n        if count = 0 then\n            count <- count + 1\n        else\n            if (c = string.[0]) then\n                count <- count + 1\n            else\n                count <- count + 1\n    count", "    let mutable count = 0\n    for c in string do\n        if (c = 'x' || c = 'X' || c = 'y' || c = 'Y' || c = 'z' || c = 'Z') then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in string do\n        if count = 0 then\n            count <- count + 1\n        else\n            if count = 1 then\n                count <- count - 1\n            else\n                count <- count - 1\n    count", "    let mutable count = 0\n    for c in string do\n        if System.Char.IsDigit c then\n            count <- count + 1\n        else\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in string do\n        if (c = ' ') then\n            count <- count + 1\n    count", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.map (fun c -> \n            if Char.IsUpper(c) then \n                c\n            else \n                c + 'a'\n        )\n    count_distinct_characters_list |> List.length", "    let mutable count = 0\n    for c in string do\n        if System.Char.IsDigit c then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in string do\n        if (c = 'x' || c = 'X' || c = 'y' || c = 'Y' || c = 'z' || c = 'Z') then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for c in string do\n        if (c = ' ') then\n            count <- count + 1\n    count", "    let count_distinct_characters_list = \n        string.ToCharArray()\n        |> Array.filter (fun c -> c <> ' ')\n        |> Array.map (fun c -> c.ToString())\n        |> Array.distinct\n    \n    count_distinct_characters_list.Length"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}