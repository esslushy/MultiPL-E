{"name": "HumanEval_162_string_to_md5", "language": "fs", "prompt": "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nlet string_to_md5 (text: string): string option  = \n", "tests": "let test() = \n  let candidate = string_to_md5\n  assert (candidate \"Hello world\" = \"3e25960a79dbc69b674cd4ec67a72c62\")\n  assert (candidate \"\" = None)\n  assert (candidate \"A B C\" = \"0ef78513b0cb8cef12743f5aeb35f888\")\n  assert (candidate \"password\" = \"5f4dcc3b5aa765d61d8327deb882cf99\")\n  0\n\ntest()", "completions": ["    if text = \"\" then None\n    else\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash(text.ToCharArray())\n        |> Some", "    if String.IsNullOrEmpty text then None\n    else\n        let text = text.ToLower()\n        if text.Length = 0 then None\n        else\n            let hash = MD5.Create().ComputeHash text\n            Some hash", "    match text with\n    | \"\" -> None\n    | _ ->\n        let text = text.ToLower()\n        let hash = md5.ComputeHash text\n        Some (text.Substring(0, text.Length - hash.Length))", "    if text = \"\" then None\n    else Some (string_to_md5 text)", "    if text = \"\" then None\n    else\n        let md5 = MD5.Create()\n        md5.ComputeHash text\n        Some (md5.ComputeHash text)", "    if text = \"\" then None\n    else Some (string_to_md5 text)", "    if text = \"\" then None\n    else Some(text.ToLowerInvariant())", "    match text with\n    | \"\" -> None\n    | _ ->\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash text\n        |> Some", "    if text.Length = 0 then None\n    else\n        let md5 = MD5.Create()\n        let bytes = text.ToCharArray()\n        for i = 0 to bytes.Length - 1 do\n            let b = bytes.[i]\n            md5.ComputeHash(b)\n        Some(md5.ToString())", "    match text with\n    | \"\" -> None\n    | _ ->\n        let hash = System.Security.Cryptography.MD5.ComputeHash text\n        Some (hash.ToString())", "    match text with\n    | \"\" -> None\n    | _ -> Some (string_to_md5 text)", "    if text = \"\" then None\n    else\n        let hash = md5.ComputeHash text\n        Some (sprintf \"%s%s\" hash (text.ToCharArray() |> Array.map (fun c -> c.ToString())))", "    match text with\n    | \"\" -> None\n    | _ ->\n        let text = text.ToLowerInvariant()\n        let md5 = MD5.Create()\n        md5.ComputeHash text\n        |> Some", "    if text = \"\" then None\n    else Some (text.ToLowerInvariant())", "    if text = \"\" then None\n    else\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash text\n        |> Some", "    if text = \"\" then None\n    else Some(text.ToLowerInvariant())", "    if text = \"\" then None\n    else\n        let hash = System.Security.Cryptography.MD5.ComputeHash text\n        Some hash", "    if text = \"\" then None\n    else\n        let hash = System.Security.Cryptography.MD5.ComputeHash text\n        Some hash", "    match text with\n    | \"\" -> None\n    | _ ->\n        let md5 = System.Security.Cryptography.MD5.Create()\n        md5.ComputeHash(text.ToCharArray())\n        |> fun hash -> Some hash", "    match text with\n    | \"\" -> None\n    | _ ->\n        let hash = System.Security.Cryptography.MD5.Create().ComputeHash(text.ToCharArray())\n        Some hash"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}