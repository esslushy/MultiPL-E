{"name": "HumanEval_34_unique", "language": "fs", "prompt": "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nlet unique (l: int list): int list  = \n", "tests": "let test() = \n  let candidate = unique\n  assert (candidate [5; 3; 5; 2; 3; 3; 9; 0; 123] = [0; 2; 3; 5; 9; 123])\n  0\n\ntest()", "completions": ["    let rec loop i = \n        if i = l.Length then \n            l\n        else \n            let x = l.[i]\n            let y = l.[i+1]\n            if x < y then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec loop i =\n        let newList = \n            if i = 0 then l\n            else \n                let newList = l |> List.map (fun x -> x + 1)\n                loop (i - 1)\n        newList\n    loop 0", "    let rec aux acc = function\n        | [] -> acc\n        | x :: xs -> \n            if x = l.Head then aux (x :: acc) xs\n            else aux (x :: acc) xs\n    aux [] l", "    let rec loop i = \n        if i = l.Length then \n            l\n        else \n            let x = l.[i]\n            let y = l.[i]\n            if x < y then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec loop i = \n        if i = l.Length then \n            l\n        else\n            let x = l.[i]\n            let y = l.[i]\n            if x <> y then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec loop i = \n        if i = l.Length then \n            l\n        else \n            let j = l.[i]\n            if j <> i then \n                loop (i+1)\n            else \n                loop (i+1)\n    loop 0", "    let rec loop i = \n        if i = 0 then []\n        else \n            let newList = l |> List.filter (fun x -> x = i)\n            loop (i - 1)\n    loop 0", "    let rec loop i = \n        if i = l.Length then \n            l\n        else\n            let x = l.[i]\n            let y = l.[i+1]\n            if x < y then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | h::t -> \n            if h < acc then loop (h::acc)\n            else loop (h::acc)\n    loop []", "    let rec loop i = \n        if i = 0 then []\n        else \n            let x = l.[i-1]\n            let y = l.[i]\n            if x < y then loop (i-1)\n            else loop (i-1)\n    loop 0", "    let rec loop i = \n        if i = 0 then []\n        else \n            let newList = l |> List.map (fun x -> if x = i then i else loop (i+1))\n            loop (i+1)\n    loop 0", "    let rec loop i = \n        if i = l.Length then \n            l\n        else \n            let x = l.[i]\n            let y = l.[i]\n            if x < y then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec aux acc = function\n        | [] -> acc\n        | x::xs ->\n            let acc = List.fold (fun acc x -> if x = xs.[0] then acc else acc) acc xs\n            aux acc xs\n    aux [] l", "    let rec loop i = \n        if i = l.Length then l else \n        let x = l.[i]\n        let y = loop (i+1)\n        if x < y then loop (i+1)\n        else y\n    loop 0", "    let rec aux acc = function\n        | [] -> List.rev acc\n        | x::xs ->\n            let newAcc = List.rev (aux (x::acc) xs)\n            aux newAcc xs\n    aux [] l", "    let rec loop i = \n        if i = l.Length then \n            l\n        else \n            let x = l.[i]\n            let y = l.[i+1]\n            loop (i+1)\n    loop 0", "    let rec loop i = \n        if i = l.Length then \n            l\n        else\n            let x = l.[i]\n            let y = l.[i]\n            if x < y then loop (i+1)\n            else loop (i+1)\n    loop 0", "    let rec loop i = \n        if i = l.Length then \n            l\n        else \n            let x = l.[i]\n            let y = l.[i]\n            loop (i+1)\n    loop 0", "    let rec loop i = \n        if i < l.Length then \n            let x = l.[i]\n            if x < i then loop (i+1)\n            else loop (i+1)\n        else l\n    loop 0", "    let rec aux acc = function\n        | [] -> acc\n        | x :: xs ->\n            if x <> xs.[0] then aux (x :: acc) xs\n            else aux (x :: acc) xs\n    aux [] l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}