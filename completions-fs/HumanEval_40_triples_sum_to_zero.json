{"name": "HumanEval_40_triples_sum_to_zero", "language": "fs", "prompt": "//triples_sum_to_zero takes a list of integers as an input.\n// it returns True if there are three distinct elements in the list that\n// sum to zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n// >>> triples_sum_to_zero([1])\n// False\nlet triples_sum_to_zero (l: int list): bool  = \n", "tests": "let test() = \n  let candidate = triples_sum_to_zero\n  assert (candidate [1; 3; 5; 0] = false)\n  assert (candidate [1; 3; 5; -1] = false)\n  assert (candidate [1; 3; -2; 1] = true)\n  assert (candidate [1; 2; 3; 7] = false)\n  assert (candidate [1; 2; 5; 7] = false)\n  assert (candidate [2; 4; -5; 3; 9; 7] = true)\n  assert (candidate [1] = false)\n  assert (candidate [1; 3; 5; -100] = false)\n  assert (candidate [100; 3; 5; -100] = false)\n  0\n\ntest()", "completions": ["    let rec sum_to_zero_rec (l: int list) = \n        match l with \n        | [] -> true\n        | x::xs -> \n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) = \n        match l with \n        | [] -> true\n        | x::xs -> \n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec acc l = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | x when x = 0 -> acc\n            | x when x = 1 -> sum_to_zero_rec (acc + 1) xs\n            | x when x = 2 -> sum_to_zero_rec (acc + 2) xs\n            | x when x = 3 -> sum_to_zero_rec (acc + 3) xs\n            | x when x = 4 -> sum_to_zero_rec (acc + 4) xs\n            | x when x = 5 -> sum_to_zero_rec (acc + 5) xs\n            | x when x = 6 -> sum_to_zero_rec (acc + 6) xs\n            | x when x = 7 -> sum_to_zero_rec (acc + 7) xs\n            | x when x = 8 -> sum_to_zero_rec (acc + 8) xs\n            | x when x = 9 -> sum_to_zero_rec (acc + 9) xs\n            | x when x = 10 -> sum_to_zero_rec (acc + 10) xs\n            | x when x = 11 -> sum_to_zero_rec (acc + 11) xs\n            | x when x = 12 -> sum_to_zero_rec (acc + 12) xs\n            | x when x = 13 -> sum_to_zero_rec (acc + 13) xs\n            | x when x = 14 -> sum_to_zero_rec (acc + 14) xs\n            | x when x = 15 -> sum_to_zero_rec (acc + 15) xs\n            | x when x = 16 -> sum_to_zero_rec (acc + 16) xs\n            | x when x = 17 -> sum_to_zero_rec (acc + 17) xs\n            | x when x = 18 -> sum_to_zero_rec (acc + 18) xs\n            | x when x = 19 -> sum_to_zero_rec (acc + 19) xs\n            | x when x = 20 -> sum_to_zero_rec (acc + 20) xs\n            ", "    let rec sum_to_zero_rec acc l = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | x when x = 0 -> acc\n            | x when x = 1 -> sum_to_zero_rec acc xs\n            | x when x = 2 -> sum_to_zero_rec acc xs\n            | x when x = 3 -> sum_to_zero_rec acc xs\n            | x when x = 4 -> sum_to_zero_rec acc xs\n            | x when x = 5 -> sum_to_zero_rec acc xs\n            | x when x = 6 -> sum_to_zero_rec acc xs\n            | x when x = 7 -> sum_to_zero_rec acc xs\n            | x when x = 8 -> sum_to_zero_rec acc xs\n            | x when x = 9 -> sum_to_zero_rec acc xs\n            | x when x = 10 -> sum_to_zero_rec acc xs\n            | x when x = 11 -> sum_to_zero_rec acc xs\n            | x when x = 12 -> sum_to_zero_rec acc xs\n            | x when x = 13 -> sum_to_zero_rec acc xs\n            | x when x = 14 -> sum_to_zero_rec acc xs\n            | x when x = 15 -> sum_to_zero_rec acc xs\n            | x when x = 16 -> sum_to_zero_rec acc xs\n            | x when x = 17 -> sum_to_zero_rec acc xs\n            | x when x = 18 -> sum_to_zero_rec acc xs\n            | x when x = 19 -> sum_to_zero_rec acc xs\n            | x when x = 20 -> sum_to_zero_rec acc xs\n            | x when x = 21 -> sum_to_zero_rec acc xs\n            | x when x = 22 -> sum_to_zero_rec acc xs\n            | x when x = 23 -> sum_to_zero_rec acc xs\n            | x when x = 24 -> sum_to_zero_rec acc xs\n            | x when x", "    let rec sum_to_zero_rec (l: int list) = \n        match l with\n        | [] -> false\n        | x::xs -> \n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then loop (acc + 1) xs\n            else loop (acc + x) xs\n    loop 0 l", "    let rec sum_to_zero_loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            sum_to_zero_loop acc'\n    sum_to_zero_loop false", "    let rec sum_to_zero_rec (l: int list) = \n        match l with\n        | [] -> false\n        | x::xs -> \n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) = \n        match l with \n        | [] -> true\n        | x::xs -> \n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) =\n        match l with\n        | [] -> true\n        | x::xs ->\n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) = \n        match l with \n        | [] -> true\n        | x::xs -> \n            match x with \n            | 0 -> true\n            | _ -> sum_to_zero_rec xs\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) = \n        match l with \n        | [] -> true\n        | x::xs -> \n            match x with \n            | 0 -> sum_to_zero_rec xs\n            | _ -> sum_to_zero_rec xs\n    sum_to_zero_rec l", "    let rec sum_to_zero (l: int list) =\n        match l with\n        | [] -> true\n        | x::xs -> if x = 0 then sum_to_zero xs else False\n    sum_to_zero l", "    let rec sum_to_zero_list (l: int list) = \n        match l with\n        | [] -> false\n        | x::xs -> \n            if x = 0 then sum_to_zero_list xs\n            else sum_to_zero_list (xs@[x])\n    sum_to_zero_list l", "    let rec sum_to_zero_rec (l: int list) =\n        match l with\n        | [] -> true\n        | x::xs ->\n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@l)\n    sum_to_zero_rec l", "    let rec sum_to_zero_loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x = 0 then sum_to_zero_loop (acc + 1)\n            else sum_to_zero_loop (acc + x)\n    sum_to_zero_loop 0", "    let rec sum_to_zero_rec (l: int list) = \n        match l with\n        | [] -> false\n        | x::xs -> \n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec (xs@[x])\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) = \n        match l with\n        | [] -> true\n        | x::xs -> \n            match x with\n            | x when x = 0 -> false\n            | x -> sum_to_zero_rec xs\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) =\n        match l with\n        | [] -> true\n        | x::xs ->\n            if x = 0 then sum_to_zero_rec xs\n            else sum_to_zero_rec xs\n    sum_to_zero_rec l", "    let rec sum_to_zero_rec (l: int list) = \n        match l with \n        | [] -> false\n        | x::xs -> \n            match x with \n            | 0 -> true\n            | _ -> sum_to_zero_rec xs\n    sum_to_zero_rec l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}