{"name": "HumanEval_26_remove_duplicates", "language": "fs", "prompt": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nlet remove_duplicates (numbers: int list): int list  = \n", "tests": "let test() = \n  let candidate = remove_duplicates\n  assert (candidate [] = [])\n  assert (candidate [1; 2; 3; 4] = [1; 2; 3; 4])\n  assert (candidate [1; 2; 3; 2; 4; 3; 5] = [1; 4; 5])\n  0\n\ntest()", "completions": ["    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | x::xs -> \n            let new_numbers = remove_duplicates_numbers xs\n            if List.length new_numbers = List.length numbers then \n                new_numbers\n            else \n                remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | head :: tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            if head = new_numbers.Head then \n                new_numbers.Tail\n            else\n                remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | head :: tail ->\n            let new_numbers = List.filter (fun x -> x < head) numbers\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) (numbers_left: int list) =\n        match numbers_left with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = List.filter (fun x -> x <> head) numbers\n            remove_duplicates_numbers new_numbers tail\n    remove_duplicates_numbers numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            if head = new_numbers.Head then \n                new_numbers\n            else\n                remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) =\n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = remove_duplicates_numbers tail\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | head :: tail -> \n            let new_numbers = \n                if head = head then numbers\n                else remove_duplicates_numbers tail\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let new_numbers = remove_duplicates_numbers xs\n            if new_numbers = xs then numbers else remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = remove_duplicates_numbers tail\n            if head = new_numbers.Head then \n                new_numbers\n            else\n                remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            let new_numbers = remove_duplicates_numbers tail\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | x::xs -> \n            if x = xs.[0] then \n                remove_duplicates_numbers xs\n            else \n                let new_numbers = remove_duplicates_numbers xs\n                remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | head::tail ->\n            if head = head then numbers\n            else\n                let new_numbers = remove_duplicates_numbers tail\n                remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) (numbers_left: int list) = \n        match numbers with\n        | [] -> numbers_left\n        | head::tail ->\n            let new_numbers_left = remove_duplicates_numbers tail numbers_left\n            remove_duplicates_numbers new_numbers_left head\n    remove_duplicates_numbers numbers numbers_left", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            let new_numbers = \n                if head = head then \n                    numbers\n                else \n                    let new_numbers = \n                        if head = tail.Head then \n                            tail\n                        else \n                            remove_duplicates_numbers tail\n                    new_numbers\n            remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) (numbers_left: int list) = \n        match numbers with \n        | [] -> numbers_left\n        | head::tail -> \n            let new_numbers_left = remove_duplicates_numbers tail numbers_left\n            remove_duplicates_numbers new_numbers_left head\n    remove_duplicates_numbers numbers numbers_left", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with \n        | [] -> numbers\n        | head::tail -> \n            if head = head then numbers\n            else remove_duplicates_numbers tail\n    remove_duplicates_numbers numbers", "    let rec remove_duplicates_numbers (numbers: int list) = \n        match numbers with\n        | [] -> numbers\n        | x::xs -> \n            let new_numbers = remove_duplicates_numbers xs\n            if new_numbers = xs then numbers else remove_duplicates_numbers new_numbers\n    remove_duplicates_numbers numbers"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}