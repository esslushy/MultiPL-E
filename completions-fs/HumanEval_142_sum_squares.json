{"name": "HumanEval_142_sum_squares", "language": "fs", "prompt": "//\"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// For lst = [1,2,3] the output should be 6\n// For lst = []  the output should be 0\n// For lst = [-1,-5,2,-1,-5]  the output should be -126\nlet sum_squares (lst: int list): int  = \n", "tests": "let test() = \n  let candidate = sum_squares\n  assert (candidate [1; 2; 3] = 6)\n  assert (candidate [1; 4; 9] = 14)\n  assert (candidate [] = 0)\n  assert (candidate [1; 1; 1; 1; 1; 1; 1; 1; 1] = 9)\n  assert (candidate [-1; -1; -1; -1; -1; -1; -1; -1; -1] = -3)\n  assert (candidate [0] = 0)\n  assert (candidate [-1; -5; 2; -1; -5] = -126)\n  assert (candidate [-56; -99; 1; 0; -2] = 3030)\n  assert (candidate [-1; 0; 0; 0; 0; 0; 0; 0; -1] = 0)\n  assert (candidate [-16; -9; -2; 36; 36; 26; -20; 25; -40; 20; -4; 12; -26; 35; 37] = -14196)\n  assert (candidate [-1; -3; 17; -1; -15; 13; -1; 14; -14; -12; -5; 14; -14; 6; 13; 11; 16; 16; 4; 10] = -1448)\n  0\n\ntest()", "completions": ["    let rec sum_squares_loop (acc: int) (acc_sum: int) (acc_sum_sum: int) (acc_sum_sum_sum: int) (acc_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum: int) (acc_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_", "    let rec sum_squares_i (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let sum = sum_squares_i xs\n            sum + (x*x)\n    sum_squares_i lst", "    let rec loop i acc = \n        if i = lst.Length then acc\n        else loop (i+1) (acc + (lst.[i] * lst.[i]))\n    loop 0 0", "    let rec sum_squares_i (acc: int) (acc_i: int) (acc_i_i: int) (acc_i_i_i: int) (acc_i_i_i_i: int) (acc_i_i_i_i_i: int) (acc_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_", "    let rec sum_squares_i (i: int) (lst: int list) = \n        if i = 0 then 0\n        else\n            let sum = lst |> List.sumBy (fun x -> x * x)\n            sum_squares_i (i - 1) lst\n    sum_squares_i 0 lst", "    let rec sum_squares_i (i: int) (acc: int) = \n        if i = 0 then acc\n        else sum_squares_i (i-1) (acc + (acc * (i-1)))\n    sum_squares_i 0 0", "    let rec sum_squares_rec (acc: int) (lst: int list) = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            sum_squares_rec acc' xs\n    sum_squares_rec 0 lst", "    let rec sum_squares_rec (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let xs = x::xs\n            let rec sum_squares_rec_rec (lst: int list) = \n                match lst with\n                | [] -> 0\n                | x::xs -> \n                    let xs = x::xs\n                    let rec sum_squares_rec_rec_rec (lst: int list) = \n                        match lst with\n                        | [] -> 0\n                        | x::xs -> \n                            let xs = x::xs\n                            let rec sum_squares_rec_rec_rec_rec (lst: int list) = \n                                match lst with\n                                | [] -> 0\n                                | x::xs -> \n                                    let xs = x::xs\n                                    let rec sum_squares_rec_rec_rec_rec (lst: int list) = \n                                        match lst with\n                                        | [] -> 0\n                                        | x::xs -> \n                                            let xs = x::xs\n                                            let rec sum_squares_rec_rec_rec_rec (lst: int list) = \n                                                match lst with\n                                                | [] -> 0\n                                                | x::xs -> \n                                                    let xs = x::xs\n                                                    let rec sum_squares_rec_rec_rec_rec (lst: int list) = \n                                                        match lst with\n                                                        | [] -> 0\n                                                        | x::xs -> \n                                                            let xs = x::xs\n                                                            let rec sum_squares_rec_rec_rec_rec (lst: int list) = \n                                                                match lst with\n                                                                | [] -> 0\n                                                                | x::xs -> \n                                                                    let xs = x::xs\n                                                                    let rec sum_squares_rec_rec_rec_rec (lst: int list) = \n                                                                        match lst with\n                                                                        | [] -> 0\n                                                                        | x::xs -> \n                                                                            let xs = x::xs\n                                                                            ", "    let rec sum_squares_loop acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            sum_squares_loop acc' xs\n    sum_squares_loop 0 lst", "    let rec sum_squares_loop acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            let xs_sum = sum_squares_loop (acc + x) xs\n            sum_squares_loop (acc + x) xs_sum\n    sum_squares_loop 0 lst", "    let rec sum_squares_rec (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + (x + x) / 2\n            sum_squares_rec xs\n    sum_squares_rec lst", "    let rec loop (acc: int) (acc2: int) (acc3: int) (acc4: int) (acc5: int) (acc6: int) (acc7: int) (acc8: int) (acc9: int) (acc10: int) (acc11: int) (acc12: int) (acc13: int) (acc14: int) (acc15: int) (acc16: int) (acc17: int) (acc18: int) (acc19: int) (acc20: int) (acc21: int) (acc22: int) (acc23: int) (acc24: int) (acc25: int) (acc26: int) (acc27: int) (acc28: int) (acc29: int) (acc30: int) (acc31: int) (acc32: int) (acc33: int) (acc34: int) (acc35: int) (acc36: int) (acc37: int) (acc38: int) (acc39: int) (acc40: int) (acc41: int) (acc42: int) (acc43: int) (acc44: int) (acc45: int) (acc46: int) (acc47: int) (acc48: int) (acc49: int) (acc50: int) (acc51: int) (acc52: int) (acc53: int) (acc54: int) (acc55: int) (acc56: int) (acc57: int) (acc58: int) (acc59: int) (acc60: int) (acc61: int) (acc62: int) (acc63: int) (acc64: int) (acc65: int) (acc66: int) (acc67: int) (acc68: int) (acc69: int) (acc70: int) (acc71: int) (acc72: int) (acc73: int) (acc74: int) (acc75: int) (acc76: int) (acc77: int) (acc78: int) (acc79: int) (acc80: int) (acc81: int) (acc82: int) (acc83: int) (acc84: int) (acc85: int", "    let rec sum_squares_rec (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x :: xs -> \n            let sum = x + (x + x + x) / 2\n            sum_squares_rec xs\n    sum_squares_rec lst", "    let rec sum_squares_loop acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> \n            let sum = acc + x\n            sum_squares_loop (sum*sum) xs\n    sum_squares_loop 0 lst", "    let rec loop acc lst = \n        match lst with \n        | [] -> acc\n        | x::xs -> loop (acc + x) xs\n    loop 0 lst", "    let rec sum_squares_i (acc: int) (acc_i: int) (acc_i_i: int) (acc_i_i_i: int) (acc_i_i_i_i: int) (acc_i_i_i_i_i: int) (acc_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i_i_i: int) (acc_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_i_", "    let rec sum_squares_loop (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x :: xs -> \n            let sum = x + (x * x)\n            sum_squares_loop xs\n    sum_squares_loop lst", "    let rec sum_squares_loop acc (acc: int) (acc2: int) (acc3: int) (acc4: int) (acc5: int) (acc6: int) (acc7: int) (acc8: int) (acc9: int) (acc10: int) (acc11: int) (acc12: int) (acc13: int) (acc14: int) (acc15: int) (acc16: int) (acc17: int) (acc18: int) (acc19: int) (acc20: int) (acc21: int) (acc22: int) (acc23: int) (acc24: int) (acc25: int) (acc26: int) (acc27: int) (acc28: int) (acc29: int) (acc30: int) (acc31: int) (acc32: int) (acc33: int) (acc34: int) (acc35: int) (acc36: int) (acc37: int) (acc38: int) (acc39: int) (acc40: int) (acc41: int) (acc42: int) (acc43: int) (acc44: int) (acc45: int) (acc46: int) (acc47: int) (acc48: int) (acc49: int) (acc50: int) (acc51: int) (acc52: int) (acc53: int) (acc54: int) (acc55: int) (acc56: int) (acc57: int) (acc58: int) (acc59: int) (acc60: int) (acc61: int) (acc62: int) (acc63: int) (acc64: int) (acc65: int) (acc66: int) (acc67: int) (acc68: int) (acc69: int) (acc70: int) (acc71: int) (acc72: int) (acc73: int) (acc74: int) (acc75: int) (acc76: int) (acc77: int) (acc78: int) (acc79: int) (acc80: int) (acc81: int) (acc82: int) (acc83: int) (acc84: int", "    let rec sum_squares_i (lst: int list) = \n        match lst with\n        | [] -> 0\n        | x::xs -> \n            let sum = x + sum_squares_i xs\n            sum_squares_i xs\n    sum_squares_i lst", "    let rec sum_squares_loop acc lst = \n        match lst with\n        | [] -> acc\n        | x :: xs -> \n            let sum = acc + x * x\n            sum_squares_loop (sum + x) xs\n    sum_squares_loop 0 lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}