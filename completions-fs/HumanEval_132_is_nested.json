{"name": "HumanEval_132_is_nested", "language": "fs", "prompt": "//Create a function that takes a string as input which contains only square brackets.\n// The function should return True if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u00e2\u017e\u017e True\n// is_nested('[]]]]]]][[[[[]') \u00e2\u017e\u017e False\n// is_nested('[][]') \u00e2\u017e\u017e False\n// is_nested('[]') \u00e2\u017e\u017e False\n// is_nested('[[][]]') \u00e2\u017e\u017e True\n// is_nested('[[]][[') \u00e2\u017e\u017e True\nlet is_nested (string: string): bool  = \n", "tests": "let test() = \n  let candidate = is_nested\n  assert (candidate \"[[]]\" = true)\n  assert (candidate \"[]]]]]]][[[[[]\" = false)\n  assert (candidate \"[][]\" = false)\n  assert (candidate \"[]\" = false)\n  assert (candidate \"[[[[]]]]\" = true)\n  assert (candidate \"[]]]]]]]]]]\" = false)\n  assert (candidate \"[][][[]]\" = true)\n  assert (candidate \"[[]\" = false)\n  assert (candidate \"[]]\" = false)\n  assert (candidate \"[[]][[\" = true)\n  assert (candidate \"[[][]]\" = true)\n  assert (candidate \"\" = false)\n  assert (candidate \"[[[[[[[[\" = false)\n  assert (candidate \"]]]]]]]]\" = false)\n  0\n\ntest()", "completions": ["    let rec is_nested_rec (string: string) = \n        match string with\n        | \"\" -> false\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        ", "    string.Contains(\"[\") && string.Contains(\"]\")", "    let rec is_nested_rec (string: string) = \n        match string with\n        | [] -> false\n        | '[' -> true\n        | ']' -> true\n        | ']'.[0] -> is_nested_rec ']'.[0]\n        | ']'.[1] -> is_nested_rec ']'.[1]\n        | ']'.[2] -> is_nested_rec ']'.[2]\n        | ']'.[3] -> is_nested_rec ']'.[3]\n        | ']'.[4] -> is_nested_rec ']'.[4]\n        | ']'.[5] -> is_nested_rec ']'.[5]\n        | ']'.[6] -> is_nested_rec ']'.[6]\n        | ']'.[7] -> is_nested_rec ']'.[7]\n        | ']'.[8] -> is_nested_rec ']'.[8]\n        | ']'.[9] -> is_nested_rec ']'.[9]\n        | ']'.[10] -> is_nested_rec ']'.[10]\n        | ']'.[11] -> is_nested_rec ']'.[11]\n        | ']'.[12] -> is_nested_rec ']'.[12]\n        | ']'.[13] -> is_nested_rec ']'.[13]\n        | ']'.[14] -> is_nested_rec ']'.[14]\n        | ']'.[15] -> is_nested_rec ']'.[15]\n        | ']'.[16] -> is_nested_rec ']'.[16]\n        | ']'.[17] -> is_nested_rec ']'.[17]\n        | ']'.[18] -> is_nested_rec ']'.[18]\n        | ']'.[19] -> is_nested_rec ']'.[19]\n        | ']'.[20] -> is_nested_rec ']'.[20]\n        | ']'.[21] -> is_nested_rec ']'.[21]\n        | ']'.[22] -> is_nested_rec ']'.[22]\n        | ']'.[23] -> is_", "    string.Contains(\"[\") && string.Contains(\"]\")", "    let rec is_nested_rec (string: string) = \n        if string.StartsWith(\"[\") then \n            let rec is_nested_rec_rec (string: string) = \n                if string.EndsWith(\"][\") then \n                    let rec is_nested_rec_rec_rec (string: string) = \n                        if string.EndsWith(\"]\") then \n                            let rec is_nested_rec_rec_rec_rec (string: string) = \n                                if string.EndsWith(\"]\") then \n                                    let rec is_nested_rec_rec_rec_rec_rec (string: string) = \n                                        if string.EndsWith(\"]\") then \n                                            let rec is_nested_rec_rec_rec_rec_rec_rec (string: string) = \n                                                if string.EndsWith(\"]\") then \n                                                    let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                        if string.EndsWith(\"]\") then \n                                                            let rec is_nested_rec_rec_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                if string.EndsWith(\"]\") then \n                                                                    let rec is_nested_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                        if string.EndsWith(\"]\") then \n                                                                            let rec is_nested_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                                if string.EndsWith(\"]\") then \n                                                                                    let rec is_nested_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                                        if string.EndsWith(\"]\") then \n                                                                                            let rec is_nested_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec_rec (string: string) =", "    string.Split('[[') |> Array.exists (fun x -> x.Contains(\"]]\"))", "    let rec is_nested_rec (string: string) = \n        let rec is_nested_rec_rec (string: string) = \n            let rec is_nested_rec_rec_rec (string: string) = \n                let rec is_nested_rec_rec_rec_rec (string: string) = \n                    let rec is_nested_rec_rec_rec_rec_rec (string: string) = \n                        let rec is_nested_rec_rec_rec_rec_rec_rec (string: string) = \n                            let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                    let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                        let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                            let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                    let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                        let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                            let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                    let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                        let rec is_nested_rec_rec_rec_rec_rec_rec_rec (string: string) = \n                                                                            let rec is_nested_rec_rec_rec_rec_rec", "    string.Split(']')\n    |> Array.exists (fun x -> x.Length = 2)\n    |> not", "    string.Contains('[') && string.Contains(']') && string.Contains(']') && string.Contains(']')", "    let rec is_nested_rec (substring: string) = \n        if String.IsNullOrEmpty(substring) then true\n        elif String.IsNullOrEmpty(substring.Trim()) then false\n        else is_nested_rec(substring.Trim())\n    is_nested_rec(string)", "    let rec is_nested_rec (string: string) = \n        match string with\n        | \"()\" -> true\n        | \"[]\" -> true\n        | \"([]\" -> true\n        | \"[]\" -> true\n        | \"()\" -> true\n        | \"([])\" -> true\n        | \"([[])\" -> true\n        | \"()[]\" -> true\n        | \"([[])[]\" -> true\n        | \"()[][]\" -> true\n        | \"([[])[][]\" -> true\n        | \"([[])[][[])\" -> true\n        | \"([[])[][[]]\" -> true\n        | \"([[])[][[][])\" -> true\n        | \"([[])[][[][])\" -> true\n        | \"([[])[][[][][])\" -> true\n        | \"([[])[][[][][])\" -> true\n        | \"([[])[][[][][])\" -> true\n        | \"([[])[][[][][][])\" -> true\n        | \"([[])[][[][][][])\" -> true\n        | \"([[])[][[][][][][])\" -> true\n        | \"([[])[][[][][][][])\" -> true\n        | \"([[])[][[][][][][])\" -> true\n        | \"([[])[][[][][][][][])\" -> true\n        | \"([[])[][[][][][][][])\" -> true\n        | \"([[])[][[][][][][][][])\" -> true\n        | \"([[])[][[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][", "    string.Contains(\"[\") && string.Contains(\"]\") && string.Contains(\"]\")", "    string.Contains(\"[\") && string.Contains(\"]\") && string.Contains(\"]\")", "    string.Split(']') \n    |> Array.map (fun x -> x.Trim()) \n    |> Array.forall (fun x -> x.Contains(\"[\"]))", "    let rec is_nested_rec (subseq: string list) (bracket: string) = \n        match subseq with\n        | [] -> false\n        | head :: tail -> \n            if head = bracket then is_nested_rec tail (head.Trim())\n            else is_nested_rec tail (head.Trim())\n    is_nested_rec string []", "    let rec is_nested_rec (subseq: string seq) = \n        match seq { for s in seq { for c in s -> c } -> c } with\n        | [] -> false\n        | c :: rest -> \n            if c = '[' then is_nested_rec rest\n            else is_nested_rec rest\n    is_nested_rec string", "    let rec is_nested_rec (string: string) = \n        match string with\n        | \"()\" -> true\n        | \"[]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | _ -> false\n    is_nested_rec string", "    let rec is_nested_rec (str: string) = \n        match str with\n        | [] -> false\n        | '[' -> true\n        | ']' -> true\n        | ']'::'[' -> is_nested_rec ']'\n        | ']'::'['::'[] -> is_nested_rec ']'\n        | ']'::'['::'['] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'[]::'[] -> is_nested_rec ']'\n        | ']'::'['::'[']::'", "    let rec is_nested_rec (string: string) = \n        match string with \n        | \"()\" -> true\n        | \"()\" -> true\n        | \"(\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"[\" -> true\n        | \"]\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | \"(\" -> true\n        | \")\" -> true\n        | \"{\" -> true\n        | \"}\" -> true\n        | _ -> false\n    is_nested_rec string", "    let rec is_nested_rec (str: string) = \n        match str with \n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '}'\n        | '}' -> is_nested_rec '}'\n        | '[' -> is_nested_rec ']'\n        | ']' -> is_nested_rec ']'\n        | '{' -> is_nested_rec '"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}