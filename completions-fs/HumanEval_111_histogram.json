{"name": "HumanEval_111_histogram", "language": "fs", "prompt": "//Given a string representing a space separated lowercase letters, return a dictionary\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nlet histogram (test: string): Map<string, int>  = \n", "tests": "let test() = \n  let candidate = histogram\n  assert (candidate \"a b b a\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c a b\" = Map [(\"a\", 2); (\"b\", 2)])\n  assert (candidate \"a b c d g\" = Map [(\"a\", 1); (\"b\", 1); (\"c\", 1); (\"d\", 1); (\"g\", 1)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"b b b b a\" = Map [(\"b\", 4)])\n  assert (candidate \"r t g\" = Map [(\"r\", 1); (\"t\", 1); (\"g\", 1)])\n  assert (candidate \"\" = Map [])\n  assert (candidate \"a\" = Map [(\"a\", 1)])\n  0\n\ntest()", "completions": ["    let rec histogram (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc:", "    let rec histo (acc: Map<string, int>) (acc2: Map<string, int>) (acc3: Map<string, int>) (acc4: Map<string, int>) = \n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc2\n        | '\\n' -> acc3\n        | '\\r' -> acc4\n        | '\\r' -> acc4\n        | _ -> histo (acc + 1) (acc2 + 1) (acc3 + 1) (acc4 + 1)\n    histo Map.empty Map.empty Map.empty", "    let rec histogram (test: string) = \n        match test with\n        | ' ' -> Map.empty\n        | '\\t' -> Map.empty\n        | '\\n' -> Map.empty\n        | '\\r' -> Map.empty\n        | '\\r' -> Map.empty\n        | '\\n' -> Map.empty\n        | '\\b' -> Map.empty\n        | '\\f' -> Map.empty\n        | '\\b' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\a' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\n' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\f' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\r' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\n' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\t' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\r' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\t' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\n' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\t' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\r' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\n' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\t' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\r' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\n' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\t' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\r' -> Map.empty\n        | '\\v' -> Map.empty\n        | '\\n' -> Map.empty\n        ", "    let rec histogram (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc:", "    let rec histo acc =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n'", "    let rec histogram (acc: Map<string, int>) (acc' : Map<string, int>) (acc'' : Map<string, int>) (acc''' : Map<string, int>) (acc'''' : Map<string, int>) (acc''''' : Map<string, int>) (acc'''''' : Map<string, int>) =\n        match test with\n        | \"\" -> acc\n        | _ ->\n            let mutable acc = Map.empty\n            let mutable acc' = Map.empty\n            let mutable acc'' = Map.empty\n            let mutable acc''' = Map.empty\n            let mutable acc'''' = Map.empty\n            let mutable acc''''' = Map.empty\n            let mutable acc'''''' = Map.empty\n            let mutable acc''''''' = Map.empty\n            let mutable acc'''''''' = Map.empty\n            let mutable acc''''''''' = Map.empty\n            let mutable acc'''''''''' = Map.empty\n            let mutable acc'''''''''' = Map.empty\n            let mutable acc'''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable acc''''''''''' = Map.empty\n            let mutable", "    let rec histogram (acc: Map<string, int>) (accMap: Map<string, int>) (accMap2: Map<string, int>) =\n        match test with\n        | \"\" -> acc\n        | _ ->\n            let newAcc = accMap |> Map.add test acc\n            let newAcc2 = accMap2 |> Map.add test acc\n            histogram newAcc newAcc2\n    histogram Map.empty Map.empty", "    let rec histogram (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc:", "    let rec histogram (acc: Map<string, int>) (acc2: Map<string, int>) (acc3: Map<string, int>) (acc4: Map<string, int>) (acc5: Map<string, int>) (acc6: Map<string, int>) (acc7: Map<string, int>) (acc8: Map<string, int>) (acc9: Map<string, int>) (acc10: Map<string, int>) (acc11: Map<string, int>) (acc12: Map<string, int>) (acc13: Map<string, int>) (acc14: Map<string, int>) (acc15: Map<string, int>) (acc16: Map<string, int>) (acc17: Map<string, int>) (acc18: Map<string, int>) (acc19: Map<string, int>) (acc20: Map<string, int>) (acc21: Map<string, int>) (acc22: Map<string, int>) (acc23: Map<string, int>) (acc24: Map<string, int>) (acc25: Map<string, int>) (acc26: Map<string, int>) (acc27: Map<string, int>) (acc28: Map<string, int>) (acc29: Map<string, int>) (acc30: Map<string, int>) (acc31: Map<string, int>) (acc32: Map<string, int>) (acc33: Map<string, int>) (acc34: Map<string, int>) (acc35: Map<string, int>) (acc36: Map<string, int>) (acc37: Map<string, int>) (acc38: Map<string, int>) (acc39: Map<string, int>) (acc40: Map<string, int>) (acc41: Map<string, int>) (acc42: Map<string, int>) (acc43: Map<string, int>) (acc44: Map<string, int>) (acc45: Map<string, int>) (acc46: Map<string, int>) (acc47: Map<string, int>) (acc48: Map<string, int>) (acc49: Map<string, int>) (acc50: Map<string, int>) (acc51: Map<string,", "    let rec histo (acc: Map<string, int>) (acc2: Map<string, int>) (acc3: Map<string, int>) = \n        match test with\n        | \"\" -> acc\n        | _ ->\n            let test = test.ToLower()\n            let mutable acc = Map.empty\n            let mutable acc2 = Map.empty\n            let mutable acc3 = Map.empty\n            let mutable acc = Map.empty\n            let mutable acc2 = Map.empty\n            for i in 0..test.Length-1 do\n                let c = test.[i]\n                if acc.ContainsKey(c) then\n                    acc <- Map.add c (acc.[c] + 1) acc\n                elif acc2.ContainsKey(c) then\n                    acc2 <- Map.add c (acc2.[c] + 1) acc2\n                elif acc3.ContainsKey(c) then\n                    acc3 <- Map.add c (acc3.[c] + 1) acc3\n                else\n                    acc <- Map.add c 1 acc\n            acc\n    histo Map.empty Map.empty Map.empty", "    let rec histogram (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc:", "    let rec histogram (test: string) = \n        match test with\n        | \"\" -> Map.empty\n        | _ -> \n            let mutable count = 0\n            let mutable result = Map.empty\n            for letter in test.ToCharArray() do\n                if count = 0 then\n                    result <- Map.add letter count result\n                else\n                    let count = count + 1\n                    if count = 1 then\n                        result <- Map.add letter result\n                    else\n                        result <- Map.add letter (count - 1) result\n            result\n    histogram test", "    let rec histogram (acc: Map<string, int>) (accMap: Map<string, int>) (accMap2: Map<string, int>) =\n        match test with\n        | ' ' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\r' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\t' -> acc\n        | '\\n' -> acc\n        | '\\r' -> acc\n        | '\\", "    let rec histo (str: string) =\n        match str with\n        | \"\" -> Map.empty\n        | _ ->\n            let count = str.Length\n            let newMap = Map.add (str.[0]) (count + 1) histo\n            histo (str.Substring(1))\n    histo test", "    let rec histo (acc: Map<string, int>) (acc' : Map<string, int>) (acc'' : Map<string, int>) (acc''' : Map<string, int>) (acc'''' : Map<string, int>) (acc''''' : Map<string, int>) (acc'''''' : Map<string, int>) = \n        match test with\n        | \"\" -> acc\n        | _ -> \n            let test' = test.ToLower()\n            let acc' = Map.empty\n            let acc'' = Map.empty\n            let acc''' = Map.empty\n            let acc'''' = Map.empty\n            let acc''''' = Map.empty\n            let acc'''''' = Map.empty\n            let acc''''''' = Map.empty\n            let acc'''''''' = Map.empty\n            let acc''''''''' = Map.empty\n            let acc''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map.empty\n            let acc''''''''''' = Map", "    let rec histogram (acc: Map<string, int>) (accMap: Map<string, int>) (accMap2: Map<string, int>) (accMap3: Map<string, int>) (accMap4: Map<string, int>) (accMap5: Map<string, int>) (accMap6: Map<string, int>) (accMap7: Map<string, int>) (accMap8: Map<string, int>) (accMap9: Map<string, int>) (accMap10: Map<string, int>) (accMap11: Map<string, int>) (accMap12: Map<string, int>) (accMap13: Map<string, int>) (accMap14: Map<string, int>) (accMap15: Map<string, int>) (accMap16: Map<string, int>) (accMap17: Map<string, int>) (accMap18: Map<string, int>) (accMap19: Map<string, int>) (accMap20: Map<string, int>) (accMap21: Map<string, int>) (accMap22: Map<string, int>) (accMap23: Map<string, int>) (accMap24: Map<string, int>) (accMap25: Map<string, int>) (accMap26: Map<string, int>) (accMap27: Map<string, int>) (accMap28: Map<string, int>) (accMap29: Map<string, int>) (accMap30: Map<string, int>) (accMap31: Map<string, int>) (accMap32: Map<string, int>) (accMap33: Map<string, int>) (accMap34: Map<string, int>) (accMap35: Map<string, int>) (accMap36: Map<string, int>) (accMap37: Map<string, int>) (accMap38: Map<string, int>) (accMap39: Map<string, int>) (accMap40: Map<string, int>) (accMap41: Map<string, int>) (accMap42: Map<string, int>) (accMap43: Map<string, int>) (accMap44: Map<string, int>) (accMap45: Map<string, int>) (accMap46", "    let rec histo (acc: Map<string, int>) (acc2: Map<string, int>) (acc3: Map<string, int>) (acc4: Map<string, int>) (acc5: Map<string, int>) (acc6: Map<string, int>) (acc7: Map<string, int>) (acc8: Map<string, int>) (acc9: Map<string, int>) (acc10: Map<string, int>) (acc11: Map<string, int>) (acc12: Map<string, int>) (acc13: Map<string, int>) (acc14: Map<string, int>) (acc15: Map<string, int>) (acc16: Map<string, int>) (acc17: Map<string, int>) (acc18: Map<string, int>) (acc19: Map<string, int>) (acc20: Map<string, int>) (acc21: Map<string, int>) (acc22: Map<string, int>) (acc23: Map<string, int>) (acc24: Map<string, int>) (acc25: Map<string, int>) (acc26: Map<string, int>) (acc27: Map<string, int>) (acc28: Map<string, int>) (acc29: Map<string, int>) (acc30: Map<string, int>) (acc31: Map<string, int>) (acc32: Map<string, int>) (acc33: Map<string, int>) (acc34: Map<string, int>) (acc35: Map<string, int>) (acc36: Map<string, int>) (acc37: Map<string, int>) (acc38: Map<string, int>) (acc39: Map<string, int>) (acc40: Map<string, int>) (acc41: Map<string, int>) (acc42: Map<string, int>) (acc43: Map<string, int>) (acc44: Map<string, int>) (acc45: Map<string, int>) (acc46: Map<string, int>) (acc47: Map<string, int>) (acc48: Map<string, int>) (acc49: Map<string, int>) (acc50: Map<string, int>) (acc51: Map<string,", "    let rec histogram (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc: Map<string, int>) (acc:", "    let rec histogram (test: string) = \n        match test with\n        | \"\" -> Map.empty\n        | _ -> \n            let test = test.ToLower()\n            let count = \n                match test with\n                | \"a\" -> 1\n                | \"b\" -> 1\n                | \"c\" -> 1\n                | _ -> 0\n            let newMap = Map.add test count histogram\n            histogram newMap\n    histogram test", "    let rec histogram (acc: Map<string, int>) (acc2: Map<string, int>) (acc3: Map<string, int>) (acc4: Map<string, int>) (acc5: Map<string, int>) (acc6: Map<string, int>) (acc7: Map<string, int>) (acc8: Map<string, int>) (acc9: Map<string, int>) (acc10: Map<string, int>) (acc11: Map<string, int>) (acc12: Map<string, int>) (acc13: Map<string, int>) (acc14: Map<string, int>) (acc15: Map<string, int>) (acc16: Map<string, int>) (acc17: Map<string, int>) (acc18: Map<string, int>) (acc19: Map<string, int>) (acc20: Map<string, int>) (acc21: Map<string, int>) (acc22: Map<string, int>) (acc23: Map<string, int>) (acc24: Map<string, int>) (acc25: Map<string, int>) (acc26: Map<string, int>) (acc27: Map<string, int>) (acc28: Map<string, int>) (acc29: Map<string, int>) (acc30: Map<string, int>) (acc31: Map<string, int>) (acc32: Map<string, int>) (acc33: Map<string, int>) (acc34: Map<string, int>) (acc35: Map<string, int>) (acc36: Map<string, int>) (acc37: Map<string, int>) (acc38: Map<string, int>) (acc39: Map<string, int>) (acc40: Map<string, int>) (acc41: Map<string, int>) (acc42: Map<string, int>) (acc43: Map<string, int>) (acc44: Map<string, int>) (acc45: Map<string, int>) (acc46: Map<string, int>) (acc47: Map<string, int>) (acc48: Map<string, int>) (acc49: Map<string, int>) (acc50: Map<string, int>) (acc51: Map<string,"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}