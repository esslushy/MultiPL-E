{"name": "HumanEval_6_parse_nested_parens", "language": "fs", "prompt": "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n// [2, 3, 1, 3]\nlet parse_nested_parens (paren_string: string): int list  = \n", "tests": "let test() = \n  let candidate = parse_nested_parens\n  assert (candidate \"(()()) ((())) () ((())()())\" = [2; 3; 1; 3])\n  assert (candidate \"() (()) ((())) (((())))\" = [1; 2; 3; 4])\n  assert (candidate \"(()(())((())))\" = [4])\n  0\n\ntest()", "completions": ["    let rec parse_parens (paren_string: string) : int list = \n        match paren_string with \n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"(())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        |", "    let rec parse_nested_parens_rec (paren_string: string) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()\" -> []\n        |let rec parse_nested_parens_rec (paren_string: string) : int list = \n        match paren_string with \n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_nested_parens_rec (paren_string: string) (paren_depth: int): int list = \n        let rec parse_nested_parens_rec_rec (paren_string: string) (paren_depth: int): int list = \n            match paren_string with\n            | \"\" -> []\n            | \"()\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            | \"(())\" -> []\n            |", "    let rec parse_nested_parens_rec (paren_string: string) (nesting: int): int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_nested_parens' (paren_string: string) (paren_levels: int list) : int list = \n        match paren_string with\n        | \"\" -> paren_levels\n        | _ -> \n            let paren_levels' = List.map parse_nested_parens' paren_string\n            paren_levels'\n    parse_nested_parens' paren_string []", "    let rec parse_nested_parens_rec (paren_string: string) (paren_level: int) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        |", "    let rec parse_nested_parens_rec (paren_string: string) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" ->", "    let rec parse_nested_parens' (paren_string: string) (paren_level: int) (paren_list: int list) : int list = \n        match paren_string with\n        | \"\" -> paren_list\n        | _ -> \n            match paren_level with\n            | 0 -> \n                match paren_list with\n                | [] -> []\n                | _ -> \n                    match paren_list with\n                    | [] -> []\n                    | _ -> \n                        match paren_list with\n                        | [] -> []\n                        | _ -> \n                            match paren_list with\n                            | [] -> []\n                            | _ -> \n                                match paren_list with\n                                | [] -> []\n                                | _ -> \n                                    match paren_list with\n                                    | [] -> []\n                                    | _ -> \n                                        match paren_list with\n                                        | [] -> []\n                                        | _ -> \n                                            match paren_list with\n                                            | [] -> []\n                                            | _ -> \n                                                match paren_list with\n                                                | [] -> []\n                                                | _ -> \n                                                    match paren_list with\n                                                    | [] -> []\n                                                    | _ -> \n                                                        match paren_list with\n                                                        | [] -> []\n                                                        | _ -> \n                                                            match paren_list with\n                                                            | [] -> []\n                                                            | _ -> \n                                                                match paren_list with\n                                                                | [] -> []\n                                                                | _ -> \n                                                                    match paren_list with\n                                                                    | [] -> []\n                                                                    | _ -> \n                                                                        match paren_list with\n                                                                        | [] -> []\n                                                                        | _ -> \n                                                                            match paren_list with\n                                                                            | [] -> []\n                                                                            | _ -> \n                                                                                match paren_list with\n                                                                                | [] -> []\n                                                                                | _ -> \n                                                                                    match paren_list with\n                                                                                    | [] -> []\n                                                                                    | _ -> \n                                                                                        match paren_list with\n                                                                                        | [] -> []\n                               ", "    let rec parse_nested_parens' (paren_string: string) (parens: int list) = \n        match parens with \n        | [] -> []\n        | (parens_list, parens_list_list)::rest -> \n            let parens_list_list_list = parse_nested_parens' paren_string parens_list_list\n            let parens_list_list_list_list = parse_nested_parens' paren_string parens_list_list_list\n            (parens_list_list, parens_list_list_list_list)\n    parse_nested_parens' paren_string []", "    let rec parse_parens (paren_string: string) = \n        match paren_string with \n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()\" -> []\n        |let rec parse_nested_parens_rec (paren_string: string) (paren_levels: int list) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_nested_parens_rec (paren_string: string) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"(()())\" -> []\n        | \"(()())()\" -> []\n        | \"(()())()()\" -> []\n        | \"(()())()()()\" -> []\n        | \"(()())()()()()\" -> []\n        | \"(()())()()()()()\" -> []\n        | \"(()())()()()()()()\" -> []\n        | \"(()())()()()()()()()\" -> []\n        | \"(()())()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"(()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_nested_parens_rec (paren_string: string) (paren_levels: int list) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        ", "    let rec parse_parens (paren_string: string) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" ->", "    let rec parse_nested_parens_rec (paren_string: string) (paren_level: int): int list = \n        let paren_level = paren_level + 1\n        let paren_string = paren_string.Trim()\n        let paren_level = paren_level + 1\n        match paren_string with\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_nested_parens' (paren_string: string) (paren_level: int): int list = \n        match paren_string with \n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"()()()\" -> []\n        | \"()()()()\" -> []\n        | \"()()()()()\" -> []\n        | \"()()()()()()\" -> []\n        | \"()()()()()()()\" -> []\n        | \"()()()()()()()()\" -> []\n        | \"()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()\" -> []\n        | \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()", "    let rec parse_parens (paren_string: string) = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        ", "    let rec parse_parens (paren_string: string): int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []\n        | \"(())\" -> []", "    let rec parse_nested_parens_rec (paren_string: string) : int list = \n        match paren_string with\n        | \"\" -> []\n        | \"()\" -> []\n        | \"()()\" -> []\n        | \"(())\" -> []\n        | \"(()())\" -> []\n        | \"(()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n        | \"(()()())\" -> []\n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}