{"name": "HumanEval_104_unique_digits", "language": "fs", "prompt": "//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nlet unique_digits (x: int list): int list  = \n", "tests": "let test() = \n  let candidate = unique_digits\n  assert (candidate [15; 33; 1422; 1] = [1; 15; 33])\n  assert (candidate [152; 323; 1422; 10] = [])\n  assert (candidate [12345; 2033; 111; 151] = [111; 151])\n  assert (candidate [135; 103; 31] = [31; 135])\n  0\n\ntest()", "completions": ["    let rec loop acc x = \n        match x with\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (x :: acc) xs\n            else loop (x :: acc) xs\n    loop [] x", "    let rec loop acc x = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 x", "    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            let acc = List.filter (fun y -> y % 2 = 0) acc\n            loop (acc@[x])\n    loop []", "    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x :: xs -> \n            let new_acc = \n                match acc with \n                | [] -> []\n                | x :: acc -> \n                    if x % 2 = 0 then \n                        acc\n                    else \n                        loop (x :: acc)\n            loop new_acc\n    loop []", "    let rec loop acc x = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x", "    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc x = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 x", "    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 x", "    let rec loop acc x = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 x", "    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc x = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 x", "    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0", "    let rec loop acc x = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x", "    let rec loop acc x = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 x", "    let rec loop acc x = \n        match x with \n        | [] -> acc\n        | x :: xs -> \n            if x % 2 = 0 then loop (acc + x) xs\n            else loop (acc + x) xs\n    loop 0 x", "    let rec loop acc x = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (x::acc) xs\n            else loop (x::acc) xs\n    loop [] x", "    let rec loop acc x = \n        match x with \n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + 1) xs\n            else loop (acc + 1) xs\n    loop 0 x", "    let rec loop acc = \n        match x with\n        | [] -> acc\n        | x::xs -> \n            if x % 2 = 0 then loop (acc + x)\n            else loop (acc + x)\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}