{"name": "HumanEval_98_count_upper", "language": "fs", "prompt": "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// count_upper('aBCdEf') returns 1\n// count_upper('abcdefg') returns 0\n// count_upper('dBBE') returns 0\nlet count_upper (s: string): int  = \n", "tests": "let test() = \n  let candidate = count_upper\n  assert (candidate \"aBCdEf\" = 1)\n  assert (candidate \"abcdefg\" = 0)\n  assert (candidate \"dBBE\" = 0)\n  assert (candidate \"B\" = 0)\n  assert (candidate \"U\" = 1)\n  assert (candidate \"\" = 0)\n  assert (candidate \"EEEE\" = 2)\n  0\n\ntest()", "completions": ["    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n        count <- count + 1\n    count", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n        count <- count + 1\n    count", "    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n        count <- count + 1\n    count", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n        count <- count + 1\n    count", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n        count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'A' || s.[i] = 'a' then count <- count + 1\n        if s.[i] = 'B' || s.[i] = 'b' then count <- count + 1\n        if s.[i] = 'C' || s.[i] = 'c' then count <- count + 1\n        if s.[i] = 'D' || s.[i] = 'd' then count <- count + 1\n        if s.[i] = 'E' || s.[i] = 'e' then count <- count + 1\n        if s.[i] = 'F' || s.[i] = 'f' then count <- count + 1\n        if s.[i] = 'G' || s.[i] = 'g' then count <- count + 1\n        if s.[i] = 'H' || s.[i] = 'h' then count <- count + 1\n        if s.[i] = 'I' || s.[i] = 'i' then count <- count + 1\n        if s.[i] = 'J' || s.[i] = 'j' then count <- count + 1\n        if s.[i] = 'K' || s.[i] = 'k' then count <- count + 1\n        if s.[i] = 'L' || s.[i] = 'l' then count <- count + 1\n        if s.[i] = 'M' || s.[i] = 'm' then count <- count + 1\n        if s.[i] = 'N' || s.[i] = 'n' then count <- count + 1\n        if s.[i] = 'O' || s.[i] = 'o' then count <- count + 1\n        if s.[i] = 'P' || s.[i] = 'p' then count <- count + 1\n        if s.[i] = 'Q' || s.[i] = 'q' then count <- count + 1\n        if s.[i] = 'R' || s.[i] = 'r' then count <- count + 1\n        if s.[i] = 'S' || s.[i] = 's' then count <- count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if Char.IsUpper s.[i] then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if Char.IsUpper s.[i] then\n            count <- count + 1\n    count", "    let mutable i = 0\n    let mutable count = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n        count <- count + 1\n    count", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if Char.IsUpper s.[i] then\n            count <- count + 1\n    count", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'A' || s.[i] = 'E' || s.[i] = 'I' || s.[i] = 'O' || s.[i] = 'U' then\n            count <- count + 1\n    count", "    let mutable i = 0\n    while i < s.Length && Char.IsUpper s.[i] do\n        i <- i + 1\n    i", "    let mutable count = 0\n    for i = 0 to s.Length - 1 do\n        if s.[i] = 'A' || s.[i] = 'a' then\n            count <- count + 1\n        elif s.[i] = 'B' || s.[i] = 'b' then\n            count <- count + 1\n        elif s.[i] = 'C' || s.[i] = 'c' then\n            count <- count + 1\n        elif s.[i] = 'D' || s.[i] = 'd' then\n            count <- count + 1\n        elif s.[i] = 'E' || s.[i] = 'e' then\n            count <- count + 1\n        elif s.[i] = 'F' || s.[i] = 'f' then\n            count <- count + 1\n        elif s.[i] = 'G' || s.[i] = 'g' then\n            count <- count + 1\n        elif s.[i] = 'H' || s.[i] = 'h' then\n            count <- count + 1\n        elif s.[i] = 'I' || s.[i] = 'i' then\n            count <- count + 1\n        elif s.[i] = 'J' || s.[i] = 'j' then\n            count <- count + 1\n        elif s.[i] = 'K' || s.[i] = 'k' then\n            count <- count + 1\n        elif s.[i] = 'L' || s.[i] = 'l' then\n            count <- count + 1\n        elif s.[i] = 'M' || s.[i] = 'm' then\n            count <- count + 1\n        elif s.[i] = 'N' || s.[i] = 'n' then\n            count <- count + 1\n        elif s.[i] = 'O' || s.[i] = 'o' then\n            count <- count + 1\n        elif s.[i] = 'P' || s.[i] = 'p' then\n            count <- count + 1\n        elif s.[i] = 'Q' || s.[i] = 'q' then\n            count <- count + 1"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}