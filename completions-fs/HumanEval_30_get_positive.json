{"name": "HumanEval_30_get_positive", "language": "fs", "prompt": "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nlet get_positive (l: int list): int list  = \n", "tests": "let test() = \n  let candidate = get_positive\n  assert (candidate [-1; -2; 4; 5; 6] = [4; 5; 6])\n  assert (candidate [5; 3; -5; 2; 3; 3; 9; 0; 123; 1; -10] = [5; 3; 2; 3; 3; 9; 123; 1])\n  assert (candidate [-1; -2] = [])\n  assert (candidate [] = [])\n  0\n\ntest()", "completions": ["    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (acc@[x])\n            else loop (acc@[x])\n    loop []", "    let rec loop acc = \n        match l with\n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (x::acc)\n            else loop (x::acc)\n    loop []", "    let rec get_positive_list (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            if x > 0 then \n                get_positive_list xs\n            else \n                get_positive_list xs\n    get_positive_list l", "    let rec get_positive_list (l: int list): int list = \n        match l with \n        | [] -> []\n        | x::xs -> \n            if x > 0 then \n                get_positive_list xs\n            else \n                get_positive_list xs\n    get_positive_list l", "    let rec loop i = \n        if i = 0 then []\n        else \n            let n = l.[i]\n            if n >= 0 then loop (i - 1)\n            else loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i = 0 then []\n        else \n            let n = l.[i-1]\n            if n < 0 then loop (i-1)\n            else loop (i-1) @ [n]\n    loop 0", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (x::acc)\n            else loop (x::acc)\n    loop []", "    let rec get_positive_list (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            if x < 0 then get_positive_list xs\n            else get_positive_list xs\n    get_positive_list l", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            match x with \n            | 0 -> loop (acc::acc)\n            | x -> loop (acc::acc)\n    loop []", "    let rec loop i = \n        if i < 0 then []\n        else if i = 0 then []\n        else loop (i - 1)\n    loop (List.length l)", "    let rec loop acc = function\n        | [] -> acc\n        | x::xs -> loop (x::acc) xs\n    loop [] l", "    let rec loop i = \n        if i < 0 then []\n        else \n            let n = l.[i]\n            if n > 0 then loop (i - 1)\n            else loop (i + 1)\n    loop 0", "    let rec loop i = \n        if i = 0 then []\n        else \n            let n = l.[i]\n            if n < 0 then loop (i - 1)\n            else loop (i - 1)\n    loop 0", "    let rec loop (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            if x > 0 then \n                loop xs\n            else \n                loop xs\n    loop l", "    let rec loop i = \n        if i < 0 then []\n        else \n            let n = l.[i]\n            if n > 0 then loop (i - 1)\n            else loop (i + 1)\n    loop 0", "    let rec loop (l: int list) = \n        match l with \n        | [] -> []\n        | x::xs -> \n            if x > 0 then \n                loop xs\n            else \n                loop xs\n    loop l", "    let rec loop i = \n        if i < 0 then []\n        else \n            let res = l |> List.filter (fun x -> x < i)\n            loop (i - res.Length)\n    loop l", "    let rec loop acc = \n        match l with \n        | [] -> acc\n        | x::xs -> \n            if x > 0 then loop (x::acc)\n            else loop (x::acc)\n    loop []", "    let rec get_positive_list (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            let new_list = x::xs\n            get_positive_list new_list\n    get_positive_list l", "    let rec get_positive_list (l: int list) = \n        match l with\n        | [] -> []\n        | x::xs -> \n            if x = 0 then get_positive_list xs\n            else get_positive_list (x::xs)\n    get_positive_list l"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}