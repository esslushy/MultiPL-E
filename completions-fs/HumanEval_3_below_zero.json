{"name": "HumanEval_3_below_zero", "language": "fs", "prompt": "//You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return True. Otherwise it should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nlet below_zero (operations: int list): bool  = \n", "tests": "let test() = \n  let candidate = below_zero\n  assert (candidate [] = false)\n  assert (candidate [1; 2; -3; 1; 2; -3] = false)\n  assert (candidate [1; 2; -4; 5; 6] = true)\n  assert (candidate [1; -1; 2; -2; 5; -5; 4; -4] = false)\n  assert (candidate [1; -1; 2; -2; 5; -5; 4; -5] = true)\n  assert (candidate [1; -2; 2; -2; 5; -5; 4; -4] = true)\n  0\n\ntest()", "completions": ["    let rec below_zero_rec (operations: int list) = \n        match operations with \n        | [] -> false\n        | x::xs -> if x < 0 then below_zero_rec xs else below_zero_rec xs\n    below_zero_rec operations", "    let rec below_zero_rec (operations: int list) (balance: int) = \n        match balance with\n        | zero when balance < 0 -> false\n        | _ -> \n            operations\n            |> List.filter (fun x -> x < 0)\n            |> List.forall (fun x -> below_zero_rec (x :: operations) (x + 1))\n    below_zero_rec operations 0", "    let rec below_zero_rec (operations: int list) (balance: int) = \n        match balance with\n        | zero when balance < 0 -> false\n        | _ ->\n            let balance = balance - 1\n            if balance < 0 then below_zero_rec (operations @ [0]) balance\n            else true\n    below_zero_rec operations 0", "    operations |> List.forall (fun x -> x = 0)", "    let rec below_zero_loop (operations: int list) = \n        match operations with\n        | [] -> false\n        | head :: tail -> \n            if head < 0 then \n                false\n            else\n                below_zero_loop tail\n    below_zero_loop operations", "    let rec below_zero_loop acc = \n        match acc with\n        | [] -> false\n        | x::xs -> if x = 0 then below_zero_loop xs else below_zero_loop (x::acc)\n    below_zero_loop []", "    let rec below_zero_rec (operations: int list) (balance: int): bool = \n        match balance with\n        | zero when balance < 0 -> false\n        | zero -> below_zero_rec (operations @ [zero]) (balance - 1)\n        | _ -> true\n    below_zero_rec operations 0", "    let rec below_zero_rec (operations: int list) = \n        match operations with\n        | [] -> false\n        | x :: xs -> \n            if x < 0 then false\n            else below_zero_rec xs\n    below_zero_rec operations", "    let rec below_zero_rec (operations: int list) (balance: int): bool = \n        match balance with\n        | zero when balance = 0 -> true\n        | _ -> below_zero_rec (operations @ [balance]) (balance - 1)\n    below_zero_rec operations [0]", "    let rec below_zero_rec (operations: int list) (balance: int): bool = \n        match balance with\n        | zero when balance = 0 -> true\n        | _ -> \n            operations\n            |> List.filter (fun x -> x < zero)\n            |> List.forall (fun x -> below_zero_rec (x :: operations) (x - 1))\n    below_zero_rec operations [0]", "    let rec below_zero_rec (operations: int list) = \n        match operations with\n        | [] -> false\n        | x::xs -> if x < 0 then below_zero_rec xs else below_zero_rec xs\n    below_zero_rec operations", "    let rec below_zero_rec (operations: int list) (balance: int): bool = \n        match balance with\n        | zero when balance = 0 -> true\n        | _ ->\n            let balance = List.sum(operations)\n            if balance < zero then below_zero_rec (operations @ [balance]) (balance - 1)\n            else false\n    below_zero_rec operations [0]", "    let rec below_zero_rec (operations: int list) (balance: int): bool = \n        match balance with\n        | zero when balance < 0 -> false\n        | _ ->\n            let balance_to_check = balance - 1\n            if balance_to_check < 0 then below_zero_rec (operations @ [balance_to_check]) (balance_to_check - 1)\n            else below_zero_rec (operations @ [balance_to_check]) (balance_to_check + 1)\n    below_zero_rec operations [0]", "    let rec below_zero_rec (operations: int list) (balance: int): bool = \n        match balance with\n        | zero when balance < 0 -> false\n        | _ ->\n            let balance_to_check = balance - 1\n            if balance_to_check < 0 then below_zero_rec (operations @ [0]) balance_to_check\n            else below_zero_rec (operations @ [0]) balance_to_check\n    below_zero_rec operations 0", "    let rec below_zero_rec (operations: int list) (balance: int): bool = \n        match balance with\n        | zero when balance < 0 -> below_zero_rec (operations @ [zero]) (balance - 1)\n        | zero -> below_zero_rec (operations @ [zero]) (balance + 1)\n        | _ -> false\n    below_zero_rec operations 0", "    let rec below_zero_rec (operations: int list) = \n        match operations with \n        | [] -> false\n        | head::tail -> \n            if head < 0 then false\n            else below_zero_rec tail\n    below_zero_rec operations", "    let rec below_zero_rec (operations: int list) = \n        match operations with\n        | [] -> false\n        | x :: xs -> \n            if x < 0 then false\n            else below_zero_rec xs\n    below_zero_rec operations", "    let rec below_zero_loop acc = \n        match acc with\n        | [] -> false\n        | x :: xs -> if x < 0 then below_zero_loop xs else false\n    below_zero_loop operations", "    let rec below_zero_rec (operations: int list) = \n        match operations with\n        | [] -> false\n        | x::xs -> if x < 0 then below_zero_rec xs else below_zero_rec xs\n    below_zero_rec operations", "    let rec below_zero_rec (operations: int list) = \n        match operations with\n        | [] -> true\n        | x::xs -> \n            if x < 0 then false\n            else below_zero_rec xs\n    below_zero_rec operations"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}