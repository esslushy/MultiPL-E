{"name": "HumanEval_9_rolling_max", "language": "fs", "prompt": "//From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nlet rolling_max (numbers: int list): int list  = \n", "tests": "let test() = \n  let candidate = rolling_max\n  assert (candidate [] = [])\n  assert (candidate [1; 2; 3; 4] = [1; 2; 3; 4])\n  assert (candidate [4; 3; 2; 1] = [4; 4; 4; 4])\n  assert (candidate [3; 2; 3; 100; 3] = [3; 3; 3; 100; 100])\n  0\n\ntest()", "completions": ["    let rec loop (numbers: int list) (current: int) =\n        match numbers with\n        | [] -> current\n        | x::xs ->\n            let new_max = max current x\n            loop xs new_max\n    loop numbers 0", "    let rec loop (numbers: int list) (current: int) = \n        if current = n then numbers else \n        let new_numbers = List.append numbers [current]\n        loop new_numbers (current + 1)\n    loop numbers 0", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let max = List.max xs\n            let new_numbers = List.take max xs\n            loop new_numbers\n    loop numbers", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | head::tail ->\n            let new_numbers = List.rev (List.tail numbers)\n            if head > tail then loop new_numbers\n            else loop (List.tail numbers)\n    loop numbers", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | x :: xs -> \n            let max = List.max xs\n            let new_numbers = List.map (fun y -> if y > max then y else max) xs\n            loop new_numbers\n    loop numbers", "    let rec loop (numbers: int list) =\n        match numbers with\n        | [] -> []\n        | x::xs ->\n            let max = List.max xs\n            let new_numbers = List.take max xs\n            loop new_numbers\n    loop numbers", "    let rec loop n =\n        if n = 0 then []\n        else\n            let max_element = numbers |> List.max\n            let new_numbers = numbers |> List.skip (n-1)\n            let new_numbers = new_numbers |> List.map (fun x -> x - max_element)\n            loop (n-1) @ new_numbers\n    loop 0", "    let rec loop (numbers: int list) (current: int) =\n        if current = numbers.Length then\n            numbers\n        else\n            let new_numbers = List.append numbers [current]\n            loop new_numbers (current + 1)\n    loop numbers 0", "    let rec loop (numbers: int list) (current: int) =\n        match numbers with\n        | [] -> current\n        | x::xs ->\n            let new_current = current + x\n            if new_current > n then loop xs new_current\n            else loop xs new_current\n    loop numbers 0", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let max = List.max xs\n            let new_numbers = List.take max xs\n            loop new_numbers\n    loop numbers", "    let rec loop (numbers: int list) =\n        match numbers with\n        | [] -> []\n        | head::tail ->\n            let max = head\n            let new_numbers = List.filter (fun i -> i < max) numbers\n            loop new_numbers\n    loop numbers", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let new_numbers = List.rev xs\n            if List.exists (fun y -> y = x) new_numbers then\n                loop new_numbers\n            else\n                loop new_numbers\n    loop numbers", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let new_numbers = \n                match x with\n                | 1 -> [x]\n                | 2 -> [x; x]\n                | 3 -> [x; x; x]\n                | 4 -> [x; x; x; x]\n                | _ -> failwith \"Invalid number\"\n            loop new_numbers\n    loop numbers", "    let rec loop n = \n        let max = numbers |> List.max\n        let new_numbers = numbers |> List.filter (fun x -> x > max)\n        if new_numbers.Length = 0 then \n            numbers\n        else\n            loop (n + 1)\n    loop n", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let new_max = List.max xs\n            if new_max = x then loop xs\n            else loop (new_max::xs)\n    loop numbers", "    let rec loop (numbers: int list) = \n        match numbers with\n        | [] -> []\n        | x::xs -> \n            let max = List.max xs\n            let new_numbers = List.take max xs\n            loop new_numbers\n    loop numbers", "    let rec loop (numbers: int list) (current: int): int list = \n        match numbers with\n        | [] -> []\n        | head :: tail -> \n            let new_max = max head numbers\n            loop tail (current + new_max)\n    loop numbers 0", "    let rec loop (numbers: int list) (current: int) =\n        match numbers with\n        | [] -> current\n        | head::tail ->\n            let new_current = current + head\n            if new_current > nth_max(current) then\n                loop tail new_current\n            else\n                loop tail new_current\n    loop numbers 0", "    let rec loop n = \n        if n = 0 then []\n        else \n            let max_element = numbers |> List.maxBy (fun x -> x)\n            let new_numbers = numbers |> List.filter (fun x -> x <= max_element)\n            loop (n - 1) @ new_numbers\n    loop n", "    let rec loop (numbers: int list) =\n        match numbers with\n        | [] -> []\n        | x::xs ->\n            let max = List.max xs\n            if max = x then loop xs\n            else loop (xs@[max])\n    loop numbers"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}