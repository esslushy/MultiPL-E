{"name": "HumanEval_51_remove_vowels", "language": "fs", "prompt": "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels('')\n// ''\n// >>> remove_vowels('abcdef')\n// 'bcdf'\n// >>> remove_vowels('aaaaa')\n// ''\n// >>> remove_vowels('aaBAA')\n// 'B'\n// >>> remove_vowels('zbcd')\n// 'zbcd'\nlet remove_vowels (text: string): string  = \n", "tests": "let test() = \n  let candidate = remove_vowels\n  assert (candidate \"\" = \"\")\n  assert (candidate \"abcdef\\nghijklm\" = \"bcdf\\nghjklm\")\n  assert (candidate \"fedcba\" = \"fdcb\")\n  assert (candidate \"eeeee\" = \"\")\n  assert (candidate \"acBAA\" = \"cB\")\n  assert (candidate \"EcBOO\" = \"cB\")\n  assert (candidate \"ybcd\" = \"ybcd\")\n  0\n\ntest()", "completions": ["    let vowels = ['a'..'z']\n    let vowels_count = List.length vowels\n    let vowels_length = List.length vowels\n    let vowels_length_minus_1 = List.length vowels - 1\n    let vowels_length_minus_2 = List.length vowels - 2\n    let vowels_length_minus_3 = List.length vowels - 3\n    let vowels_length_minus_4 = List.length vowels - 4\n    let vowels_length_minus_5 = List.length vowels - 5\n    let vowels_length_minus_6 = List.length vowels - 6\n    let vowels_length_minus_7 = List.length vowels - 7\n    let vowels_length_minus_8 = List.length vowels - 8\n    let vowels_length_minus_9 = List.length vowels - 9\n    let vowels_length_minus_10 = List.length vowels - 10\n    let vowels_length_minus_11 = List.length vowels - 11\n    let vowels_length_minus_12 = List.length vowels - 12\n    let vowels_length_minus_13 = List.length vowels - 13\n    let vowels_length_minus_14 = List.length vowels - 14\n    let vowels_length_minus_15 = List.length vowels - 15\n    let vowels_length_minus_16 = List.length vowels - 16\n    let vowels_length_minus_17 = List.length vowels - 17\n    let vowels_length_minus_18 = List.length vowels - 18\n    let vowels_length_minus_19 = List.length vowels - 19\n    let vowels_length_minus_20 = List.length vowels - 20\n    let vowels_length_minus_21 = List.length vowels - 21\n    let vowels_length_minus_22 = List.length vowels - 22\n    let vowels_length_minus_23 = List.length vowels - 23\n    let vowels_length_minus_24 = List.length vowels - 24\n    let vowels_length_minus_25 = List.length vowels -", "    text.ToLower()\n    |> Seq.filter (fun c -> not (c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' ||", "    text.ToLower()\n    |> Seq.filter (fun c -> not (c = '_'))\n    |> Seq.map (fun c -> c.ToString())\n    |> Seq.toList\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List.rev\n    |> List", "    text.ToLower()\n    |> Seq.filter (fun c -> not (c = '_'))\n    |> Seq.map (fun c -> c.ToString())\n    |> Seq.toList", "    let vowels = ['a'..'z']\n    let vowels_to_remove = ['A'..'Z']\n    let vowels_to_remove_list = ['a'..'z']\n    let vowels_to_remove_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list_list = ['a'..'z']\n    let vowels_to_remove_list_list_list_list_list = ['A'..'Z']\n    let vowels_to_remove_list_list_list_list", "    let vowels = ['a'..'z']\n    let vowels_to_remove = \n        vowels\n        |> List.filter (fun x -> not (List.contains x vowels))\n    let text_without_vowels = text.Trim()\n    if text_without_vowels.Length <> text.Length then\n        failwith \"text_without_vowels.Length <> text.Length\"\n    let text_without_vowels_with_vowels = \n        text_without_vowels.ToCharArray()\n        |> Array.map (fun x -> x.ToString())\n        |> String.concat \"\"\n    let text_without_vowels_with_vowels_without_vowels = \n        text_without_vowels.ToCharArray()\n        |> Array.filter (fun x -> not (List.contains x vowels))\n    let text_without_vowels_with_vowels_without_vowels_with_vowels = \n        text_without_vowels.ToCharArray()\n        |> Array.filter (fun x -> not (List.contains x vowels))\n    let text_without_vowels_with_vowels_with_vowels_with_vowels = \n        text_without_vowels.ToCharArray()\n        |> Array.filter (fun x -> not (List.contains x vowels))\n    let text_without_vowels_with_vowels_with_vowels_with_vowels = \n        text_without_vowels.ToCharArray()\n        |> Array.filter (fun x -> not (List.contains x vowels))\n    let text_without_vowels_with_vowels_with_vowels_with_vowels = \n        text_without_vowels.ToCharArray()\n        |> Array.filter (fun x -> not (List.contains x vowels))\n    let text_without_vowels_with_vowels_with_vowels_with_vowels = \n        text", "    text.ToLowerInvariant()\n    |> Seq.filter (fun c -> not (c = '_'))\n    |> Seq.map (fun c -> c.ToString())\n    |> Seq.toList", "    text.ToLower().Trim().ToCharArray()\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (fun c -> c.ToString())\n    |> Array.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Array.map (", "    let vowels = ['a'..'z']\n    let vowels_count = List.length vowels\n    let vowels_count_minus_one = List.length vowels - 1\n    let vowels_count_plus_one = List.length vowels + 1\n    let vowels_count_minus_two = List.length vowels - 2\n    let vowels_count_plus_three = List.length vowels + 3\n    let vowels_count_minus_four = List.length vowels - 4\n    let vowels_count_plus_five = List.length vowels + 5\n    let vowels_count_minus_six = List.length vowels - 6\n    let vowels_count_plus_seven = List.length vowels + 7\n    let vowels_count_minus_eight = List.length vowels - 8\n    let vowels_count_plus_nine = List.length vowels + 9\n    let vowels_count_minus_ten = List.length vowels - 10\n    let vowels_count_plus_eleven = List.length vowels + 11\n    let vowels_count_minus_twelve = List.length vowels - 12\n    let vowels_count_plus_thirteen = List.length vowels + 13\n    let vowels_count_minus_fourteen = List.length vowels - 15\n    let vowels_count_plus_fifteen = List.length vowels + 16\n    let vowels_count_minus_seventeen = List.length vowels - 17\n    let vowels_count_plus_eight = List.length vowels + 18\n    let vowels_count_minus_nine = List.length vowels - 19\n    let vowels_count_plus_ten = List.length vowels + 20\n    let vowels_count_minus_eleven = List.length vowels - 21\n    let vowels_count_plus_twelve = List.length vowels + 22\n    let vowels_count_minus_thirteen = List.length vowels - 23\n    let vowels_count_plus_four = List.length vowels + 24\n    let vowels_count_minus_fifteen = List.length vowels - 25\n", "    text.ToLowerInvariant()\n    |> Seq.filter (fun c -> not (c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = '", "    text.ToLower()\n    |> Seq.filter (fun c -> not (c = '_'))\n    |> Seq.map (fun c -> c.ToString())\n    |> Seq.toList", "    text.ToLower()\n    |> Seq.filter (fun c -> not (c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' ||", "    let vowels = ['a'..'z']\n    let vowels_to_remove = ['A'..'Z']\n    let vowels_to_remove_list = List.map (fun v -> v.ToString()) vowels\n    let vowels_to_remove_list_list = List.map (fun v -> v.ToString()) vowels_to_remove\n    let remove_vowels_list = List.map (fun v -> v.ToString()) text\n    let remove_vowels_list_list = List.map (fun v -> v.ToString()) remove_vowels_list\n    let remove_vowels_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list_list\n    let remove_vowels_list_list_list_list = List.map (fun v -> v.ToString()) remove_vowels_list_list_list_", "    text.ToLower()\n    |> Seq.filter (fun c -> not (c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'b' || c = 'r' || c = 's' || c = 'd' || c = 'e' || c = 'n' || c = 'm' || c = 'n' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'b' || c = 'r' || c = 's' || c = 'd' || c = 'e' || c = 'n' || c = 'm' || c = 'n' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'b' || c = 'r' || c = 's' || c = 'd' || c = 'e' || c = 'n' || c = 'm' || c = 'n' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'b' || c = 'r' || c = 's' || c = 'd' || c = 'e' || c = 'n' || c = 'm' || c = 'n' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'b' || c = 'r' || c = 's' || c = 'd' || c = 'e' || c = 'n' || c = 'm' || c = 'n' || c = 'o' || c = 'u' || c = 'y' || c = 'z' ||", "    let vowels = ['a'..'z']\n    let vowels_to_remove = \n        vowels \n        |> List.filter (fun v -> not (List.contains v vowels))\n    if List.isEmpty vowels_to_remove then text\n    else\n        let vowels_to_remove_str = \n            vowels_to_remove\n            |> List.map (fun v -> v.ToString())\n        let text_to_remove = text.ToLower()\n        let text_to_remove_str = text_to_remove.ToLower()\n        if text_to_remove_str = text_to_remove_str then text\n        else\n            let vowels_to_remove_str = \n                vowels_to_remove\n                |> List.map (fun v -> v.ToString())\n            let text_to_remove_str = text_to_remove.ToLower()\n            if text_to_remove_str = text_to_remove_str then text\n            else\n                let vowels_to_remove_str = \n                    vowels_to_remove\n                    |> List.map (fun v -> v.ToString())\n                let text_to_remove_str = text_to_remove.ToLower()\n                if text_to_remove_str = text_to_remove_str then text\n                else\n                    let vowels_to_remove_str = \n                        vowels_to_remove\n                        |> List.map (fun v -> v.ToString())\n                    let text_to_remove_str = text_to_remove.ToLower()\n                    if text_to_remove_str = text_to_remove_str then text\n                    else\n                        let vowels_to_remove_str = \n                            vowels_to_remove\n                            |> List.map (fun v -> v.ToString())\n                        let text_to_remove_str = text_to_remove.ToLower()\n                        if text_to_remove_str = text_to_remove_str then text\n                        else\n                            let vowels_to_remove_str = \n                                vowels_to_remove\n                                |>", "    text.ToLower()\n    |> Seq.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> Seq.toList\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List.map (fun c -> c.ToString())\n    |> List.filter (fun c -> not (Char.IsLetterOrDigit(c)))\n    |> List", "    let vowels = ['a'..'z']\n    let vowels_to_remove = \n        vowels\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (v.Contains(\"\")))\n        |> List.map (fun v -> v.ToString())", "    text.ToLowerInvariant()\n    |> Seq.filter (fun c -> not (c = '_'))\n    |> Seq.map (fun c -> c.ToString())\n    |> Seq.toList", "    text.ToLower()\n    |> Seq.filter (fun c -> not (c = 'a' || c = 'e' || c = 'i' || c = 'o' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' || c = 'y' || c = 'z' || c = 'a' || c = 'c' || c = 'v' || c = 'm' || c = 'n' || c = 'r' || c = 's' || c = 't' || c = 'u' ||", "    let vowels = ['a'..'z']\n    let vowels_to_remove = \n        vowels\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n    if vowels_to_remove.Length > 0 then\n        vowels_to_remove\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n        |> List.filter (fun v -> not (List.contains v vowels))\n        |> List.map (fun v -> v.ToString())\n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}