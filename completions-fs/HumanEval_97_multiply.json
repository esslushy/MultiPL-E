{"name": "HumanEval_97_multiply", "language": "fs", "prompt": "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should return 20.\nlet multiply (a: int) (b: int): int  = \n", "tests": "let test() = \n  let candidate = multiply\n  assert (candidate 148 412 = 16)\n  assert (candidate 19 28 = 72)\n  assert (candidate 2020 1851 = 0)\n  assert (candidate 14 -15 = 20)\n  assert (candidate 76 67 = 42)\n  assert (candidate 17 27 = 49)\n  assert (candidate 0 1 = 0)\n  assert (candidate 0 0 = 0)\n  0\n\ntest()", "completions": ["    let rec multiply' (a: int) (b: int) : int = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiply' (a - 1) (b - 1)\n    multiply' a b", "    let rec multiplyRec (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiplyRec (a - 1) (b - 1)\n    multiplyRec a b", "    let rec multiply' acc x y = \n        if x = 0 then acc\n        else multiply' (x - 1) (y - 1)\n    multiply' 0 a b", "    let rec multiply' (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiply' (a - 1) (b - 1)\n    multiply' a b", "    let mutable result = 0\n    for i = 0 to a - 1 do\n        result <- result + (b * (a - i))\n    result", "    let rec multiplyRec (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiplyRec (a - 1) (b - 1)\n    multiplyRec a b", "    let rec multiplyRec (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiplyRec (a - 1) (b - 1)\n    multiplyRec a b", "    let rec multiply' acc x y =\n        if x = 0 then\n            acc\n        else\n            multiply' (acc * y) (x - 1) (y - 1)\n    multiply' 0 a b", "    let rec multiply (acc: int) (acc2: int) (acc3: int) = \n        if a = 0 then acc\n        elif b = 0 then acc2\n        elif a < b then multiply (multiply (acc) (acc2) (acc3)) (a - b)\n        else multiply (multiply (acc) (acc2) (acc3)) (a - b)\n    multiply a b", "    let rec multiply (acc: int) (acc2: int) (acc3: int) = \n        if a = 0 then acc\n        elif b = 0 then acc2\n        elif a < b then multiply (acc + a) (acc2 + b) (acc3 + a)\n        else multiply (acc2 + b) (acc + a) (acc3 + b)\n    multiply a b", "    let mutable result = 0\n    for i = 0 to a - 1 do\n        result <- result * b\n    result", "    let rec multiply (acc: int) (acc2: int) (acc3: int) (acc4: int) (acc5: int) (acc6: int) (acc7: int) (acc8: int) (acc9: int) (acc10: int) (acc11: int) (acc12: int) (acc13: int) (acc14: int) (acc15: int) (acc16: int) (acc17: int) (acc18: int) (acc19: int) (acc20: int) (acc21: int) (acc22: int) = \n    if a = 0 then acc\n    elif b = 0 then acc\n    elif a < b then multiply (multiply (a) (b - 1) (acc2) (acc3) (acc4) (acc5) (acc6) (acc7) (acc8) (acc9) (acc10) (acc11) (acc12) (acc13) (acc14) (acc15) (acc16) (acc17) (acc18) (acc19) (acc20) (acc21) (acc22))\n    else multiply (multiply (b) (a - 1) (acc2) (acc3) (acc4) (acc5) (acc6) (acc7) (acc8) (acc9) (acc10) (acc11) (acc12) (acc13) (acc14) (acc15) (acc16) (acc17) (acc18) (acc19) (acc20) (acc21) (acc22))\n    \nlet multiply2 (a: int) (b: int) = \n    let rec multiply2 (acc: int) (acc2: int) (acc3: int) (acc4: int) (acc5: int) (acc6: int) (acc7: int) (acc8: int) (acc9: int) (acc10: int) (acc11: int) (acc12: int) (acc13: int) (acc14: int) (acc15: int) (acc16: int) (acc17: int) (acc18: int) (acc19: int) (acc20: int) (acc21: int) = \n    ", "    let rec multiplyRec (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiplyRec (a - 1) (b - 1)\n    multiplyRec a b", "    let rec multiply (acc: int) (acc2: int) (acc3: int) (acc4: int) (acc5: int) (acc6: int) (acc7: int) (acc8: int) (acc9: int) (acc10: int) (acc11: int) (acc12: int) (acc13: int) (acc14: int) (acc15: int) (acc16: int) (acc17: int) (acc18: int) (acc19: int) (acc20: int) (acc21: int) (acc22: int) = \n    if a = 0 then acc\n    elif b = 0 then acc\n    elif a % b = 0 then multiply acc2 acc3 acc4 acc5 acc6 acc7 acc8 acc9 acc10 acc11 acc12 acc13 acc14 acc15 acc16 acc17 acc18 acc19 acc20 acc21 acc22\n    else multiply acc2 acc3 acc4 acc5 acc6 acc7 acc8 acc9 acc10 acc11 acc12 acc13 acc14 acc15 acc16 acc17 acc18 acc19 acc20 acc21 acc22", "    let rec multiply (acc: int) (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiply (acc + a) (b - a)\n    multiply a b", "    let rec multiplyRec (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiplyRec (a - 1) (b - 1)\n    multiplyRec a b", "    let mutable product = 0\n    for i = 0 to a - 1 do\n        product <- product + (b * i)\n    product", "    let rec multiply (acc: int) (acc2: int) (acc3: int) (acc4: int) (acc5: int) (acc6: int) (acc7: int) (acc8: int) (acc9: int) (acc10: int) (acc11: int) (acc12: int) (acc13: int) (acc14: int) (acc15: int) (acc16: int) (acc17: int) (acc18: int) (acc19: int) (acc20: int) (acc21: int) (acc22: int) (acc23: int) (acc24: int) (acc25: int) (acc26: int) (acc27: int) (acc28: int) (acc29: int) (acc30: int) (acc31: int) = \n    let mutable acc = acc\n    let mutable acc2 = acc2\n    let mutable acc3 = acc3\n    let mutable acc4 = acc4\n    let mutable acc5 = acc5\n    let mutable acc6 = acc6\n    let mutable acc7 = acc7\n    let mutable acc8 = acc8\n    let mutable acc9 = acc9\n    let mutable acc10 = acc10\n    let mutable acc11 = acc11\n    let mutable acc12 = acc12\n    let mutable acc13 = acc13\n    let mutable acc14 = acc14\n    let mutable acc15 = acc15\n    let mutable acc16 = acc16\n    let mutable acc17 = acc17\n    let mutable acc18 = acc18\n    let mutable acc19 = acc19\n    let mutable acc20 = acc20\n    let mutable acc21 = acc21\n    let mutable acc22 = acc22\n    let mutable acc23 = acc23\n    let mutable acc24 = acc24\n    let mutable acc25 = acc25\n    let mutable acc26 = acc26\n    let mutable acc27 = acc27\n    let mutable acc28 = acc28\n    let mutable acc29 = acc29\n    let mutable acc30 = acc30\n    let mutable acc31 = acc31\n    let mutable acc32 = acc32\n    let", "    let rec multiplyRec (a: int) (b: int) = \n        if a = 0 then b\n        else multiplyRec (a - 1) (b - 1)\n    multiplyRec a b", "    let rec multiplyRec (a: int) (b: int) = \n        if a = 0 then b\n        elif b = 0 then a\n        else multiplyRec (a - 1) (b - 1)\n    multiplyRec a b"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}