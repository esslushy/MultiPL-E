{"name": "HumanEval_130_tri", "language": "fs", "prompt": "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nlet tri (n: int): int list  = \n", "tests": "let test() = \n  let candidate = tri\n  assert (candidate 3 = [1; 3; 2; 8])\n  assert (candidate 4 = [1; 3; 2; 8; 3])\n  assert (candidate 5 = [1; 3; 2; 8; 3; 15])\n  assert (candidate 6 = [1; 3; 2; 8; 3; 15; 4])\n  assert (candidate 7 = [1; 3; 2; 8; 3; 15; 4; 24])\n  assert (candidate 8 = [1; 3; 2; 8; 3; 15; 4; 24; 5])\n  assert (candidate 9 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35])\n  assert (candidate 20 = [1; 3; 2; 8; 3; 15; 4; 24; 5; 35; 6; 48; 7; 63; 8; 80; 9; 99; 10; 120; 11])\n  assert (candidate 0 = [1])\n  assert (candidate 1 = [1; 3])\n  0\n\ntest()", "completions": ["    let rec fib n = \n        if n = 0 then []\n        else \n            let x = n / 2\n            let y = n - x\n            if y = 0 then [x]\n            else fib (y - 1) @ (fib (y - 2)) @ (fib (y - 3))\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        elif n % 2 = 0 then [n / 2]\n        else fib (n / 2) @ [n / 2]\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        elif n % 2 = 0 then [n / 2]\n        else fib (n / 2) @ [n / 2]\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        elif n % 2 = 0 then [1]\n        else fib (n / 2) @ (fib (n / 2)) @ (fib (n / 2))\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        elif n % 2 = 0 then [n/2]\n        else fib (n/2) @ (n/2 :: fib (n/2))\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        elif n = 1 then [1]\n        elif n = 2 then [1; 2]\n        elif n = 3 then [1; 2; 3]\n        elif n = 4 then [1; 2; 3; 4]\n        else fib (n - 1) @ fib (n - 2)\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        else\n            let x = n / 2\n            let y = n - x\n            if y = 0 then [x]\n            else fib (y - 1) @ (fib (y - 2)) @ (fib (y - 3))\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        else \n            let (x, y) = (n / 2, n % 2)\n            let (x', y') = fib (x + y)\n            (x', y') :: fib (x' + y')\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        else \n            let n' = n / 2\n            if n' = 1 then [n]\n            else fib (n' - 1) @ (fib (n' - 2)) @ (fib (n' - 3))\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        else \n            let x = n / 2\n            let y = n - x\n            if y = 0 then [x]\n            else fib (x + y)\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        elif n % 2 = 0 then [n/2]\n        else fib (n/2) @ (fib (n/2) @ [n/2])\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        elif n = 1 then [1]\n        elif n = 2 then [1; 2]\n        elif n = 3 then [1; 2; 3]\n        elif n = 4 then [1; 2; 3; 4]\n        else fib (n - 1) @ (fib (n - 2)) @ (fib (n - 3)) @ (fib (n - 4))\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        elif n % 2 = 0 then [n / 2]\n        else fib (n / 2) @ [n / 2]\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        else\n            let x = n / 2\n            let y = n - x\n            if y = 0 then [x]\n            else fib (y - 1) @ (fib (y - 2)) @ (fib (y - 3))\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        else\n            let x = n / 2\n            if n % 2 = 0 then fib (x + 1)\n            else fib (x + 1) @ [x]\n    fib n", "    let rec fib n =\n        if n = 0 then []\n        elif n % 2 = 0 then [n / 2]\n        else fib (n / 2) @ [n / 2]\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        elif n = 1 then [1]\n        elif n = 2 then [1; 2]\n        elif n = 3 then [1; 2; 3]\n        else fib (n - 1) @ fib (n - 2)\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        else \n            let (n1, n2) = (n - 1, n - 2)\n            if n1 = 0 then [n2]\n            else fib (n1 - 1) @ fib (n2 - 1)\n    fib n", "    let rec fib n = \n        if n < 0 then []\n        elif n = 0 then []\n        else \n            let x = n / 2\n            let y = n - x\n            if y < 0 then fib (x + y)\n            else fib (x + y) @ fib (y + x)\n    fib n", "    let rec fib n = \n        if n = 0 then []\n        elif n % 2 = 0 then [n/2]\n        else fib (n/2) @ [n/2]\n    fib n"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}