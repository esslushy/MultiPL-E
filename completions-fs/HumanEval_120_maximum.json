{"name": "HumanEval_120_maximum", "language": "fs", "prompt": "//Given an array arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nlet maximum (arr: int list) (k: int): int list  = \n", "tests": "let test() = \n  let candidate = maximum\n  assert (candidate [-3; -4; 5] 3 = [-4; -3; 5])\n  assert (candidate [4; -4; 4] 2 = [4; 4])\n  assert (candidate [-3; 2; 1; 2; -1; -2; 1] 1 = [2])\n  assert (candidate [123; -123; 20; 0; 1; 2; -3] 3 = [2; 20; 123])\n  assert (candidate [-123; 20; 0; 1; 2; -3] 4 = [0; 1; 2; 20])\n  assert (candidate [5; 15; 0; 3; -13; -8; 0] 7 = [-13; -8; 0; 0; 3; 5; 15])\n  assert (candidate [-1; 0; 2; 5; 3; -10] 2 = [3; 5])\n  assert (candidate [1; 0; 5; -7] 1 = [5])\n  assert (candidate [4; -4] 2 = [-4; 4])\n  assert (candidate [-10; 10] 2 = [-10; 10])\n  assert (candidate [1; 2; 3; -23; 243; -400; 0] 0 = [])\n  0\n\ntest()", "completions": ["    let rec max k = \n        match k with\n        | 0 -> []\n        | _ -> \n            let max = arr |> List.maxBy (fun x -> x)\n            max :: max (k-1)\n    max k", "    let rec max (arr: int list) (k: int): int list =\n        match arr with\n        | [] -> []\n        | x :: xs ->\n            if x > k then max xs (k - 1)\n            else xs\n    max arr k", "    let rec max (arr: int list) (k: int): int list =\n        match arr with\n        | [] -> [k]\n        | h::t -> if k > h then max t (k-1) else max (h::t) (k-1)\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | h::t -> if k > h then max t (k-1)\n                    else max (h::t) (k-1)\n    max arr k", "    let len = List.length arr\n    if len <= k then arr\n    else\n        let rec max_k (arr: int list) (k: int) =\n            if k <= len then\n                if arr.[k] > arr.[len - 1 - k] then arr\n                else max_k (arr.[k] :: arr) (k - 1)\n            else\n                max_k (arr :: arr) (k - 1)\n        max_k arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | h::t -> if k > h then max t (k-1) else max t (k-1)\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with \n        | [] -> []\n        | x :: xs -> \n            if x > k then max xs (k - 1)\n            else xs\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with \n        | [] -> []\n        | x::xs -> \n            if x > k then max xs (k-1)\n            else x::max xs (k-1)\n    max arr k", "    let rec max (arr: int list) (k: int): int list =\n        match arr with\n        | [] -> []\n        | h::t -> if k > h then max t (k-1)\n                   else max (h::t) (k-1)\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | x :: xs -> if x > k then max xs (k - 1)\n                      else xs\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | x :: xs -> \n            if x > k then max xs (k - 1)\n            else max xs (k)\n    max arr k", "    let rec max (arr: int list) (k: int): int list =\n        match arr with\n        | [] -> [k]\n        | x::xs ->\n            if x > k then max xs (k-1)\n            else max xs (k)\n    max arr k", "    let rec max (arr: int list) (k: int): int list =\n        match arr with\n        | [] -> []\n        | x::xs ->\n            if x > k then x::max xs (k-1)\n            else x::xs\n    max arr k", "    let len = List.length arr\n    if len <= k then arr\n    else\n        let max = List.max arr\n        let min = List.min arr\n        [min .. max]", "    let rec max (arr: int list) (k: int): int list =\n        match arr with\n        | [] -> []\n        | x::xs ->\n            if k > x then max xs (k-1)\n            else max xs (k-1)\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | x::xs -> if x > k then max xs (k-1)\n                    else max xs (x-k)\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | h::t -> if k > h then max t (k-1)\n                else max (h::t) (k-1)\n    max arr k", "    let len = List.length arr\n    if len <= k then arr\n    else\n        let rec loop i =\n            if i <= k then\n                let max = List.max arr\n                if i < k then loop (i + 1)\n                else loop (max + 1)\n            else\n                let max = List.max arr\n                loop (max + 1)\n        loop 0", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | x::xs -> if x > k then max xs (k-1)\n                    else max xs (k)\n    max arr k", "    let rec max (arr: int list) (k: int): int list = \n        match arr with\n        | [] -> []\n        | x::xs ->\n            if k <= x then\n                max xs (k-1)\n            else\n                max xs (k-1)\n    max arr k"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}