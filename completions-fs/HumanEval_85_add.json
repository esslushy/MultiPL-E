{"name": "HumanEval_85_add", "language": "fs", "prompt": "//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nlet add (lst: int list): int  = \n", "tests": "let test() = \n  let candidate = add\n  assert (candidate [4; 88] = 88)\n  assert (candidate [4; 5; 6; 7; 2; 122] = 122)\n  assert (candidate [4; 0; 6; 7] = 0)\n  assert (candidate [4; 4; 6; 8] = 12)\n  0\n\ntest()", "completions": ["    let even = List.filter (fun x -> x % 2 = 0) lst\n    let odd = List.filter (fun x -> x % 2 = 1) lst\n    List.fold (fun acc x -> acc + x) 0 even\n    |> List.sum", "    let evens = lst |> List.filter (fun x -> x % 2 = 0)\n    let odds = lst |> List.filter (fun x -> x % 2 = 1)\n    let evens = evens |> List.map (fun x -> x + evens.[0])\n    let odds = odds |> List.map (fun x -> x + odds.[0])\n    evens @ odds", "    let rec add' acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x + acc) xs\n    add' 0 lst", "    let rec add' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst", "    let rec add' acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst", "    let rec add' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> \n            let acc' = acc + x\n            add' acc' xs\n    add' 0 lst", "    let evens = lst |> List.filter (fun x -> x % 2 = 0)\n    let odds = lst |> List.filter (fun x -> x % 2 = 1)\n    List.fold (fun acc x -> acc + x) 0 evens", "    let rec add' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst", "    let rec add' acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x + acc) xs\n    add' 0 lst", "    let rec add' acc lst =\n        match lst with\n        | [] -> acc\n        | x :: xs -> add' (x :: acc) xs\n    add' [] lst", "    let even = List.filter (fun x -> x % 2 = 0) lst\n    let odd = List.filter (fun x -> x % 2 = 1) lst\n    List.fold (fun acc x -> acc + x) 0 even\n    |> List.sum", "    let even = List.filter (fun i -> i % 2 = 0) lst\n    let odd = List.filter (fun i -> i % 2 = 1) lst\n    List.fold (fun acc i -> acc + i) 0 even\n    |> List.sum", "    let rec add' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 = 1) lst\n    List.fold (fun acc i -> acc + i) 0 evens\n    |> fun x -> x + List.sum odds", "    let even = List.filter (fun x -> x % 2 = 0) lst\n    let odd = List.filter (fun x -> x % 2 = 1) lst\n    List.fold (fun acc x -> acc + x) 0 even\n    |> fun x -> x + (List.length odd)", "    let rec add' acc lst = \n        match lst with\n        | [] -> acc\n        | x::xs -> add' (x::acc) xs\n    add' [] lst", "    let evens = List.filter (fun i -> i % 2 = 0) lst\n    let odds = List.filter (fun i -> i % 2 <> 0) lst\n    List.fold (fun acc i -> acc + i) 0 evens\n    |> List.sum", "    let evens = lst |> List.filter (fun x -> x % 2 = 0)\n    let odds = lst |> List.filter (fun x -> x % 2 = 1)\n    let evens' = evens |> List.map (fun x -> x + 1)\n    let odds' = odds |> List.map (fun x -> x - 1)\n    let evens'' = evens |> List.map (fun x -> x + 1)\n    let odds'' = odds |> List.map (fun x -> x - 1)\n    let evens''' = evens |> List.map (fun x -> x + 1)\n    let odds''' = odds |> List.map (fun x -> x - 1)\n    let evens'''' = evens |> List.map (fun x -> x + 1)\n    let odds'''' = odds |> List.map (fun x -> x - 1)\n    let evens''''' = evens |> List.map (fun x -> x + 1)\n    let odds'''''' = odds |> List.map (fun x -> x - 1)\n    let evens'''''' = evens |> List.map (fun x -> x + 1)\n    let evens''''''' = evens |> List.map (fun x -> x + 1)\n    let evens'''''''' = evens |> List.map (fun x -> x + 1)\n    let evens'''''''' = evens |> List.map (fun x -> x + 1)\n    let evens''''''''' = evens |> List.map (fun x -> x + 1)\n    let evens''''''''''' = evens |> List.map (fun x -> x + 1)\n    let evens''''''''''' = evens |> List.map (fun x -> x + 1)\n    let evens''''''''''' = evens |> List.map (fun x -> x + 1)\n    let evens''''''''''' = evens |> List.map (fun x -> x + 1)\n    let evens''", "    let rec add' acc lst =\n        match lst with\n        | [] -> acc\n        | x::xs -> add' (acc + x) xs\n    add' 0 lst", "    let even = List.filter (fun x -> x % 2 = 0) lst\n    let odd = List.filter (fun x -> x % 2 = 1) lst\n    List.fold (fun acc x -> acc + x) 0 even\n    |> fun x -> x + (List.length odd)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}