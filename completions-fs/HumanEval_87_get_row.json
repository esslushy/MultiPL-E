{"name": "HumanEval_87_get_row", "language": "fs", "prompt": "//You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nlet get_row (lst: int list list) (x: int):  int * int list  = \n", "tests": "let test() = \n  let candidate = get_row\n  assert (candidate [[1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 1; 6]; [1; 2; 3; 4; 5; 1]] 1 = [(0, 0); (1, 4); (1, 0); (2, 5); (2, 0)])\n  assert (candidate [[1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]] 2 = [(0, 1); (1, 1); (2, 1); (3, 1); (4, 1); (5, 1)])\n  assert (candidate [[1; 2; 3; 4; 5; 6]; [1; 2; 3; 4; 5; 6]; [1; 1; 3; 4; 5; 6]; [1; 2; 1; 4; 5; 6]; [1; 2; 3; 1; 5; 6]; [1; 2; 3; 4; 1; 6]; [1; 2; 3; 4; 5; 1]] 1 = [(0, 0); (1, 0); (2, 1); (2, 0); (3, 2); (3, 0); (4, 3); (4, 0); (5, 4); (5, 0); (6, 5); (6, 0)])\n  assert (candidate [] 1 = [])\n  assert (candidate [[1]] 2 = [])\n  assert (candidate [[]; [1]; [1; 2; 3]] 3 = [(2, 2)])\n  0\n\ntest()", "completions": ["    let rec loop (acc: int list) (x: int) =\n        match x with\n        | 0 -> acc\n        | _ -> loop (acc@[x]) (x-1)\n    loop [] x", "    let rec loop (x: int) (lst: int list list) =\n        match lst with\n        | [] -> (x, [])\n        | (x, y)::tl -> \n            let (y', lst') = loop (x+y) tl\n            (x, y@y')\n    loop x lst", "    let rec loop (x: int) (lst: int list list) =\n        match lst with\n        | [] -> (x, [])\n        | (x1, y1)::tl ->\n            if x = x1 then\n                (x, y1::tl)\n            else\n                let (x2, y2) = loop (x1+1) tl\n                (x1, y1::x2::y2::tl)\n    loop x lst", "    let rec loop (acc: int list list) (x: int) =\n        match x with\n        | 0 -> (acc, [])\n        | _ ->\n            let (y, xs) = loop (acc@[x]) (x-1)\n            (y::acc, xs)\n    loop [] x", "    let rec loop (x: int) (lst: int list list) = \n        match lst with\n        | [] -> (x, [])\n        | (x1, x2)::tl -> \n            if x1 = x then \n                (x, (x2::lst))\n            else \n                loop (x1+1) (x2::lst)\n    loop x lst", "    let rec loop (acc: int list list) (x: int) =\n        match x with\n        | 0 -> acc\n        | 1 -> loop (x::acc) (x-1)\n        | _ -> loop (x::acc) (x-1)\n    loop [] x", "    let rec loop (acc: int list) (x: int) =\n        match x with\n        | 0 -> acc\n        | x -> loop (x::acc) (x-1)\n    loop [] x", "    let rec loop (acc: int list) (x: int) =\n        match x with\n        | 0 -> acc\n        | _ -> loop (acc@[x]) (x-1)\n    loop [] x", "    let rec loop (acc: int list list) (x: int) =\n        match x with\n        | 0 -> (acc, [])\n        | 1 -> (acc, [])\n        | _ -> loop (acc@[x]) (x-1)\n    loop [] x", "    let rec loop i =\n        match lst with\n        | [] -> (i, [])\n        | (x1, y1)::tl ->\n            let (i', x2) = loop (i + 1)\n            (i', (x1, y1)::x2)\n    loop 0", "    let rec loop (acc: int list list) (x: int) =\n        match x with\n        | 0 -> acc\n        | _ -> loop (acc@[x]) (x-1)\n    loop [] x", "    let rec loop (acc: int list) (x: int) =\n        match lst with\n        | [] -> (acc, [])\n        | (row, cols)::tl ->\n            if x = row then (acc, [])\n            else loop (row::acc) (x - row)\n    loop [] x", "    let rec loop i = \n        match lst with \n        | [] -> (i, [])\n        | (x1, x2)::tl -> \n            if x1 = x then \n                (i, (x2, x1)::tl)\n            else \n                loop (i + 1)\n    loop 0", "    let rec loop (lst: int list list) (x: int) =\n        match lst with\n        | [] -> (x, [])\n        | (x1, y1)::tl ->\n            let (x2, y2) = loop tl x\n            (x1, y1 :: x2)\n    loop lst x", "    let rec loop (x: int) (y: int) = \n        match y with\n        | 0 -> (x, lst)\n        | 1 -> (x, lst)\n        | _ -> loop (x - 1) (y - 1)\n    loop x 0", "    let rec loop (acc: int list list) (x: int) = \n        match x with\n        | 0 -> (acc, [])\n        | 1 -> (acc, [])\n        | x -> loop (acc@[x]) (x-1)\n    loop [] x", "    let rec loop i = \n        match lst with \n        | [] -> (i, [])\n        | (x1, y1)::tl -> \n            if x = x1 then \n                (i, (x, y1))\n            else \n                loop (i+1)\n    loop 0", "    let rec loop i acc = \n        match lst with \n        | [] -> (i, acc)\n        | (row, cols)::tl -> \n            if row = x then loop (i+1) (cols@acc)\n            else loop (i+1) (row::acc)\n    loop 0 []", "    let rec loop i = \n        match i with\n        | 0 -> (x, lst)\n        | 1 -> (x, lst)\n        | 2 -> (x, lst)\n        | 3 -> (x, lst)\n        | 4 -> (x, lst)\n        | 5 -> (x, lst)\n        | 6 -> (x, lst)\n        | _ -> loop (i - 1)\n    loop 0", "    let rec loop i = \n        match i with\n        | 0 -> (x, lst)\n        | _ -> \n            let (y, lst') = loop (i-1)\n            (x, y::lst')\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}