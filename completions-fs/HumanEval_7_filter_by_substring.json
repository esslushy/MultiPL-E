{"name": "HumanEval_7_filter_by_substring", "language": "fs", "prompt": "//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nlet filter_by_substring (strings: string list) (substring: string): string list  = \n", "tests": "let test() = \n  let candidate = filter_by_substring\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  assert (candidate [\"xxx\"; \"asd\"; \"aaaxxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xx\" = [\"xxx\"; \"aaaxxy\"; \"xxxAAA\"; \"xxx\"])\n  assert (candidate [\"grunt\"; \"trumpet\"; \"prune\"; \"gruesome\"] \"run\" = [\"grunt\"; \"prune\"])\n  0\n\ntest()", "completions": ["    let rec filter_by_substring' (strings: string list) (substring: string) = \n        match strings with\n        | [] -> []\n        | head::tail -> \n            if substring.StartsWith(head) then \n                filter_by_substring' tail (substring.Substring(1))\n            else \n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string) = \n        match strings with \n        | [] -> []\n        | head::tail -> \n            if substring.StartsWith(head) then filter_by_substring' tail (substring.Substring(1))\n            else filter_by_substring' tail (substring.Substring(1))\n    filter_by_substring' strings (substring.Substring(0,1))", "    let rec filter_by_substring' (strings: string list) (substring: string) (acc: string list) =\n        match strings with\n        | [] -> acc\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail substring (acc@[substring])\n            else\n                filter_by_substring' tail substring (acc@[substring])\n    filter_by_substring' strings (substring.Trim()) []", "    let rec filter_by_substring' (strings: string list) (substring: string) : string list = \n        match strings with\n        | [] -> []\n        | head::tail -> \n            if substring.StartsWith(head) then \n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string) = \n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string): string list = \n        match strings with\n        | [] -> []\n        | head::tail -> \n            if substring.StartsWith(head) then \n                filter_by_substring' tail (substring.Substring(1))\n            else \n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string): string list = \n        match strings with \n        | [] -> []\n        | head::tail -> \n            if substring.StartsWith(head) then \n                filter_by_substring' tail (substring.Substring(1))\n            else filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string) : string list =\n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string): string list =\n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string): string list =\n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string) : string list =\n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring_rec (strings: string list) (substring: string) = \n        match strings with\n        | [] -> []\n        | head::tail -> \n            if substring.StartsWith(head) then \n                filter_by_substring_rec tail (substring.Substring(1))\n            else filter_by_substring_rec tail (substring)\n    filter_by_substring_rec strings (substring)", "    let rec filter_by_substring (strings: string list) (substring: string) = \n        match strings with\n        | [] -> []\n        | x::xs -> \n            if substring.StartsWith(x) then filter_by_substring xs substring\n            else xs\n    filter_by_substring strings substring", "    let rec filter_by_substring_rec (strings: string list) (substring: string) (acc: string list) = \n        if strings.Length = 0 then acc\n        else\n            let substring_list = strings |> List.filter (fun s -> s.Contains(substring))\n            let new_acc = filter_by_substring_rec substring_list substring acc\n            filter_by_substring_rec substring_list substring_list new_acc\n    filter_by_substring_rec strings substring []", "    let rec filter_by_substring_rec (strings: string list) (substring: string) (acc: string list): string list = \n        match strings with\n        | [] -> acc\n        | head::tail ->\n            if substring.StartsWith(head) then filter_by_substring_rec tail substring acc\n            else filter_by_substring_rec tail substring acc\n    filter_by_substring_rec strings substring []", "    let rec filter_by_substring' (strings: string list) (substring: string): string list = \n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let rec filter_by_substring' (strings: string list) (substring: string): string list =\n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)", "    let filter_by_substring_list (strings: string list) (substring: string) = \n        let filter_by_substring_list_list (strings: string list) (substring: string) = \n            let filter_by_substring_list_list_list (strings: string list) (substring: string) = \n                let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                    let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                        let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                            let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                    let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                        let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                            let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                                let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                                    let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                                        let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                                            let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                                                let filter_by_substring_list_list_list_list (strings: string list) (substring: string) = \n                                                                    let filter_by_substring_list_list_list_list (", "    let rec filter_by_substring (acc: string list) (substring: string) = \n        if String.IsNullOrEmpty(substring) then acc\n        else if String.IsNullOrEmpty(substring) then acc\n        else if substring.StartsWith(substring) then filter_by_substring (substring::acc) substring\n        else filter_by_substring (substring::acc) substring\n    filter_by_substring [] strings", "    let rec filter_by_substring' (strings: string list) (substring: string) : string list =\n        match strings with\n        | [] -> []\n        | head::tail ->\n            if substring.StartsWith(head) then\n                filter_by_substring' tail (substring.Substring(1))\n            else\n                filter_by_substring' tail (substring)\n    filter_by_substring' strings (substring)"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}