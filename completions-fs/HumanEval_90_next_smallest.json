{"name": "HumanEval_90_next_smallest", "language": "fs", "prompt": "//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3, 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n// next_smallest([1, 1]) == None\nlet next_smallest (lst: int list): int option  = \n", "tests": "let test() = \n  let candidate = next_smallest\n  assert (candidate [1; 2; 3; 4; 5] = 2)\n  assert (candidate [5; 1; 4; 3; 2] = 2)\n  assert (candidate [] = None)\n  assert (candidate [1; 1] = None)\n  assert (candidate [1; 1; 1; 1; 0] = 1)\n  assert (candidate [1; 1] = None)\n  assert (candidate [-35; 34; 12; -45] = -35)\n  0\n\ntest()", "completions": ["    let rec loop (lst: int list) = \n        match lst with \n        | [] -> None\n        | x::xs -> \n            if x <= lst.Head then \n                loop xs\n            else \n                loop xs\n    loop lst", "    match lst with\n    | [] -> None\n    | x::xs -> \n        match x with\n        | x when x > lst.Head -> None\n        | x -> Some x", "    let rec loop i =\n        if i = lst.Length then None\n        else\n            let curr = lst.[i]\n            if curr < lst.[i - 1] then loop (i - 1)\n            else loop (i - 1)\n    loop 0", "    let rec loop i = \n        if i = lst.Length then None\n        else \n            match lst.[i] with\n            | x when x > lst.[i-1] -> loop (i-1)\n            | x when x < lst.[i] -> loop (i+1)\n            | _ -> loop (i+1)\n    loop 0", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs -> \n        let rec loop acc = \n            match xs with\n            | [] -> acc\n            | [y] -> loop (y::acc)\n            | x::xs -> loop (x::acc)\n        loop []", "    match lst with\n    | [] -> None\n    | x::xs -> \n        let rec loop i =\n            if i = 0 then None\n            else\n                match xs with\n                | [] -> None\n                | x::xs -> \n                    if i = xs.Length-1 then None\n                    else loop (i+1)\n        loop 0", "    let rec loop (lst: int list) = \n        match lst with \n        | [] -> None\n        | x::xs -> \n            let xs' = x::xs\n            if List.length xs' > 0 then \n                loop xs'\n            else \n                loop xs\n    loop lst", "    let rec find_smallest (lst: int list) = \n        match lst with\n        | [] -> None\n        | x::xs -> \n            let smaller = x::xs\n            if smaller.Length < lst.Length then\n                find_smallest smaller\n            else\n                find_smallest smaller\n    find_smallest lst", "    match lst with\n    | [] -> None\n    | [x] -> Some x\n    | x::xs ->\n        let rec loop i =\n            if i < xs.Length then\n                match xs.[i] with\n                | x when x = x -> loop (i+1)\n                | _ -> loop (i+1)\n            else\n                loop (i+1)\n        loop 0", "    let rec loop i = \n        if i = lst.Length then None\n        else \n            let x = lst.[i]\n            if x < lst.[i-1] then loop (i-1)\n            else loop (i-1)\n    loop 0", "    let rec loop (acc: int list) = \n        match acc with\n        | [] -> None\n        | h::t -> \n            if h > lst.Head then loop t\n            else loop (h::acc)\n    loop lst", "    let rec find_min (lst: int list) = \n        match lst with\n        | [] -> None\n        | h::t -> \n            if h > lst.Head then find_min t\n            else find_min (h::lst)\n    find_min lst", "    let rec loop i = \n        if i = lst.Length then None\n        else \n            let curr = lst.[i]\n            if curr <= i then loop (i+1)\n            else loop (i-1)\n    loop 0", "    match lst with\n    | [] -> None\n    | x::xs -> \n        let rec loop i = \n            if i = 0 then None\n            elif x < xs.[i-1] then loop (i-1)\n            else loop (i-1)\n        loop 0", "    let rec loop (lst: int list) = \n        match lst with\n        | [] -> None\n        | x::xs -> \n            let x' = x + 1\n            if x' < lst.Length then \n                loop xs\n            else\n                loop xs\n    loop lst", "    let rec find_smallest (lst: int list) = \n        match lst with\n        | [] -> None\n        | x::xs -> \n            let smaller = x::xs\n            if smaller.Length > lst.Length then find_smallest smaller\n            else find_smallest smaller\n    find_smallest lst", "    let rec loop acc = \n        match lst with\n        | [] -> None\n        | x::xs -> \n            match loop (x::acc) with\n            | None -> Some x\n            | Some x -> loop (x::acc)\n    loop []", "    let rec loop i = \n        if i < lst.Length then \n            let x = lst.[i]\n            if x < i then loop (i+1)\n            else loop (x-1)\n        else None\n    loop 0", "    let rec find_smallest (lst: int list) = \n        match lst with\n        | [] -> None\n        | x::xs -> \n            if x <= lst.Head then \n                Some (lst.Head, x)\n            else\n                find_smallest xs\n    find_smallest lst", "    let rec loop i =\n        match lst with\n        | [] -> None\n        | hd::tl ->\n            if i = 0 then\n                Some (hd)\n            else\n                loop (i-1)\n    loop 0"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}