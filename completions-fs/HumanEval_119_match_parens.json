{"name": "HumanEval_119_match_parens", "language": "fs", "prompt": "//You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(', ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nlet match_parens (lst: string list): string  = \n", "tests": "let test() = \n  let candidate = match_parens\n  assert (candidate [\"()(\"; \")\"] = \"Yes\")\n  assert (candidate [\")\"; \")\"] = \"No\")\n  assert (candidate [\"(()(())\"; \"())())\"] = \"No\")\n  assert (candidate [\")())\"; \"(()()(\"] = \"Yes\")\n  assert (candidate [\"(())))\"; \"(()())((\"] = \"Yes\")\n  assert (candidate [\"()\"; \"())\"] = \"No\")\n  assert (candidate [\"(()(\"; \"()))()\"] = \"Yes\")\n  assert (candidate [\"((((\"; \"((())\"] = \"No\")\n  assert (candidate [\")(()\"; \"(()(\"] = \"No\")\n  assert (candidate [\")(\"; \")(\"] = \"No\")\n  assert (candidate [\"(\"; \")\"] = \"Yes\")\n  assert (candidate [\")\"; \"(\"] = \"Yes\")\n  0\n\ntest()", "completions": ["    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | head::tail -> \n            match head with\n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"No\"\n        | head::tail -> match_parens' tail\n    match_parens' lst", "    let rec match_parens_rec (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | head::tail -> \n            match head with\n            | '(' -> match_parens_rec tail\n            | ')' -> match_parens_rec tail\n            | _ -> match_parens_rec tail\n    match_parens_rec lst", "    let rec match_parens_rec (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | head::tail -> \n            match head with\n            | '(' -> match_parens_rec tail\n            | ')' -> match_parens_rec tail\n            | _ -> match_parens_rec tail\n    match_parens_rec lst", "    let rec match_parens' (lst: string list) = \n        match lst with \n        | [] -> \"\"\n        | head::tail -> \n            let head_str = head.ToString()\n            let head_str_str = head_str.ToString()\n            let head_str_str_str = head_str_str.ToString()\n            let head_str_str_str_str = head_str_str_str.ToString()\n            let head_str_str_str_str_str = head_str_str_str_str.ToString()\n            let head_str_str_str_str_str_str = head_str_str_str_str_str.ToString()\n            let head_str_str_str_str_str_str_str = head_str_str_str_str_str_str_str.ToString()\n            let head_str_str_str_str_str_str_str_str = head_str_str_str_str_str_str_str_str_str_str.ToString()\n            let head_str_str_str_str_str_str_str_str_str_str = head_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str.ToString()\n            let head_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str", "    let rec match_parens' (lst: string list) : string = \n        match lst with \n        | [] -> \"\"\n        | head::tail -> \n            match head with \n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec loop (lst: string list) =\n        match lst with\n        | [] -> \"\"\n        | head::tail ->\n            let head = head.Trim()\n            if head.StartsWith(\"(\") && head.EndsWith(\")\") then\n                let head = head.Substring(1, head.Length - 2)\n                let tail = tail.Substring(0, tail.Length - 1)\n                loop tail\n            else\n                loop tail\n    loop lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"No\"\n        | head::tail -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"No\"\n        | head::tail -> \n            match head with\n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | (x, y)::tail -> \n            match x with\n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | (x, y) :: tail -> \n            match x with\n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | head::tail ->\n            let head_str = head.ToString()\n            let head_str_len = head_str.Length\n            let head_str_len_plus_one = head_str_len + 1\n            let head_str_plus_one = head_str.Substring(0, head_str_len_plus_one)\n            let head_str_plus_one_plus_one = head_str_plus_one.Substring(0, head_str_plus_one_plus_one.Length)\n            let head_str_plus_one_plus_one_plus_one = head_str_plus_one_plus_one.Substring(0, head_str_plus_one_plus_one_plus_one.Length)\n            let head_str_plus_one_plus_one_plus_one_plus_one = head_str_plus_one_plus_one_plus_one.Substring(0, head_str_plus_one_plus_one_plus_one_plus_one.Length)\n            let head_str_plus_one_plus_one_plus_one_plus_one_plus_one = head_str_plus_one_plus_one_plus_one_plus_one_plus_one.Substring(0, head_str_plus_one_plus_one_plus_one_plus_one_plus_one.Length)\n            let head_str_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = head_str_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\n            let head_str_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one = head_str_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one", "    let rec match_parens' (lst: string list) : string = \n        match lst with\n        | [] -> \"\"\n        | head::tail -> \n            let head = head.Trim()\n            let tail = tail |> List.map (fun x -> x.Trim())\n            match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with \n        | [] -> \"\"\n        | head::tail -> \n            match head with \n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with \n        | [] -> \"\"\n        | head::tail -> \n            match head with \n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | (x, y)::tail -> \n            match x with\n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens_rec (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | head::tail -> \n            match head with\n            | '(' -> match_parens_rec tail\n            | ')' -> match_parens_rec tail\n            | _ -> match_parens_rec tail\n    match_parens_rec lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"No\"\n        | head::tail -> \n            match head with\n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | head::tail -> match_parens' tail\n    match_parens' lst", "    let rec match_parens' (lst: string list) = \n        match lst with\n        | [] -> \"\"\n        | head::tail -> \n            match head with\n            | '(' -> match_parens' tail\n            | ')' -> match_parens' tail\n            | _ -> match_parens' tail\n    match_parens' lst"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}