{"name": "HumanEval_29_filter_by_prefix", "language": "fs", "prompt": "//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc', 'array']\nlet filter_by_prefix (strings: string list) (prefix: string): string list  = \n", "tests": "let test() = \n  let candidate = filter_by_prefix\n  assert (candidate [] \"john\" = [])\n  assert (candidate [\"xxx\"; \"asd\"; \"xxy\"; \"john doe\"; \"xxxAAA\"; \"xxx\"] \"xxx\" = [\"xxx\"; \"xxxAAA\"; \"xxx\"])\n  0\n\ntest()", "completions": ["    let rec filter_by_prefix (prefixes: string list) (str: string) = \n        match prefixes with\n        | [] -> str :: strings\n        | prefix :: rest -> \n            if str.StartsWith(prefix) then \n                filter_by_prefix rest str\n            else\n                filter_by_prefix rest (prefix + str)\n    filter_by_prefix strings prefix", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))\n    |> List.toArray", "    let rec filter_by_prefix (prefixes: string list) (strings: string list) = \n        match strings with\n        | [] -> prefixes\n        | x::xs -> \n            if x.StartsWith(prefix) then \n                prefixes @ [x]\n            else filter_by_prefix prefixes xs\n    filter_by_prefix [] strings", "    let rec filter_by_prefix (strings: string list) (prefix: string) =\n        match strings with\n        | [] -> prefix::strings\n        | head::tail ->\n            if head.StartsWith(prefix) then\n                filter_by_prefix tail prefix\n            else\n                filter_by_prefix tail prefix\n    filter_by_prefix strings prefix", "    let rec filter_by_prefix_rec (strings: string list) (prefix: string) = \n        match strings with\n        | [] -> prefix::strings\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                filter_by_prefix_rec tail prefix\n            else \n                filter_by_prefix_rec tail prefix\n    filter_by_prefix_rec strings prefix", "    let rec filter_by_prefix (prefixes: string list) (strings: string list) = \n        match strings with\n        | [] -> prefixes\n        | head::tail ->\n            if head.StartsWith(prefix) then\n                prefixes\n            else\n                filter_by_prefix prefixes tail\n    filter_by_prefix [] strings", "    let rec filter_by_prefix (strings: string list) (prefix: string): string list = \n        match strings with\n        | [] -> []\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                filter_by_prefix tail (head.Substring(prefix.Length))\n            else\n                filter_by_prefix tail (head + prefix)\n    filter_by_prefix strings []", "    let rec filter_by_prefix_rec (prefixes: string list) (strings: string list) = \n        match strings with\n        | [] -> prefixes\n        | head::tail -> \n            let new_prefixes = \n                match prefix with\n                | \"\" -> prefixes\n                | prefix -> \n                    let new_prefixes = prefix::prefixes\n                    if head.StartsWith(prefix) then \n                        new_prefixes\n                    else\n                        new_prefixes\n            filter_by_prefix_rec new_prefixes tail\n    filter_by_prefix_rec [] strings", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))", "    let rec filter_by_prefix' (strings: string list) (prefix: string) : string list =\n        match strings with\n        | [] -> prefix::strings\n        | head::tail ->\n            if prefix.StartsWith(head) then\n                filter_by_prefix' tail prefix\n            else\n                filter_by_prefix' tail prefix\n    filter_by_prefix' strings prefix", "    let rec filter_by_prefix (acc: string list) (prefix: string) = \n        if prefix.StartsWith(acc) then acc\n        else filter_by_prefix (prefix::acc) prefix\n    filter_by_prefix strings prefix", "    let rec filter_by_prefix (acc: string list) (prefix: string) (strings: string list): string list = \n        match strings with\n        | [] -> acc\n        | head::tail ->\n            if prefix.StartsWith(head) then\n                filter_by_prefix (acc@[head]) prefix tail\n            else\n                filter_by_prefix (acc@[head]) prefix tail\n    filter_by_prefix [] prefix strings", "    let rec filter_by_prefix (strings: string list) (prefix: string) = \n        match strings with \n        | [] -> []\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                filter_by_prefix tail prefix\n            else \n                filter_by_prefix tail head\n    filter_by_prefix strings prefix", "    let rec filter_by_prefix (strings: string list) (prefix: string): string list = \n        match strings with\n        | [] -> []\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                filter_by_prefix tail (prefix + head)\n            else\n                filter_by_prefix tail (prefix + head)\n    filter_by_prefix strings prefix", "    let rec filter_by_prefix_rec (strings: string list) (prefix: string) =\n        match strings with\n        | [] -> prefix::strings\n        | head::tail ->\n            if head.StartsWith(prefix) then\n                filter_by_prefix_rec tail prefix\n            else\n                filter_by_prefix_rec tail head\n    filter_by_prefix_rec strings prefix", "    let rec filter_by_prefix (strings: string list) (prefix: string): string list = \n        match strings with\n        | [] -> []\n        | head::tail ->\n            if head.StartsWith(prefix) then\n                filter_by_prefix tail (head.Substring(prefix.Length))\n            else\n                filter_by_prefix tail (head + prefix)\n    filter_by_prefix strings []", "    let rec filter_by_prefix (acc: string list) (prefix: string) (strings: string list) = \n        match strings with\n        | [] -> acc\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                filter_by_prefix (acc@[head]) prefix tail\n            else \n                filter_by_prefix (acc@[head]) prefix tail\n    filter_by_prefix [] prefix strings", "    let rec filter_by_prefix' (strings: string list) (prefix: string) : string list = \n        match strings with \n        | [] -> []\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                filter_by_prefix' tail prefix\n            else \n                filter_by_prefix' tail head\n    filter_by_prefix' strings prefix", "    strings\n    |> List.filter (fun s -> s.StartsWith(prefix))", "    let rec filter_by_prefix (strings: string list) (prefix: string): string list = \n        match strings with\n        | [] -> []\n        | head::tail -> \n            if head.StartsWith(prefix) then \n                filter_by_prefix tail (head.Substring(prefix.Length))\n            else\n                strings\n    filter_by_prefix strings prefix"], "stop_tokens": ["\n(*", "\n//", "\ntype", "\n\n"]}